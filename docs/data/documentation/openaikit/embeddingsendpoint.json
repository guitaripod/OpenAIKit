{"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"kind":"symbol","seeAlsoSections":[{"anchor":"Embeddings","identifiers":["doc:\/\/OpenAIKit\/documentation\/OpenAIKit\/EmbeddingRequest","doc:\/\/OpenAIKit\/documentation\/OpenAIKit\/EmbeddingResponse"],"generated":true,"title":"Embeddings"}],"abstract":[{"type":"text","text":"Provides access to OpenAIâ€™s embeddings API for converting text into numerical vectors."}],"metadata":{"roleHeading":"Class","modules":[{"name":"OpenAIKit"}],"symbolKind":"class","navigatorTitle":[{"text":"EmbeddingsEndpoint","kind":"identifier"}],"externalID":"s:9OpenAIKit18EmbeddingsEndpointC","role":"symbol","title":"EmbeddingsEndpoint","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EmbeddingsEndpoint","kind":"identifier"}]},"hierarchy":{"paths":[["doc:\/\/OpenAIKit\/documentation\/OpenAIKit"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/OpenAIKit\/documentation\/OpenAIKit\/EmbeddingsEndpoint"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/openaikit\/embeddingsendpoint"]}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/OpenAIKit\/s8SendableP"],"title":"Conforms To","kind":"relationships"}],"topicSections":[{"anchor":"Instance-Methods","identifiers":["doc:\/\/OpenAIKit\/documentation\/OpenAIKit\/EmbeddingsEndpoint\/create(_:)"],"generated":true,"title":"Instance Methods"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EmbeddingsEndpoint","kind":"identifier"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"EmbeddingsEndpoint","type":"codeVoice"},{"text":" class enables you to convert text into high-dimensional","type":"text"},{"text":" ","type":"text"},{"text":"vectors (embeddings) that capture semantic meaning. These embeddings can be used","type":"text"},{"text":" ","type":"text"},{"text":"for various natural language processing tasks such as:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Semantic Search","type":"text"}]},{"text":": Find documents similar to a query","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Clustering","type":"text"}]},{"type":"text","text":": Group similar texts together"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Recommendations","type":"text"}],"type":"strong"},{"text":": Suggest related content","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Anomaly Detection","type":"text"}],"type":"strong"},{"type":"text","text":": Identify outliers in text data"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Classification"}]},{"text":": Train machine learning models on text features","type":"text"}]}]}]},{"text":"Understanding Embeddings","type":"heading","anchor":"Understanding-Embeddings","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Embeddings are dense numerical representations of text where semantically similar"},{"type":"text","text":" "},{"type":"text","text":"texts have vectors that are close together in the high-dimensional space. The"},{"type":"text","text":" "},{"type":"text","text":"distance between vectors (typically measured using cosine similarity) indicates"},{"type":"text","text":" "},{"type":"text","text":"how related the texts are in meaning."}]},{"text":"Available Models","type":"heading","anchor":"Available-Models","level":2},{"text":"text-embedding-3-small","type":"heading","anchor":"text-embedding-3-small","level":3},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"Dimensions","type":"text"}],"type":"strong"},{"type":"text","text":": 1536 (can be reduced)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Use Case","type":"text"}],"type":"strong"},{"type":"text","text":": General-purpose, cost-effective"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Performance","type":"text"}]},{"text":": Good balance of quality and speed","type":"text"}]}]}]},{"text":"text-embedding-3-large","type":"heading","anchor":"text-embedding-3-large","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Dimensions"}]},{"type":"text","text":": 3072 (can be reduced)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Use Case"}]},{"text":": Higher accuracy requirements","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Performance"}]},{"type":"text","text":": Best quality, higher cost"}]}]}]},{"text":"text-embedding-ada-002 (Legacy)","type":"heading","anchor":"text-embedding-ada-002-Legacy","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Dimensions"}]},{"type":"text","text":": 1536 (fixed)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Use Case","type":"text"}]},{"type":"text","text":": Backward compatibility only"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Note","type":"text"}]},{"type":"text","text":": Not recommended for new applications"}]}]}]},{"text":"Basic Usage","type":"heading","anchor":"Basic-Usage","level":2},{"syntax":"swift","type":"codeListing","code":["let client = OpenAIKit(apiKey: \"your-api-key\")","","\/\/ Single text embedding","let request = EmbeddingRequest(","    input: \"The history of artificial intelligence\",","    model: \"text-embedding-3-small\"",")","","let response = try await client.embeddings.create(request)","let embedding = response.data.first?.embedding"]},{"text":"Advanced Examples","type":"heading","anchor":"Advanced-Examples","level":2},{"text":"Semantic Search Implementation","type":"heading","anchor":"Semantic-Search-Implementation","level":3},{"syntax":"swift","type":"codeListing","code":["\/\/ 1. Create embeddings for your documents","let documents = [","    \"Swift is a powerful programming language\",","    \"Python is popular for machine learning\",","    \"JavaScript runs in web browsers\"","]","","let docsRequest = EmbeddingRequest(","    input: documents,","    model: \"text-embedding-3-small\"",")","let docsResponse = try await client.embeddings.create(docsRequest)","","\/\/ 2. Create embedding for search query","let queryRequest = EmbeddingRequest(","    input: \"What language should I use for iOS development?\",","    model: \"text-embedding-3-small\"",")","let queryResponse = try await client.embeddings.create(queryRequest)","","\/\/ 3. Calculate similarities","if let queryVector = queryResponse.data.first?.embedding.floatValues {","    let similarities = docsResponse.data.map { doc in","        guard let docVector = doc.embedding.floatValues else { return 0.0 }","        return cosineSimilarity(queryVector, docVector)","    }","    ","    \/\/ Find most similar document","    if let maxIndex = similarities.enumerated().max(by: { $0.element < $1.element })?.offset {","        print(\"Most relevant: \\(documents[maxIndex])\")","    }","}"]},{"text":"Dimension Reduction for Efficiency","type":"heading","anchor":"Dimension-Reduction-for-Efficiency","level":3},{"syntax":"swift","type":"codeListing","code":["let request = EmbeddingRequest(","    input: \"Large corpus of text to embed\",","    model: \"text-embedding-3-small\",","    dimensions: 512  \/\/ Reduce from 1536 to 512",")","","\/\/ Smaller embeddings = faster similarity calculations and less storage","let response = try await client.embeddings.create(request)"]},{"text":"Batch Processing with Base64 Encoding","type":"heading","anchor":"Batch-Processing-with-Base64-Encoding","level":3},{"syntax":"swift","type":"codeListing","code":["let batchRequest = EmbeddingRequest(","    input: Array(repeating: \"Sample text\", count: 100),","    model: \"text-embedding-3-small\",","    encodingFormat: .base64  \/\/ More efficient for large batches",")","","let response = try await client.embeddings.create(batchRequest)","\/\/ Store base64 strings directly in database"]},{"text":"Best Practices","type":"heading","anchor":"Best-Practices","level":2},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Batch Requests","type":"text"}]},{"text":": Process multiple texts in a single request (up to 2048 inputs)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Cache Embeddings"}],"type":"strong"},{"text":": Store computed embeddings to avoid redundant API calls","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Normalize Vectors"}]},{"type":"text","text":": For cosine similarity, pre-normalize vectors for faster calculations"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Choose Right Model"}],"type":"strong"},{"type":"text","text":": Use "},{"type":"codeVoice","code":"text-embedding-3-small"},{"type":"text","text":" for most use cases"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Consider Dimensions"}]},{"type":"text","text":": Reduce dimensions when possible to save costs and improve speed"}]}]}]},{"text":"Error Handling","type":"heading","anchor":"Error-Handling","level":2},{"syntax":"swift","type":"codeListing","code":["do {","    let response = try await client.embeddings.create(request)","    \/\/ Process embeddings","} catch {","    if let apiError = error as? OpenAIError {","        switch apiError {","        case .rateLimitExceeded:","            \/\/ Implement backoff strategy","        case .invalidRequest(let message):","            print(\"Invalid request: \\(message)\")","        default:","            \/\/ Handle other errors","        }","    }","}"]},{"type":"aside","name":"See Also","style":"note","content":[{"inlineContent":[{"text":"","type":"text"},{"identifier":"doc:\/\/OpenAIKit\/documentation\/OpenAIKit\/EmbeddingRequest","type":"reference","isActive":true},{"text":", ","type":"text"},{"identifier":"doc:\/\/OpenAIKit\/documentation\/OpenAIKit\/EmbeddingResponse","type":"reference","isActive":true}],"type":"paragraph"}]}]}],"references":{"doc://OpenAIKit/documentation/OpenAIKit":{"kind":"symbol","abstract":[{"text":"A powerful, type-safe Swift SDK for the OpenAI API with support for all major endpoints and platforms.","type":"text"}],"identifier":"doc:\/\/OpenAIKit\/documentation\/OpenAIKit","role":"collection","title":"OpenAIKit","url":"\/documentation\/openaikit","type":"topic"},"doc://OpenAIKit/documentation/OpenAIKit/EmbeddingRequest":{"navigatorTitle":[{"text":"EmbeddingRequest","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A request to create embeddings for the given input."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EmbeddingRequest","kind":"identifier"}],"url":"\/documentation\/openaikit\/embeddingrequest","title":"EmbeddingRequest","role":"symbol","identifier":"doc:\/\/OpenAIKit\/documentation\/OpenAIKit\/EmbeddingRequest","kind":"symbol"},"doc://OpenAIKit/documentation/OpenAIKit/EmbeddingResponse":{"title":"EmbeddingResponse","navigatorTitle":[{"kind":"identifier","text":"EmbeddingResponse"}],"identifier":"doc:\/\/OpenAIKit\/documentation\/OpenAIKit\/EmbeddingResponse","kind":"symbol","url":"\/documentation\/openaikit\/embeddingresponse","abstract":[{"type":"text","text":"The response from an embedding creation request."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddingResponse"}]},"doc://OpenAIKit/documentation/OpenAIKit/EmbeddingsEndpoint":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EmbeddingsEndpoint","kind":"identifier"}],"identifier":"doc:\/\/OpenAIKit\/documentation\/OpenAIKit\/EmbeddingsEndpoint","url":"\/documentation\/openaikit\/embeddingsendpoint","title":"EmbeddingsEndpoint","navigatorTitle":[{"text":"EmbeddingsEndpoint","kind":"identifier"}],"role":"symbol","type":"topic","abstract":[{"text":"Provides access to OpenAIâ€™s embeddings API for converting text into numerical vectors.","type":"text"}],"kind":"symbol"},"doc://OpenAIKit/documentation/OpenAIKit/EmbeddingsEndpoint/create(_:)":{"title":"create(_:)","type":"topic","identifier":"doc:\/\/OpenAIKit\/documentation\/OpenAIKit\/EmbeddingsEndpoint\/create(_:)","abstract":[{"text":"Creates embeddings for the given input text(s).","type":"text"}],"kind":"symbol","url":"\/documentation\/openaikit\/embeddingsendpoint\/create(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"create","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:9OpenAIKit16EmbeddingRequestV","text":"EmbeddingRequest","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"EmbeddingResponse","preciseIdentifier":"s:9OpenAIKit17EmbeddingResponseV","kind":"typeIdentifier"}]},"doc://OpenAIKit/s8SendableP":{"identifier":"doc:\/\/OpenAIKit\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"}}}