{"kind":"project","schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/openaikit\/03-working-with-functions"]}],"metadata":{"categoryPathComponent":"OpenAIKit-Tutorials","title":"Working with Functions","role":"project","category":"OpenAIKit"},"hierarchy":{"modules":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Getting-Started","projects":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit","sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Install-OpenAIKit","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Obtain-an-API-Key","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Configure-OpenAIKit","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Set-Environment-Variables","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Check-Your-Understanding","kind":"assessment"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion","sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Create-a-Simple-Chat-Request","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Understanding-Chat-Messages","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Customizing-Model-Parameters","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Building-a-Chat-Interface","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Check-Your-Understanding","kind":"assessment"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors","sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Understanding-OpenAIKit-Errors"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Implementing-Retry-Logic"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#User-Friendly-Error-Messages"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Building-a-Robust-Error-Handler"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Check-Your-Understanding"}]}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Chat-Completions","projects":[{"sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Managing-Conversation-Context","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Implementing-Conversation-Memory","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Creating-Dynamic-Personas","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Advanced-Conversation-Patterns","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Building-a-Complete-Chatbot","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Check-Your-Understanding","kind":"assessment"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations"},{"sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Understanding-Streaming","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Building-a-Streaming-UI","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Handling-Stream-Interruptions","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Advanced-Streaming-Features","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Cross-Platform-Streaming","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Check-Your-Understanding","kind":"assessment"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses"},{"sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Understanding-Function-Calling","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Implementing-the-Weather-Function","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Handling-Function-Calls","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Building-the-Complete-Assistant","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Advanced-Function-Patterns","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Check-Your-Understanding","kind":"assessment"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Multimodal-AI","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images#Understanding-Image-Models"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images"},{"sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Basic-Audio-Transcription"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Advanced-Transcription-Options"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Audio-Translation"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Building-a-Voice-Notes-App"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Handling-Large-Audio-Files"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Check-Your-Understanding"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio"},{"sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Understanding-Embeddings"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Vector-Similarity-Search"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Vector-Database"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Semantic-Search-Engine"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Knowledge-Base-App"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Advanced-Techniques"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Check-Your-Understanding"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Advanced-Research","projects":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis","sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Introduction-to-DeepResearch","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Web-Search-Research","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Code-Interpreter-for-Data-Analysis","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Working-with-MCP-Servers","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Streaming-Research-Responses","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Best-Practices-for-Research-Prompting","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Security-and-Privacy-Considerations","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Check-Your-Understanding","kind":"assessment"}]}]}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials","paths":[["doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials","doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/$volume","doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Chat-Completions"]]},"sections":[{"chapter":"Chat Completions","kind":"hero","estimatedTimeInMinutes":20,"content":[{"type":"paragraph","inlineContent":[{"text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ll build a weather assistant that can fetch real-time weather data when asked."}]}],"title":"Working with Functions"},{"kind":"tasks","tasks":[{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Function calling allows GPT to generate structured outputs that trigger actions in your app.","type":"text"}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Understanding Function Calling","stepsSection":[{"runtimePreview":null,"content":[{"inlineContent":[{"text":"Create a new file for our weather assistant.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","media":null,"code":"functions-01-empty.swift"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a struct to represent weather function arguments."}]}],"caption":[],"type":"step","media":null,"code":"functions-02-args.swift"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a Function definition for getting weather data."}]}],"caption":[],"type":"step","media":null,"code":"functions-03-definition.swift"},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"Add the complete JSON schema for the function parameters.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","media":null,"code":"functions-04-schema.swift"}],"anchor":"Understanding-Function-Calling"},{"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"Now let’s implement the actual weather fetching logic that will be called when the model requests it.","type":"text"}]}]}],"title":"Implementing the Weather Function","stepsSection":[{"type":"step","media":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Create a mock weather service for this tutorial."}],"type":"paragraph"}],"runtimePreview":null,"code":"weather-01-service.swift"},{"type":"step","media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Add weather data models.","type":"text"}]}],"runtimePreview":null,"code":"weather-02-models.swift"},{"type":"step","media":null,"caption":[],"content":[{"inlineContent":[{"text":"Implement the weather fetching function.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"code":"weather-03-fetch.swift"},{"type":"step","media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format the weather data as a string for the model."}]}],"runtimePreview":null,"code":"weather-04-format.swift"}],"anchor":"Implementing-the-Weather-Function"},{"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Learn how to detect when the model wants to call a function and execute it.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}],"title":"Handling Function Calls","stepsSection":[{"type":"step","code":"assistant-01-class.swift","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Create the weather assistant class."}],"type":"paragraph"}],"caption":[]},{"type":"step","code":"assistant-02-process.swift","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Add a method to process user input with function support."}],"type":"paragraph"}],"caption":[]},{"type":"step","code":"assistant-03-request.swift","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Send the request with the weather function tool."}],"type":"paragraph"}],"caption":[]},{"type":"step","code":"assistant-04-check.swift","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Check if the model called a function in its response.","type":"text"}],"type":"paragraph"}],"caption":[]},{"type":"step","code":"assistant-05-execute.swift","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Parse the function arguments and execute the weather function.","type":"text"}],"type":"paragraph"}],"caption":[]},{"type":"step","code":"assistant-06-complete.swift","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Send the function result back to get the final response."}],"type":"paragraph"}],"caption":[]}],"anchor":"Handling-Function-Calls"},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Put it all together in a SwiftUI interface that can answer weather questions."}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Building the Complete Assistant","stepsSection":[{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create a view model for the weather assistant.","type":"text"}]}],"runtimePreview":null,"type":"step","caption":[],"code":"view-01-model.swift"},{"media":null,"content":[{"inlineContent":[{"text":"Build the SwiftUI interface.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","caption":[],"code":"view-02-ui.swift"},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"Add example queries to help users."}],"type":"paragraph"}],"runtimePreview":null,"type":"step","caption":[],"code":"view-03-examples.swift"},{"media":null,"content":[{"inlineContent":[{"text":"Display weather information in a formatted card.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","caption":[],"code":"view-04-card.swift"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add error handling and loading states.","type":"text"}]}],"runtimePreview":null,"type":"step","caption":[],"code":"view-05-complete.swift"}],"anchor":"Building-the-Complete-Assistant"},{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Explore advanced patterns like multiple functions and parallel execution.","type":"text"}]}]}],"title":"Advanced Function Patterns","stepsSection":[{"caption":[],"media":null,"runtimePreview":null,"code":"advanced-01-multiple.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add multiple functions for a more capable assistant."}]}],"type":"step"},{"caption":[],"media":null,"runtimePreview":null,"code":"advanced-02-parallel.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Handle parallel function calls efficiently."}]}],"type":"step"},{"caption":[],"media":null,"runtimePreview":null,"code":"advanced-03-cache.swift","content":[{"inlineContent":[{"text":"Implement function result caching.","type":"text"}],"type":"paragraph"}],"type":"step"},{"caption":[],"media":null,"runtimePreview":null,"code":"advanced-04-validation.swift","content":[{"inlineContent":[{"text":"Add function call validation.","type":"text"}],"type":"paragraph"}],"type":"step"}],"anchor":"Advanced-Function-Patterns"}]},{"kind":"assessments","assessments":[{"title":[{"inlineContent":[{"text":"What happens when the model decides to call a function?","type":"text"}],"type":"paragraph"}],"type":"multiple-choice","content":[],"choices":[{"justification":[{"inlineContent":[{"type":"text","text":"OpenAI never executes functions - it only tells you which function to call."}],"type":"paragraph"}],"content":[{"inlineContent":[{"text":"The function is automatically executed by OpenAI.","type":"text"}],"type":"paragraph"}],"isCorrect":false},{"justification":[{"type":"paragraph","inlineContent":[{"text":"You receive the function details and must execute it yourself, then send the result back.","type":"text"}]}],"content":[{"type":"paragraph","inlineContent":[{"text":"The model returns a tool call with the function name and arguments.","type":"text"}]}],"isCorrect":true},{"justification":[{"inlineContent":[{"text":"You need to execute the function and continue the conversation with the result.","type":"text"}],"type":"paragraph"}],"content":[{"inlineContent":[{"type":"text","text":"The conversation ends and you get the function result."}],"type":"paragraph"}],"isCorrect":false}]},{"title":[{"type":"paragraph","inlineContent":[{"text":"How do you send a function result back to the model?","type":"text"}]}],"type":"multiple-choice","content":[],"choices":[{"justification":[{"type":"paragraph","inlineContent":[{"text":"You should continue the same conversation to maintain context.","type":"text"}]}],"content":[{"type":"paragraph","inlineContent":[{"text":"Create a new conversation with the result.","type":"text"}]}],"isCorrect":false},{"justification":[{"inlineContent":[{"text":"Tool messages with the correct ID link the result to the function call.","type":"text"}],"type":"paragraph"}],"content":[{"inlineContent":[{"text":"Add a message with role ","type":"text"},{"type":"codeVoice","code":".tool"},{"text":" and the matching ","type":"text"},{"type":"codeVoice","code":"toolCallId"},{"text":".","type":"text"}],"type":"paragraph"}],"isCorrect":true},{"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Function results must use the tool role, not the user role."}]}],"content":[{"type":"paragraph","inlineContent":[{"text":"Add a user message with the function result.","type":"text"}]}],"isCorrect":false}]}],"anchor":"Check-Your-Understanding"},{"featuredEyebrow":"Tutorial","kind":"callToAction","action":{"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"overridingTitle":"Get started","type":"reference","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images","isActive":true},"abstract":[{"text":"Master image generation using DALL-E 2, DALL-E 3, and the advanced GPT Image 1 model. Learn to select the right model, handle errors professionally, and build production-ready image generation features.","type":"text"}],"title":"Generating Images with AI"}],"references":{"view-02-ui.swift":{"fileName":"WeatherView.swift","type":"file","syntax":"swift","identifier":"view-02-ui.swift","content":["\/\/ WeatherAssistantView.swift","import SwiftUI","","struct WeatherAssistantView: View {","    @StateObject private var assistant: WeatherAssistant","    @State private var inputText = \"\"","    @FocusState private var isInputFocused: Bool","    ","    init(openAI: OpenAIKit) {","        _assistant = StateObject(wrappedValue: WeatherAssistant(openAI: openAI))","    }","    ","    var body: some View {","        VStack(spacing: 0) {","            \/\/ Header","            HStack {","                Image(systemName: \"cloud.sun.fill\")","                    .font(.title2)","                    .foregroundColor(.blue)","                Text(\"Weather Assistant\")","                    .font(.title2)","                    .fontWeight(.semibold)","            }","            .padding()","            .frame(maxWidth: .infinity)","            .background(Color(.systemBackground))","            .shadow(radius: 1)","            ","            \/\/ Messages","            ScrollView {","                VStack(alignment: .leading, spacing: 12) {","                    ForEach(assistant.messages.filter { $0.role != .system }, id: \\.content) { message in","                        MessageRow(message: message)","                    }","                    ","                    if assistant.isProcessing {","                        HStack {","                            ProgressView()","                            Text(\"Getting weather information...\")","                                .foregroundColor(.secondary)","                        }","                        .padding()","                    }","                }","                .padding()","            }","            ","            \/\/ Input","            HStack {","                TextField(\"Ask about weather...\", text: $inputText)","                    .textFieldStyle(.roundedBorder)","                    .focused($isInputFocused)","                ","                Button(\"Send\") {","                    sendMessage()","                }","                .disabled(inputText.isEmpty || assistant.isProcessing)","            }","            .padding()","        }","    }","    ","    private func sendMessage() {","        let message = inputText.trimmingCharacters(in: .whitespacesAndNewlines)","        guard !message.isEmpty else { return }","        ","        inputText = \"\"","        Task {","            await assistant.sendMessage(message)","        }","    }","}"],"fileType":"swift","highlights":[{"line":7},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71}]},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Multimodal-AI":{"title":"Multimodal AI","abstract":[],"role":"article","kind":"article","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Multimodal-AI","url":"\/tutorials\/openaikit-tutorials\/multimodal-ai"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Building-a-Streaming-UI":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Building-a-Streaming-UI","type":"section","role":"pseudoSymbol","title":"Building a Streaming UI","abstract":[{"text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated.","type":"text"}],"url":"\/tutorials\/openaikit\/06-streaming-responses#Building-a-Streaming-UI","kind":"section"},"assistant-01-class.swift":{"fileType":"swift","fileName":"WeatherAssistant.swift","syntax":"swift","identifier":"assistant-01-class.swift","content":["\/\/ WeatherAssistant.swift","import Foundation","import OpenAIKit","","class WeatherAssistant {","    let openAI: OpenAIKit","    let weatherService = WeatherService.shared","    var messages: [ChatMessage] = []","    ","    init(openAI: OpenAIKit) {","        self.openAI = openAI","        ","        \/\/ Set system prompt","        messages.append(ChatMessage(","            role: .system,","            content: \"You are a helpful weather assistant. When users ask about weather, use the get_weather function to provide accurate information.\"","        ))","    }","}"],"type":"file","highlights":[]},"doc://OpenAIKit/tutorials/OpenAIKit/07-Generating-Images":{"title":"Generating Images with AI","abstract":[{"type":"text","text":"Master image generation using DALL-E 2, DALL-E 3, and the advanced GPT Image 1 model. Learn to select the right model, handle errors professionally, and build production-ready image generation features."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images","url":"\/tutorials\/openaikit\/07-generating-images","estimatedTime":"25min"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Understanding-Embeddings":{"title":"Understanding Embeddings","abstract":[{"text":"Create intelligent search systems using embeddings to find semantically similar content.","type":"text"}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Understanding-Embeddings","url":"\/tutorials\/openaikit\/09-building-semantic-search#Understanding-Embeddings"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Customizing-Model-Parameters":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Customizing-Model-Parameters","role":"pseudoSymbol","title":"Customizing Model Parameters","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Customizing-Model-Parameters","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Getting-Started":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Getting-Started","role":"article","title":"Getting Started","abstract":[],"url":"\/tutorials\/openaikit-tutorials\/getting-started","kind":"article"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Semantic-Search-Engine":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Semantic-Search-Engine","role":"pseudoSymbol","title":"Semantic Search Engine","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"url":"\/tutorials\/openaikit\/09-building-semantic-search#Semantic-Search-Engine","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Implementing-Conversation-Memory":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Implementing-Conversation-Memory","type":"section","role":"pseudoSymbol","title":"Implementing Conversation Memory","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"url":"\/tutorials\/openaikit\/05-building-conversations#Implementing-Conversation-Memory","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Best-Practices-for-Research-Prompting":{"title":"Best Practices for Research Prompting","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Best-Practices-for-Research-Prompting","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Best-Practices-for-Research-Prompting"},"assistant-06-complete.swift":{"fileName":"WeatherAssistant.swift","type":"file","syntax":"swift","content":["\/\/ Complete WeatherAssistant implementation","import Foundation","import OpenAIKit","","class WeatherAssistant: ObservableObject {","    let openAI: OpenAIKit","    let weatherService = WeatherService.shared","    @Published var messages: [ChatMessage] = []","    @Published var isProcessing = false","    @Published var error: Error?","    ","    private let getWeatherFunction = Function(","        name: \"get_weather\",","        description: \"Get the current weather in a given location\",","        parameters: JSONSchema(","            type: .object,","            properties: [","                \"location\": .init(type: .string, description: \"The city and state, e.g. San Francisco, CA\"),","                \"unit\": .init(type: .string, enum: [\"celsius\", \"fahrenheit\"], description: \"Temperature unit\")","            ],","            required: [\"location\"]","        )","    )","    ","    init(openAI: OpenAIKit) {","        self.openAI = openAI","        messages.append(ChatMessage(","            role: .system,","            content: \"You are a helpful weather assistant. When users ask about weather, use the get_weather function to provide accurate, friendly responses with weather information.\"","        ))","    }","    ","    @MainActor","    func sendMessage(_ content: String) async {","        isProcessing = true","        error = nil","        ","        do {","            let response = try await processMessage(content)","            \/\/ Response is automatically added to messages in processMessage","        } catch {","            self.error = error","            messages.append(ChatMessage(","                role: .assistant,","                content: \"I'm sorry, I encountered an error: \\(error.localizedDescription)\"","            ))","        }","        ","        isProcessing = false","    }","    ","    private func processMessage(_ userMessage: String) async throws -> String {","        messages.append(ChatMessage(role: .user, content: userMessage))","        ","        let request = ChatCompletionRequest(","            messages: messages,","            model: \"gpt-4o-mini\",","            tools: [Tool(type: .function, function: getWeatherFunction)],","            toolChoice: \"auto\"","        )","        ","        let response = try await openAI.chat.completions(request)","        ","        guard let choice = response.choices.first else {","            throw WeatherAssistantError.noResponse","        }","        ","        messages.append(choice.message)","        ","        if let toolCalls = choice.message.toolCalls, !toolCalls.isEmpty {","            return try await processFunctionCalls(toolCalls)","        } else {","            return choice.message.content ?? \"\"","        }","    }","    ","    private func processFunctionCalls(_ toolCalls: [ToolCall]) async throws -> String {","        for toolCall in toolCalls {","            if toolCall.function.name == \"get_weather\" {","                let arguments = toolCall.function.arguments","                let decoder = JSONDecoder()","                ","                guard let data = arguments.data(using: .utf8),","                      let args = try? decoder.decode(WeatherArgs.self, from: data) else {","                    throw WeatherAssistantError.invalidFunctionArguments","                }","                ","                let weatherData = try await weatherService.getCurrentWeather(","                    location: args.location,","                    unit: args.unit ?? \"celsius\"","                )","                ","                let resultMessage = ChatMessage(","                    role: .tool,","                    content: weatherData.toJSON(),","                    toolCallId: toolCall.id","                )","                messages.append(resultMessage)","            }","        }","        ","        return try await getFinalResponse()","    }","    ","    private func getFinalResponse() async throws -> String {","        let request = ChatCompletionRequest(","            messages: messages,","            model: \"gpt-4o-mini\"","        )","        ","        let response = try await openAI.chat.completions(request)","        ","        guard let choice = response.choices.first,","              let content = choice.message.content else {","            throw WeatherAssistantError.noResponse","        }","        ","        messages.append(choice.message)","        return content","    }","}","","\/\/ Supporting types","struct WeatherArgs: Codable {","    let location: String","    let unit: String?","}","","enum WeatherAssistantError: LocalizedError {","    case noResponse","    case invalidFunctionArguments","    case functionExecutionFailed","    ","    var errorDescription: String? {","        switch self {","        case .noResponse:","            return \"No response from AI assistant\"","        case .invalidFunctionArguments:","            return \"Invalid function arguments\"","        case .functionExecutionFailed:","            return \"Failed to execute weather function\"","        }","    }","}"],"identifier":"assistant-06-complete.swift","fileType":"swift","highlights":[{"line":1},{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":123},{"line":124},{"line":125},{"line":126},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143}]},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors":{"title":"Handling Errors","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors","url":"\/tutorials\/openaikit\/04-handling-errors","estimatedTime":"12min"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Code-Interpreter-for-Data-Analysis":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Code-Interpreter-for-Data-Analysis","role":"pseudoSymbol","title":"Code Interpreter for Data Analysis","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Code-Interpreter-for-Data-Analysis","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Chat-Completions":{"title":"Chat Completions","abstract":[],"role":"article","kind":"article","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Chat-Completions","url":"\/tutorials\/openaikit-tutorials\/chat-completions"},"weather-01-service.swift":{"fileType":"swift","fileName":"WeatherService.swift","syntax":"swift","identifier":"weather-01-service.swift","content":["\/\/ WeatherService.swift","import Foundation","","class WeatherService {","    static let shared = WeatherService()","    ","    private init() {}","    ","    func getCurrentWeather(location: String, unit: String = \"celsius\") async throws -> WeatherData {","        \/\/ Mock implementation","        return WeatherData(","            location: location,","            temperature: 22,","            unit: unit,","            description: \"Sunny\"","        )","    }","}"],"type":"file","highlights":[]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Building-a-Knowledge-Base-App":{"title":"Building a Knowledge Base App","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Knowledge-Base-App","url":"\/tutorials\/openaikit\/09-building-semantic-search#Building-a-Knowledge-Base-App"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio":{"title":"Transcribing Audio","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio","url":"\/tutorials\/openaikit\/08-transcribing-audio","estimatedTime":"12min"},"assistant-04-check.swift":{"fileName":"WeatherAssistant.swift","type":"file","syntax":"swift","identifier":"assistant-04-check.swift","content":["\/\/ WeatherAssistant.swift - Processing function calls","private func processFunctionCalls(_ toolCalls: [ToolCall]) async throws -> String {","    var functionResults: [ChatMessage] = []","    ","    for toolCall in toolCalls {","        if toolCall.function.name == \"get_weather\" {","            \/\/ Parse arguments","            let arguments = toolCall.function.arguments","            let decoder = JSONDecoder()","            ","            guard let data = arguments.data(using: .utf8),","                  let args = try? decoder.decode(WeatherArgs.self, from: data) else {","                throw WeatherAssistantError.invalidFunctionArguments","            }","            ","            \/\/ Execute function","            let weatherData = try await weatherService.getCurrentWeather(","                location: args.location,","                unit: args.unit ?? \"celsius\"","            )","            ","            \/\/ Add function result as message","            let resultMessage = ChatMessage(","                role: .tool,","                content: weatherData.toJSON(),","                toolCallId: toolCall.id","            )","            functionResults.append(resultMessage)","            messages.append(resultMessage)","        }","    }","    ","    \/\/ Get final response with function results","    return try await getFinalResponse()","}"],"fileType":"swift","highlights":[{"line":1},{"line":2},{"line":3},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":33},{"line":34}]},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Building-a-Complete-Chatbot":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Building-a-Complete-Chatbot","role":"pseudoSymbol","title":"Building a Complete Chatbot","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"url":"\/tutorials\/openaikit\/05-building-conversations#Building-a-Complete-Chatbot","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Obtain-an-API-Key":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Obtain-an-API-Key","type":"section","role":"pseudoSymbol","title":"Obtain an API Key","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Obtain-an-API-Key","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Building-a-Robust-Error-Handler":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Building-a-Robust-Error-Handler","type":"section","role":"pseudoSymbol","title":"Building a Robust Error Handler","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"url":"\/tutorials\/openaikit\/04-handling-errors#Building-a-Robust-Error-Handler","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Handling-Stream-Interruptions":{"title":"Handling Stream Interruptions","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Handling-Stream-Interruptions","url":"\/tutorials\/openaikit\/06-streaming-responses#Handling-Stream-Interruptions"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Security-and-Privacy-Considerations":{"title":"Security and Privacy Considerations","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Security-and-Privacy-Considerations","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Security-and-Privacy-Considerations"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Understanding-Chat-Messages":{"title":"Understanding Chat Messages","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Understanding-Chat-Messages","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Understanding-Chat-Messages"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Advanced-Function-Patterns":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Advanced-Function-Patterns","role":"pseudoSymbol","title":"Advanced Function Patterns","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"url":"\/tutorials\/openaikit\/03-working-with-functions#Advanced-Function-Patterns","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Create-a-Simple-Chat-Request":{"title":"Create a Simple Chat Request","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Create-a-Simple-Chat-Request","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Create-a-Simple-Chat-Request"},"advanced-04-validation.swift":{"fileType":"swift","fileName":"AdvancedAssistant.swift","syntax":"swift","identifier":"advanced-04-validation.swift","content":["\/\/ Function argument validation","import Foundation","","struct FunctionValidator {","    static func validateWeatherArgs(_ args: WeatherArgs) throws {","        \/\/ Validate location","        guard !args.location.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {","            throw ValidationError.emptyLocation","        }","        ","        \/\/ Validate unit if provided","        if let unit = args.unit {","            guard [\"celsius\", \"fahrenheit\"].contains(unit.lowercased()) else {","                throw ValidationError.invalidUnit(unit)","            }","        }","        ","        \/\/ Check for common issues","        let location = args.location.lowercased()","        if location.count < 2 {","            throw ValidationError.locationTooShort","        }","        ","        \/\/ Check for valid characters","        let allowedCharacters = CharacterSet.letters","            .union(.whitespaces)","            .union(.punctuationCharacters)","        ","        guard location.rangeOfCharacter(from: allowedCharacters.inverted) == nil else {","            throw ValidationError.invalidCharacters","        }","    }","    ","    static func validateForecastArgs(_ args: ForecastArgs) throws {","        \/\/ Validate location first","        try validateWeatherArgs(WeatherArgs(location: args.location, unit: args.unit))","        ","        \/\/ Validate days","        guard (1...7).contains(args.days) else {","            throw ValidationError.invalidDayCount(args.days)","        }","    }","}","","enum ValidationError: LocalizedError {","    case emptyLocation","    case locationTooShort","    case invalidCharacters","    case invalidUnit(String)","    case invalidDayCount(Int)","    ","    var errorDescription: String? {","        switch self {","        case .emptyLocation:","            return \"Location cannot be empty\"","        case .locationTooShort:","            return \"Location name is too short\"","        case .invalidCharacters:","            return \"Location contains invalid characters\"","        case .invalidUnit(let unit):","            return \"Invalid unit '\\(unit)'. Use 'celsius' or 'fahrenheit'\"","        case .invalidDayCount(let days):","            return \"Invalid day count \\(days). Must be between 1 and 7\"","        }","    }","}","","\/\/ Use in function execution","func executeWeatherFunction(_ args: WeatherArgs) async throws -> WeatherData {","    \/\/ Validate first","    try FunctionValidator.validateWeatherArgs(args)","    ","    \/\/ Then execute","    return try await weatherService.getCurrentWeather(","        location: args.location,","        unit: args.unit ?? \"celsius\"","    )","}"],"type":"file","highlights":[{"line":1},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":24},{"line":25},{"line":26},{"line":27},{"line":29},{"line":30},{"line":31},{"line":34},{"line":35},{"line":36},{"line":38},{"line":39},{"line":40},{"line":41},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77}]},"weather-02-models.swift":{"fileName":"WeatherService.swift","type":"file","syntax":"swift","identifier":"weather-02-models.swift","content":["\/\/ WeatherService.swift","import Foundation","","struct WeatherData: Codable {","    let location: String","    let temperature: Double","    let unit: String","    let description: String","    let humidity: Int?","    let windSpeed: Double?","    ","    var formattedTemperature: String {","        let symbol = unit == \"celsius\" ? \"°C\" : \"°F\"","        return \"\\(Int(temperature))\\(symbol)\"","    }","}","","class WeatherService {","    static let shared = WeatherService()","    ","    private init() {}","    ","    func getCurrentWeather(location: String, unit: String = \"celsius\") async throws -> WeatherData {","        \/\/ Simulate API delay","        try await Task.sleep(nanoseconds: 500_000_000)","        ","        \/\/ Mock weather data","        let temp = Double.random(in: 15...30)","        let fahrenheit = unit == \"fahrenheit\" ? (temp * 9\/5) + 32 : temp","        ","        return WeatherData(","            location: location,","            temperature: unit == \"celsius\" ? temp : fahrenheit,","            unit: unit,","            description: [\"Sunny\", \"Partly Cloudy\", \"Cloudy\", \"Rainy\"].randomElement()!,","            humidity: Int.random(in: 40...80),","            windSpeed: Double.random(in: 5...25)","        )","    }","}"],"fileType":"swift","highlights":[{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":33},{"line":35},{"line":36},{"line":37}]},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Install-OpenAIKit":{"title":"Install OpenAIKit","abstract":[{"text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API.","type":"text"}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Install-OpenAIKit","url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Install-OpenAIKit"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Configure-OpenAIKit":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Configure-OpenAIKit","role":"pseudoSymbol","title":"Configure OpenAIKit","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Configure-OpenAIKit","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Building-a-Vector-Database":{"title":"Building a Vector Database","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Vector-Database","url":"\/tutorials\/openaikit\/09-building-semantic-search#Building-a-Vector-Database"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Cross-Platform-Streaming":{"title":"Cross-Platform Streaming","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Cross-Platform-Streaming","url":"\/tutorials\/openaikit\/06-streaming-responses#Cross-Platform-Streaming"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Web-Search-Research":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Web-Search-Research","role":"pseudoSymbol","title":"Web Search Research","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Web-Search-Research","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Advanced-Streaming-Features":{"title":"Advanced Streaming Features","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Advanced-Streaming-Features","url":"\/tutorials\/openaikit\/06-streaming-responses#Advanced-Streaming-Features"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials":{"title":"Welcome to OpenAIKit","abstract":[{"type":"text","text":"Learn how to integrate OpenAI’s powerful AI models into your Swift applications with OpenAIKit."}],"role":"overview","kind":"overview","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials","url":"\/tutorials\/openaikit-tutorials"},"assistant-05-execute.swift":{"fileType":"swift","fileName":"WeatherAssistant.swift","syntax":"swift","identifier":"assistant-05-execute.swift","content":["\/\/ WeatherAssistant.swift - Complete execution flow","private func getFinalResponse() async throws -> String {","    \/\/ Create new request with function results","    let request = ChatCompletionRequest(","        messages: messages,","        model: \"gpt-4o-mini\"","    )","    ","    let response = try await openAI.chat.completions(request)","    ","    guard let choice = response.choices.first,","          let content = choice.message.content else {","        throw WeatherAssistantError.noResponse","    }","    ","    \/\/ Store final response","    messages.append(choice.message)","    ","    return content","}","","\/\/ Public method to get conversation history","func getConversationHistory() -> [ChatMessage] {","    messages","}","","\/\/ Clear conversation","func clearConversation() {","    messages = [messages.first!]  \/\/ Keep system prompt","}"],"type":"file","highlights":[{"line":1},{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":16},{"line":17},{"line":18},{"line":19},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}]},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions","type":"topic","role":"project","title":"Working with Functions","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"estimatedTime":"20min","url":"\/tutorials\/openaikit\/03-working-with-functions","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Check-Your-Understanding":{"type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Check-Your-Understanding","title":"Check Your Understanding","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"url":"\/tutorials\/openaikit\/03-working-with-functions#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#User-Friendly-Error-Messages":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#User-Friendly-Error-Messages","type":"section","role":"pseudoSymbol","title":"User-Friendly Error Messages","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"url":"\/tutorials\/openaikit\/04-handling-errors#User-Friendly-Error-Messages","kind":"section"},"advanced-03-cache.swift":{"fileName":"AdvancedAssistant.swift","type":"file","syntax":"swift","identifier":"advanced-03-cache.swift","content":["\/\/ Function result caching","import Foundation","","class CachedWeatherService {","    private let cache = NSCache<NSString, CacheEntry>()","    private let cacheLifetime: TimeInterval = 300 \/\/ 5 minutes","    ","    func getCurrentWeather(location: String, unit: String) async throws -> WeatherData {","        let cacheKey = \"weather_\\(location)_\\(unit)\" as NSString","        ","        \/\/ Check cache","        if let cached = cache.object(forKey: cacheKey),","           cached.isValid {","            return cached.data as! WeatherData","        }","        ","        \/\/ Fetch fresh data","        let weatherData = try await fetchWeather(location: location, unit: unit)","        ","        \/\/ Cache result","        let entry = CacheEntry(data: weatherData, timestamp: Date())","        cache.setObject(entry, forKey: cacheKey)","        ","        return weatherData","    }","    ","    private func fetchWeather(location: String, unit: String) async throws -> WeatherData {","        \/\/ Actual API call here","        try await Task.sleep(nanoseconds: 1_000_000_000) \/\/ Simulate API","        ","        return WeatherData(","            location: location,","            temperature: 22,","            unit: unit,","            description: \"Partly cloudy\",","            humidity: 65,","            windSpeed: 12","        )","    }","}","","class CacheEntry: NSObject {","    let data: Any","    let timestamp: Date","    ","    init(data: Any, timestamp: Date) {","        self.data = data","        self.timestamp = timestamp","    }","    ","    var isValid: Bool {","        Date().timeIntervalSince(timestamp) < 300 \/\/ 5 minutes","    }","}"],"fileType":"swift","highlights":[{"line":1},{"line":2},{"line":4},{"line":5},{"line":6},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53}]},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations":{"title":"Building Conversations","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations","url":"\/tutorials\/openaikit\/05-building-conversations","estimatedTime":"18min"},"view-04-card.swift":{"fileType":"swift","fileName":"WeatherView.swift","syntax":"swift","identifier":"view-04-card.swift","content":["\/\/ WeatherCardView.swift","import SwiftUI","","struct WeatherCardView: View {","    let weatherData: WeatherData","    ","    var body: some View {","        VStack(alignment: .leading, spacing: 12) {","            \/\/ Location","            HStack {","                Image(systemName: \"location.fill\")","                    .foregroundColor(.blue)","                Text(weatherData.location)","                    .font(.headline)","            }","            ","            \/\/ Temperature","            HStack(alignment: .top, spacing: 20) {","                VStack(alignment: .leading) {","                    Text(weatherData.formattedTemperature)","                        .font(.system(size: 48, weight: .light))","                    Text(weatherData.description)","                        .font(.subheadline)","                        .foregroundColor(.secondary)","                }","                ","                Spacer()","                ","                Image(systemName: weatherIcon)","                    .font(.system(size: 60))","                    .foregroundColor(.blue)","            }","            ","            \/\/ Additional info","            HStack(spacing: 30) {","                if let humidity = weatherData.humidity {","                    Label(\"\\(humidity)%\", systemImage: \"humidity.fill\")","                }","                ","                if let windSpeed = weatherData.windSpeed {","                    let windUnit = weatherData.unit == \"celsius\" ? \"km\/h\" : \"mph\"","                    Label(\"\\(Int(windSpeed)) \\(windUnit)\", systemImage: \"wind\")","                }","            }","            .font(.footnote)","            .foregroundColor(.secondary)","        }","        .padding()","        .background(Color(.secondarySystemBackground))","        .cornerRadius(12)","    }","    ","    private var weatherIcon: String {","        switch weatherData.description.lowercased() {","        case let desc where desc.contains(\"sun\") || desc.contains(\"clear\"):","            return \"sun.max.fill\"","        case let desc where desc.contains(\"cloud\"):","            return \"cloud.fill\"","        case let desc where desc.contains(\"rain\"):","            return \"cloud.rain.fill\"","        case let desc where desc.contains(\"snow\"):","            return \"cloud.snow.fill\"","        default:","            return \"cloud.sun.fill\"","        }","    }","}"],"type":"file","highlights":[{"line":1},{"line":2},{"line":3},{"line":4},{"line":5},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":48},{"line":49},{"line":50},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64}]},"functions-02-args.swift":{"fileName":"WeatherAssistant.swift","type":"file","syntax":"swift","content":["\/\/ FunctionCalling.swift","import Foundation","import OpenAIKit","","\/\/ Define function arguments structure","struct WeatherArgs: Codable {","    let location: String","    let unit: String?","}"],"identifier":"functions-02-args.swift","fileType":"swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9}]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis","role":"project","title":"Deep Research and Analysis","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"estimatedTime":"25min","url":"\/tutorials\/openaikit\/09-deep-research-analysis","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses","type":"topic","role":"project","title":"Streaming Responses","abstract":[{"text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated.","type":"text"}],"estimatedTime":"15min","url":"\/tutorials\/openaikit\/06-streaming-responses","kind":"project"},"view-03-examples.swift":{"fileType":"swift","fileName":"WeatherView.swift","syntax":"swift","identifier":"view-03-examples.swift","content":["\/\/ WeatherAssistantView.swift - With example queries","struct WeatherAssistantView: View {","    @StateObject private var assistant: WeatherAssistant","    @State private var inputText = \"\"","    @FocusState private var isInputFocused: Bool","    ","    let exampleQueries = [","        \"What's the weather in San Francisco?\",","        \"Is it raining in London?\",","        \"Temperature in Tokyo in Fahrenheit\",","        \"How's the weather in Paris today?\"","    ]","    ","    var body: some View {","        VStack(spacing: 0) {","            \/\/ Header","            headerView","            ","            \/\/ Messages or examples","            if assistant.messages.count <= 1 {  \/\/ Only system message","                examplesView","            } else {","                messagesView","            }","            ","            \/\/ Input","            inputView","        }","    }","    ","    private var examplesView: some View {","        VStack(spacing: 20) {","            Text(\"Try asking:\")","                .font(.headline)","                .foregroundColor(.secondary)","            ","            VStack(spacing: 12) {","                ForEach(exampleQueries, id: \\.self) { query in","                    Button(action: {","                        inputText = query","                        sendMessage()","                    }) {","                        Text(query)","                            .frame(maxWidth: .infinity)","                            .padding()","                            .background(Color(.secondarySystemBackground))","                            .cornerRadius(10)","                    }","                    .buttonStyle(.plain)","                }","            }","            .padding(.horizontal)","        }","        .frame(maxHeight: .infinity)","    }","}"],"type":"file","highlights":[{"line":1},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":17},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":27},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":54}]},"view-01-model.swift":{"fileName":"WeatherView.swift","type":"file","syntax":"swift","content":["\/\/ WeatherAssistantView.swift","import SwiftUI","","struct WeatherAssistantView: View {","    @StateObject private var assistant: WeatherAssistant","    @State private var inputText = \"\"","    ","    init(openAI: OpenAIKit) {","        _assistant = StateObject(wrappedValue: WeatherAssistant(openAI: openAI))","    }","    ","    var body: some View {","        VStack {","            Text(\"Weather Assistant\")","                .font(.title)","        }","    }","}"],"identifier":"view-01-model.swift","fileType":"swift","highlights":[]},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Advanced-Conversation-Patterns":{"title":"Advanced Conversation Patterns","abstract":[{"text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions.","type":"text"}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Advanced-Conversation-Patterns","url":"\/tutorials\/openaikit\/05-building-conversations#Advanced-Conversation-Patterns"},"view-05-complete.swift":{"fileType":"swift","fileName":"WeatherView.swift","syntax":"swift","identifier":"view-05-complete.swift","content":["\/\/ Complete Weather Assistant UI","import SwiftUI","import OpenAIKit","","struct WeatherAssistantView: View {","    @StateObject private var assistant: WeatherAssistant","    @State private var inputText = \"\"","    @FocusState private var isInputFocused: Bool","    ","    let exampleQueries = [","        \"What's the weather in San Francisco?\",","        \"Is it raining in London?\",","        \"Temperature in Tokyo in Fahrenheit\",","        \"How's the weather in Paris today?\"","    ]","    ","    init(openAI: OpenAIKit) {","        _assistant = StateObject(wrappedValue: WeatherAssistant(openAI: openAI))","    }","    ","    var body: some View {","        VStack(spacing: 0) {","            headerView","            ","            if assistant.messages.count <= 1 {","                examplesView","            } else {","                messagesView","            }","            ","            if let error = assistant.error {","                errorView(error)","            }","            ","            inputView","        }","        .onAppear {","            isInputFocused = true","        }","    }","    ","    private var headerView: some View {","        HStack {","            Image(systemName: \"cloud.sun.fill\")","                .font(.title2)","                .foregroundColor(.blue)","            Text(\"Weather Assistant\")","                .font(.title2)","                .fontWeight(.semibold)","            Spacer()","            if assistant.messages.count > 1 {","                Button(\"Clear\") {","                    assistant.clearConversation()","                }","            }","        }","        .padding()","        .background(Color(.systemBackground))","        .shadow(radius: 1)","    }","    ","    private var messagesView: some View {","        ScrollViewReader { proxy in","            ScrollView {","                VStack(alignment: .leading, spacing: 16) {","                    ForEach(Array(assistant.messages.enumerated()), id: \\.offset) { index, message in","                        if message.role != .system {","                            MessageRow(message: message)","                                .id(index)","                        }","                    }","                    ","                    if assistant.isProcessing {","                        HStack {","                            ProgressView()","                                .scaleEffect(0.8)","                            Text(\"Getting weather information...\")","                                .font(.subheadline)","                                .foregroundColor(.secondary)","                        }","                        .padding()","                        .id(\"loading\")","                    }","                }","                .padding()","                .onChange(of: assistant.messages.count) { _ in","                    withAnimation {","                        proxy.scrollTo(assistant.isProcessing ? \"loading\" : assistant.messages.count - 1)","                    }","                }","            }","        }","    }","    ","    private var examplesView: some View {","        VStack(spacing: 20) {","            Image(systemName: \"cloud.sun.rain.fill\")","                .font(.system(size: 80))","                .foregroundColor(.blue)","                .padding()","            ","            Text(\"Ask me about the weather!\")","                .font(.title2)","                .fontWeight(.semibold)","            ","            Text(\"Try one of these:\")","                .font(.subheadline)","                .foregroundColor(.secondary)","            ","            VStack(spacing: 12) {","                ForEach(exampleQueries, id: \\.self) { query in","                    Button(action: {","                        inputText = query","                        sendMessage()","                    }) {","                        HStack {","                            Image(systemName: \"text.bubble\")","                                .foregroundColor(.blue)","                            Text(query)","                                .foregroundColor(.primary)","                            Spacer()","                        }","                        .padding()","                        .background(Color(.secondarySystemBackground))","                        .cornerRadius(10)","                    }","                    .buttonStyle(.plain)","                }","            }","            .padding(.horizontal)","            ","            Spacer()","        }","        .padding(.top, 40)","    }","    ","    private var inputView: some View {","        HStack(spacing: 12) {","            TextField(\"Ask about weather...\", text: $inputText)","                .textFieldStyle(.roundedBorder)","                .focused($isInputFocused)","                .onSubmit {","                    sendMessage()","                }","            ","            Button(action: sendMessage) {","                Image(systemName: \"paperplane.fill\")","                    .foregroundColor(sendButtonColor)","            }","            .disabled(inputText.isEmpty || assistant.isProcessing)","        }","        .padding()","        .background(Color(.secondarySystemBackground))","    }","    ","    private func errorView(_ error: Error) -> some View {","        Text(\"Error: \\(error.localizedDescription)\")","            .font(.caption)","            .foregroundColor(.red)","            .padding(.horizontal)","    }","    ","    private var sendButtonColor: Color {","        inputText.isEmpty || assistant.isProcessing ? .gray : .blue","    }","    ","    private func sendMessage() {","        let message = inputText.trimmingCharacters(in: .whitespacesAndNewlines)","        guard !message.isEmpty else { return }","        ","        inputText = \"\"","        Task {","            await assistant.sendMessage(message)","        }","    }","}","","\/\/ Message Row View","struct MessageRow: View {","    let message: ChatMessage","    ","    var body: some View {","        HStack(alignment: .top, spacing: 12) {","            \/\/ Avatar","            Image(systemName: avatarIcon)","                .font(.title3)","                .foregroundColor(avatarColor)","                .frame(width: 30, height: 30)","                .background(Circle().fill(avatarColor.opacity(0.1)))","            ","            \/\/ Message content","            VStack(alignment: .leading, spacing: 4) {","                Text(roleTitle)","                    .font(.caption)","                    .fontWeight(.medium)","                    .foregroundColor(.secondary)","                ","                if message.role == .tool {","                    \/\/ Show weather card for function results","                    if let data = message.content.data(using: .utf8),","                       let weatherData = try? JSONDecoder().decode(WeatherData.self, from: data) {","                        WeatherCardView(weatherData: weatherData)","                    } else {","                        Text(message.content)","                            .font(.subheadline)","                    }","                } else {","                    Text(message.content)","                        .font(.subheadline)","                        .textSelection(.enabled)","                }","            }","            ","            Spacer()","        }","    }","    ","    private var avatarIcon: String {","        switch message.role {","        case .user:","            return \"person.circle.fill\"","        case .assistant:","            return \"cloud.sun.fill\"","        case .tool:","            return \"function\"","        default:","            return \"circle.fill\"","        }","    }","    ","    private var avatarColor: Color {","        switch message.role {","        case .user:","            return .blue","        case .assistant:","            return .green","        case .tool:","            return .orange","        default:","            return .gray","        }","    }","    ","    private var roleTitle: String {","        switch message.role {","        case .user:","            return \"You\"","        case .assistant:","            return \"Weather Assistant\"","        case .tool:","            return \"Weather Data\"","        default:","            return \"System\"","        }","    }","}"],"type":"file","highlights":[{"line":1},{"line":3},{"line":5},{"line":6},{"line":7},{"line":8},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":145},{"line":146},{"line":147},{"line":148},{"line":150},{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162},{"line":163},{"line":164},{"line":165},{"line":166},{"line":167},{"line":168},{"line":169},{"line":170},{"line":171},{"line":172},{"line":173},{"line":174},{"line":175},{"line":176},{"line":177},{"line":178},{"line":179},{"line":180},{"line":181},{"line":182},{"line":183},{"line":184},{"line":185},{"line":186},{"line":187},{"line":188},{"line":189},{"line":190},{"line":191},{"line":192},{"line":193},{"line":194},{"line":195},{"line":196},{"line":197},{"line":198},{"line":199},{"line":200},{"line":201},{"line":202},{"line":203},{"line":204},{"line":205},{"line":206},{"line":207},{"line":208},{"line":209},{"line":210},{"line":211},{"line":212},{"line":213},{"line":214},{"line":215},{"line":216},{"line":217},{"line":218},{"line":219},{"line":220},{"line":221},{"line":222},{"line":224},{"line":225},{"line":226},{"line":227},{"line":230},{"line":231},{"line":232},{"line":233},{"line":234},{"line":235},{"line":236},{"line":237},{"line":238},{"line":239},{"line":240},{"line":241},{"line":242},{"line":243},{"line":244},{"line":245},{"line":246},{"line":247},{"line":248},{"line":249},{"line":250},{"line":251},{"line":252},{"line":253},{"line":254},{"line":255}]},"functions-01-empty.swift":{"fileName":"WeatherAssistant.swift","type":"file","syntax":"swift","content":["\/\/ FunctionCalling.swift"],"identifier":"functions-01-empty.swift","fileType":"swift","highlights":[]},"doc://OpenAIKit/tutorials/OpenAIKit/07-Generating-Images#Understanding-Image-Models":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images#Understanding-Image-Models","role":"pseudoSymbol","title":"Understanding Image Models","abstract":[{"type":"text","text":"Master image generation using DALL-E 2, DALL-E 3, and the advanced GPT Image 1 model. Learn to select the right model, handle errors professionally, and build production-ready image generation features."}],"url":"\/tutorials\/openaikit\/07-generating-images#Understanding-Image-Models","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Check-Your-Understanding":{"url":"\/tutorials\/openaikit\/08-transcribing-audio#Check-Your-Understanding","type":"link","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Check-Your-Understanding","title":"Check Your Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit","role":"project","title":"Setting Up OpenAIKit","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"estimatedTime":"10min","url":"\/tutorials\/openaikit\/01-setting-up-openaikit","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Streaming-Research-Responses":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Streaming-Research-Responses","role":"pseudoSymbol","title":"Streaming Research Responses","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Streaming-Research-Responses","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Building-a-Voice-Notes-App":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Building-a-Voice-Notes-App","role":"pseudoSymbol","title":"Building a Voice Notes App","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"url":"\/tutorials\/openaikit\/08-transcribing-audio#Building-a-Voice-Notes-App","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Understanding-Streaming":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Understanding-Streaming","type":"section","role":"pseudoSymbol","title":"Understanding Streaming","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"url":"\/tutorials\/openaikit\/06-streaming-responses#Understanding-Streaming","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Handling-Function-Calls":{"title":"Handling Function Calls","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Handling-Function-Calls","url":"\/tutorials\/openaikit\/03-working-with-functions#Handling-Function-Calls"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Basic-Audio-Transcription":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Basic-Audio-Transcription","role":"pseudoSymbol","title":"Basic Audio Transcription","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"url":"\/tutorials\/openaikit\/08-transcribing-audio#Basic-Audio-Transcription","kind":"section"},"assistant-03-request.swift":{"fileType":"swift","fileName":"WeatherAssistant.swift","syntax":"swift","identifier":"assistant-03-request.swift","content":["\/\/ WeatherAssistant.swift - Making the request","func processMessage(_ userMessage: String) async throws -> String {","    messages.append(ChatMessage(role: .user, content: userMessage))","    ","    let request = ChatCompletionRequest(","        messages: messages,","        model: Models.Chat.gpt4oMini,","        tools: [","            Tool(type: .function, function: getWeatherFunction)","        ],","        toolChoice: \"auto\"  \/\/ Let the model decide when to use the function","    )","    ","    let response = try await openAI.chat.completions(request)","    ","    guard let choice = response.choices.first else {","        throw WeatherAssistantError.noResponse","    }","    ","    \/\/ Store assistant's response","    messages.append(choice.message)","    ","    \/\/ Check if function was called","    if let toolCalls = choice.message.toolCalls,","       !toolCalls.isEmpty {","        \/\/ Process function calls","        return try await processFunctionCalls(toolCalls)","    } else {","        \/\/ Return regular response","        return choice.message.content ?? \"\"","    }","}","","enum WeatherAssistantError: Error {","    case noResponse","    case invalidFunctionArguments","    case functionExecutionFailed","}"],"type":"file","highlights":[{"line":1},{"line":2},{"line":3},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38}]},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Audio-Translation":{"title":"Audio Translation","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Audio-Translation","url":"\/tutorials\/openaikit\/08-transcribing-audio#Audio-Translation"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion","role":"project","title":"Your First Chat Completion","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"estimatedTime":"15min","url":"\/tutorials\/openaikit\/02-your-first-chat-completion","kind":"project"},"advanced-01-multiple.swift":{"fileName":"AdvancedAssistant.swift","type":"file","syntax":"swift","identifier":"advanced-01-multiple.swift","content":["\/\/ Multiple function support","import OpenAIKit","","\/\/ Define multiple functions","let functions = [","    Function(","        name: \"get_weather\",","        description: \"Get the current weather in a given location\",","        parameters: JSONSchema(","            type: .object,","            properties: [","                \"location\": .init(type: .string, description: \"The city and state\"),","                \"unit\": .init(type: .string, enum: [\"celsius\", \"fahrenheit\"])","            ],","            required: [\"location\"]","        )","    ),","    ","    Function(","        name: \"get_forecast\",","        description: \"Get weather forecast for the next few days\",","        parameters: JSONSchema(","            type: .object,","            properties: [","                \"location\": .init(type: .string, description: \"The city and state\"),","                \"days\": .init(type: .integer, description: \"Number of days (1-7)\"),","                \"unit\": .init(type: .string, enum: [\"celsius\", \"fahrenheit\"])","            ],","            required: [\"location\", \"days\"]","        )","    ),","    ","    Function(","        name: \"get_air_quality\",","        description: \"Get air quality index for a location\",","        parameters: JSONSchema(","            type: .object,","            properties: [","                \"location\": .init(type: .string, description: \"The city and state\")","            ],","            required: [\"location\"]","        )","    )","]","","\/\/ Use in request","let request = ChatCompletionRequest(","    messages: messages,","    model: \"gpt-4o-mini\",","    tools: functions.map { Tool(type: .function, function: $0) },","    toolChoice: \"auto\"",")"],"fileType":"swift","highlights":[]},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Check-Your-Understanding":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Check-Your-Understanding","title":"Check Your Understanding","url":"\/tutorials\/openaikit\/05-building-conversations#Check-Your-Understanding","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"type":"link"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Check-Your-Understanding":{"url":"\/tutorials\/openaikit\/06-streaming-responses#Check-Your-Understanding","title":"Check Your Understanding","type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}]},"functions-04-schema.swift":{"fileType":"swift","fileName":"WeatherAssistant.swift","syntax":"swift","identifier":"functions-04-schema.swift","content":["\/\/ FunctionCalling.swift","import Foundation","import OpenAIKit","","\/\/ Define function arguments structure","struct WeatherArgs: Codable {","    let location: String","    let unit: String?","}","","\/\/ Create function definition with parameter schema","let getWeatherFunction = Function(","    name: \"get_weather\",","    description: \"Get the current weather in a given location\",","    parameters: JSONSchema(","        type: .object,","        properties: [","            \"location\": .init(type: .string, description: \"The city and state, e.g. San Francisco, CA\"),","            \"unit\": .init(type: .string, enum: [\"celsius\", \"fahrenheit\"], description: \"Temperature unit\")","        ],","        required: [\"location\"]","    )",")"],"type":"file","highlights":[{"line":11},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22}]},"weather-03-fetch.swift":{"fileName":"WeatherService.swift","type":"file","syntax":"swift","identifier":"weather-03-fetch.swift","content":["\/\/ WeatherService.swift with real API integration","import Foundation","","class WeatherService {","    static let shared = WeatherService()","    private let apiKey = ProcessInfo.processInfo.environment[\"WEATHER_API_KEY\"] ?? \"\"","    private let baseURL = \"https:\/\/api.openweathermap.org\/data\/2.5\/weather\"","    ","    func getCurrentWeather(location: String, unit: String = \"celsius\") async throws -> WeatherData {","        guard !apiKey.isEmpty else {","            \/\/ Return mock data if no API key","            return mockWeather(for: location, unit: unit)","        }","        ","        var components = URLComponents(string: baseURL)!","        components.queryItems = [","            URLQueryItem(name: \"q\", value: location),","            URLQueryItem(name: \"appid\", value: apiKey),","            URLQueryItem(name: \"units\", value: unit == \"celsius\" ? \"metric\" : \"imperial\")","        ]","        ","        let (data, _) = try await URLSession.shared.data(from: components.url!)","        let response = try JSONDecoder().decode(WeatherAPIResponse.self, from: data)","        ","        return WeatherData(","            location: location,","            temperature: response.main.temp,","            unit: unit,","            description: response.weather.first?.description ?? \"Unknown\",","            humidity: response.main.humidity,","            windSpeed: response.wind.speed","        )","    }","    ","    private func mockWeather(for location: String, unit: String) -> WeatherData {","        WeatherData(","            location: location,","            temperature: 22,","            unit: unit,","            description: \"Partly cloudy\",","            humidity: 65,","            windSpeed: 12","        )","    }","}","","\/\/ API Response Models","struct WeatherAPIResponse: Codable {","    let main: MainWeather","    let weather: [Weather]","    let wind: Wind","}","","struct MainWeather: Codable {","    let temp: Double","    let humidity: Int","}","","struct Weather: Codable {","    let description: String","}","","struct Wind: Codable {","    let speed: Double","}"],"fileType":"swift","highlights":[{"line":1},{"line":6},{"line":7},{"line":10},{"line":11},{"line":12},{"line":13},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":22},{"line":23},{"line":24},{"line":27},{"line":29},{"line":30},{"line":31},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65}]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Introduction-to-DeepResearch":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Introduction-to-DeepResearch","role":"pseudoSymbol","title":"Introduction to DeepResearch","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Introduction-to-DeepResearch","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Understanding-OpenAIKit-Errors":{"title":"Understanding OpenAIKit Errors","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Understanding-OpenAIKit-Errors","url":"\/tutorials\/openaikit\/04-handling-errors#Understanding-OpenAIKit-Errors"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Advanced-Research":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Advanced-Research","role":"article","title":"Advanced Research","abstract":[],"url":"\/tutorials\/openaikit-tutorials\/advanced-research","kind":"article"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Creating-Dynamic-Personas":{"title":"Creating Dynamic Personas","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Creating-Dynamic-Personas","url":"\/tutorials\/openaikit\/05-building-conversations#Creating-Dynamic-Personas"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Working-with-MCP-Servers":{"title":"Working with MCP Servers","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Working-with-MCP-Servers","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Working-with-MCP-Servers"},"functions-03-definition.swift":{"fileType":"swift","fileName":"WeatherAssistant.swift","syntax":"swift","identifier":"functions-03-definition.swift","content":["\/\/ FunctionCalling.swift","import Foundation","import OpenAIKit","","\/\/ Define function arguments structure","struct WeatherArgs: Codable {","    let location: String","    let unit: String?","}","","\/\/ Create function definition","let getWeatherFunction = Function(","    name: \"get_weather\",","    description: \"Get the current weather in a given location\"",")"],"type":"file","highlights":[{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15}]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Check-Your-Understanding":{"type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Check-Your-Understanding","title":"Check Your Understanding","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Set-Environment-Variables":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Set-Environment-Variables","type":"section","role":"pseudoSymbol","title":"Set Environment Variables","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Set-Environment-Variables","kind":"section"},"weather-04-format.swift":{"fileName":"WeatherService.swift","type":"file","syntax":"swift","content":["\/\/ WeatherFormatter.swift","import Foundation","","extension WeatherData {","    func formatForDisplay() -> String {","        var result = \"Weather in \\(location):\\n\"","        result += \"🌡️ Temperature: \\(formattedTemperature)\\n\"","        result += \"☁️ Conditions: \\(description)\\n\"","        ","        if let humidity = humidity {","            result += \"💧 Humidity: \\(humidity)%\\n\"","        }","        ","        if let windSpeed = windSpeed {","            let windUnit = unit == \"celsius\" ? \"km\/h\" : \"mph\"","            result += \"💨 Wind: \\(Int(windSpeed)) \\(windUnit)\"","        }","        ","        return result","    }","    ","    func toJSON() -> String {","        let encoder = JSONEncoder()","        encoder.outputFormatting = .prettyPrinted","        ","        guard let data = try? encoder.encode(self),","              let json = String(data: data, encoding: .utf8) else {","            return \"{}\"","        }","        ","        return json","    }","}"],"identifier":"weather-04-format.swift","fileType":"swift","highlights":[{"line":1},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":14},{"line":15},{"line":16},{"line":17},{"line":19},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31}]},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Implementing-the-Weather-Function":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Implementing-the-Weather-Function","role":"pseudoSymbol","title":"Implementing the Weather Function","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"url":"\/tutorials\/openaikit\/03-working-with-functions#Implementing-the-Weather-Function","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Managing-Conversation-Context":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Managing-Conversation-Context","role":"pseudoSymbol","title":"Managing Conversation Context","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"url":"\/tutorials\/openaikit\/05-building-conversations#Managing-Conversation-Context","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Vector-Similarity-Search":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Vector-Similarity-Search","role":"pseudoSymbol","title":"Vector Similarity Search","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"url":"\/tutorials\/openaikit\/09-building-semantic-search#Vector-Similarity-Search","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Advanced-Techniques":{"title":"Advanced Techniques","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Advanced-Techniques","url":"\/tutorials\/openaikit\/09-building-semantic-search#Advanced-Techniques"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Building-the-Complete-Assistant":{"title":"Building the Complete Assistant","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Building-the-Complete-Assistant","url":"\/tutorials\/openaikit\/03-working-with-functions#Building-the-Complete-Assistant"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Understanding-Function-Calling":{"title":"Understanding Function Calling","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Understanding-Function-Calling","url":"\/tutorials\/openaikit\/03-working-with-functions#Understanding-Function-Calling"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Advanced-Transcription-Options":{"title":"Advanced Transcription Options","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Advanced-Transcription-Options","url":"\/tutorials\/openaikit\/08-transcribing-audio#Advanced-Transcription-Options"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Check-Your-Understanding":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Check-Your-Understanding","type":"link","title":"Check Your Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Check-Your-Understanding":{"title":"Check Your Understanding","url":"\/tutorials\/openaikit\/09-building-semantic-search#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search","type":"topic","role":"project","title":"Building Semantic Search","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"estimatedTime":"20min","url":"\/tutorials\/openaikit\/09-building-semantic-search","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Building-a-Chat-Interface":{"title":"Building a Chat Interface","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Building-a-Chat-Interface","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Building-a-Chat-Interface"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Check-Your-Understanding":{"title":"Check Your Understanding","type":"link","url":"\/tutorials\/openaikit\/04-handling-errors#Check-Your-Understanding","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Check-Your-Understanding","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}]},"assistant-02-process.swift":{"fileType":"swift","fileName":"WeatherAssistant.swift","syntax":"swift","identifier":"assistant-02-process.swift","content":["\/\/ WeatherAssistant.swift","import Foundation","import OpenAIKit","","class WeatherAssistant {","    let openAI: OpenAIKit","    let weatherService = WeatherService.shared","    var messages: [ChatMessage] = []","    ","    init(openAI: OpenAIKit) {","        self.openAI = openAI","        ","        messages.append(ChatMessage(","            role: .system,","            content: \"You are a helpful weather assistant. When users ask about weather, use the get_weather function to provide accurate information.\"","        ))","    }","    ","    func processMessage(_ userMessage: String) async throws -> String {","        \/\/ Add user message","        messages.append(ChatMessage(role: .user, content: userMessage))","        ","        \/\/ Create request with function","        let request = ChatCompletionRequest(","            messages: messages,","            model: \"gpt-4o-mini\",","            tools: [","                Tool(type: .function, function: getWeatherFunction)","            ]","        )","        ","        \/\/ Get response","        let response = try await openAI.chat.completions(request)","        ","        \/\/ Process response","        return \"\"","    }","}"],"type":"file","highlights":[{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37}]},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Check-Your-Understanding":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Check-Your-Understanding","title":"Check Your Understanding","url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Check-Your-Understanding","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"type":"link"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Handling-Large-Audio-Files":{"title":"Handling Large Audio Files","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Handling-Large-Audio-Files","url":"\/tutorials\/openaikit\/08-transcribing-audio#Handling-Large-Audio-Files"},"advanced-02-parallel.swift":{"fileName":"AdvancedAssistant.swift","type":"file","syntax":"swift","content":["\/\/ Parallel function execution","import OpenAIKit","","class MultiWeatherAssistant {","    func processToolCalls(_ toolCalls: [ToolCall]) async throws -> [ChatMessage] {","        \/\/ Execute all function calls in parallel","        return try await withThrowingTaskGroup(of: ChatMessage?.self) { group in","            for toolCall in toolCalls {","                group.addTask {","                    return try await self.executeFunction(toolCall)","                }","            }","            ","            var results: [ChatMessage] = []","            for try await result in group {","                if let message = result {","                    results.append(message)","                }","            }","            ","            return results","        }","    }","    ","    private func executeFunction(_ toolCall: ToolCall) async throws -> ChatMessage? {","        switch toolCall.function.name {","        case \"get_weather\":","            let args = try parseArgs(WeatherArgs.self, from: toolCall.function.arguments)","            let data = try await weatherService.getCurrentWeather(","                location: args.location,","                unit: args.unit ?? \"celsius\"","            )","            return ChatMessage(","                role: .tool,","                content: data.toJSON(),","                toolCallId: toolCall.id","            )","            ","        case \"get_forecast\":","            let args = try parseArgs(ForecastArgs.self, from: toolCall.function.arguments)","            let data = try await weatherService.getForecast(","                location: args.location,","                days: args.days,","                unit: args.unit ?? \"celsius\"","            )","            return ChatMessage(","                role: .tool,","                content: data.toJSON(),","                toolCallId: toolCall.id","            )","            ","        case \"get_air_quality\":","            let args = try parseArgs(AirQualityArgs.self, from: toolCall.function.arguments)","            let data = try await weatherService.getAirQuality(location: args.location)","            return ChatMessage(","                role: .tool,","                content: data.toJSON(),","                toolCallId: toolCall.id","            )","            ","        default:","            return nil","        }","    }","    ","    private func parseArgs<T: Decodable>(_ type: T.Type, from json: String) throws -> T {","        guard let data = json.data(using: .utf8) else {","            throw WeatherAssistantError.invalidFunctionArguments","        }","        return try JSONDecoder().decode(type, from: data)","    }","}","","\/\/ Argument types","struct ForecastArgs: Codable {","    let location: String","    let days: Int","    let unit: String?","}","","struct AirQualityArgs: Codable {","    let location: String","}"],"identifier":"advanced-02-parallel.swift","fileType":"swift","highlights":[{"line":1},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83}]},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Implementing-Retry-Logic":{"title":"Implementing Retry Logic","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Implementing-Retry-Logic","url":"\/tutorials\/openaikit\/04-handling-errors#Implementing-Retry-Logic"}}}