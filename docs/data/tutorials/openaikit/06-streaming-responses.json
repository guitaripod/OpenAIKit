{"kind":"project","hierarchy":{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials","modules":[{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Install-OpenAIKit"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Obtain-an-API-Key"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Configure-OpenAIKit"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Set-Environment-Variables"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Check-Your-Understanding"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit"},{"sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Create-a-Simple-Chat-Request"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Understanding-Chat-Messages"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Customizing-Model-Parameters"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Building-a-Chat-Interface"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Check-Your-Understanding"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion"},{"sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Understanding-OpenAIKit-Errors"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Implementing-Retry-Logic"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#User-Friendly-Error-Messages"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Building-a-Robust-Error-Handler"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Check-Your-Understanding"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Getting-Started"},{"projects":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations","sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Managing-Conversation-Context","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Implementing-Conversation-Memory","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Creating-Dynamic-Personas","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Advanced-Conversation-Patterns","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Building-a-Complete-Chatbot","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Check-Your-Understanding","kind":"assessment"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses","sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Understanding-Streaming","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Building-a-Streaming-UI","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Handling-Stream-Interruptions","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Advanced-Streaming-Features","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Cross-Platform-Streaming","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Check-Your-Understanding","kind":"assessment"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions","sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Understanding-Function-Calling","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Implementing-the-Weather-Function","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Handling-Function-Calls","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Building-the-Complete-Assistant","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Advanced-Function-Patterns","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Check-Your-Understanding","kind":"assessment"}]}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Chat-Completions"},{"projects":[{"sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images#Understanding-Image-Models","kind":"task"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images"},{"sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Basic-Audio-Transcription"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Advanced-Transcription-Options"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Audio-Translation"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Building-a-Voice-Notes-App"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Handling-Large-Audio-Files"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Check-Your-Understanding"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio"},{"sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Understanding-Embeddings"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Vector-Similarity-Search"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Vector-Database"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Semantic-Search-Engine"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Knowledge-Base-App"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Advanced-Techniques"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Check-Your-Understanding"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Multimodal-AI"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Introduction-to-DeepResearch"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Web-Search-Research"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Code-Interpreter-for-Data-Analysis"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Working-with-MCP-Servers"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Streaming-Research-Responses"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Best-Practices-for-Research-Prompting"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Security-and-Privacy-Considerations"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Check-Your-Understanding"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Advanced-Research"}],"paths":[["doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials","doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/$volume","doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Chat-Completions"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses"},"sections":[{"estimatedTimeInMinutes":15,"content":[{"inlineContent":[{"text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You’ll learn how to handle Server-Sent Events (SSE) and create smooth, interactive UIs."}],"type":"paragraph"}],"kind":"hero","title":"Streaming Responses","chapter":"Chat Completions"},{"tasks":[{"anchor":"Understanding-Streaming","title":"Understanding Streaming","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Streaming allows you to receive and display AI responses in real-time, creating a more engaging user experience.","type":"text"}]}]}],"stepsSection":[{"type":"step","code":"streaming-01-empty.swift","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create a new file to explore streaming functionality.","type":"text"}]}],"caption":[]},{"type":"step","code":"streaming-02-function.swift","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Import OpenAIKit and create a streaming chat function.","type":"text"}]}],"caption":[]},{"type":"step","code":"streaming-03-request.swift","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create a streaming request with the stream parameter.","type":"text"}]}],"caption":[]},{"type":"step","code":"streaming-04-stream.swift","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Handle the AsyncThrowingStream of ChatStreamResponse."}]}],"caption":[]},{"type":"step","code":"streaming-05-process.swift","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"Process each chunk and accumulate the response."}],"type":"paragraph"}],"caption":[]}]},{"anchor":"Building-a-Streaming-UI","title":"Building a Streaming UI","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a SwiftUI interface that smoothly displays streaming text as it arrives."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"type":"step","media":null,"runtimePreview":null,"code":"ui-01-viewmodel.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a view model for streaming chat."}]}]},{"type":"step","media":null,"runtimePreview":null,"code":"ui-02-property.swift","caption":[],"content":[{"inlineContent":[{"text":"Add a streaming message property with real-time updates.","type":"text"}],"type":"paragraph"}]},{"type":"step","media":null,"runtimePreview":null,"code":"ui-03-send.swift","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Implement the streaming send message function."}],"type":"paragraph"}]},{"type":"step","media":null,"runtimePreview":null,"code":"ui-04-view.swift","caption":[],"content":[{"inlineContent":[{"text":"Create the SwiftUI view with typing indicator.","type":"text"}],"type":"paragraph"}]},{"type":"step","media":null,"runtimePreview":null,"code":"ui-05-animation.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add smooth text animation for incoming chunks."}]}]}]},{"anchor":"Handling-Stream-Interruptions","title":"Handling Stream Interruptions","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Learn to gracefully handle stream interruptions, cancellations, and errors."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Create a StreamManager to handle stream lifecycle.","type":"text"}]}],"media":null,"caption":[],"code":"stream-01-manager.swift","runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"text":"Add stream cancellation support.","type":"text"}],"type":"paragraph"}],"media":null,"caption":[],"code":"stream-02-cancel.swift","runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Implement stream reconnection logic.","type":"text"}]}],"media":null,"caption":[],"code":"stream-03-reconnect.swift","runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Add timeout handling for stalled streams."}],"type":"paragraph"}],"media":null,"caption":[],"code":"stream-04-timeout.swift","runtimePreview":null}]},{"anchor":"Advanced-Streaming-Features","title":"Advanced Streaming Features","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement advanced features like token counting, speed control, and partial response handling."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add real-time token counting during streaming."}]}],"type":"step","code":"advanced-01-tokens.swift","runtimePreview":null,"caption":[]},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement response speed throttling."}]}],"type":"step","code":"advanced-02-throttle.swift","runtimePreview":null,"caption":[]},{"media":null,"content":[{"inlineContent":[{"text":"Add partial JSON parsing for function calls.","type":"text"}],"type":"paragraph"}],"type":"step","code":"advanced-03-json.swift","runtimePreview":null,"caption":[]},{"media":null,"content":[{"inlineContent":[{"text":"Create a streaming markdown renderer.","type":"text"}],"type":"paragraph"}],"type":"step","code":"advanced-04-markdown.swift","runtimePreview":null,"caption":[]},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add streaming response caching."}]}],"type":"step","code":"advanced-05-cache.swift","runtimePreview":null,"caption":[]}]},{"anchor":"Cross-Platform-Streaming","title":"Cross-Platform Streaming","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"text":"Handle platform-specific streaming implementations for iOS, macOS, and Linux.","type":"text"}],"type":"paragraph"}]}],"stepsSection":[{"media":null,"code":"platform-01-interface.swift","type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Create platform-agnostic streaming interface."}],"type":"paragraph"}],"caption":[]},{"media":null,"code":"platform-02-apple.swift","type":"step","runtimePreview":null,"content":[{"inlineContent":[{"text":"Implement iOS\/macOS streaming with URLSession.","type":"text"}],"type":"paragraph"}],"caption":[]},{"media":null,"code":"platform-03-linux.swift","type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add Linux streaming support."}]}],"caption":[]},{"media":null,"code":"platform-04-errors.swift","type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Create unified error handling across platforms."}],"type":"paragraph"}],"caption":[]}]}],"kind":"tasks"},{"kind":"assessments","assessments":[{"title":[{"inlineContent":[{"text":"What’s the main advantage of streaming responses?","type":"text"}],"type":"paragraph"}],"type":"multiple-choice","choices":[{"isCorrect":true,"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Streaming provides immediate feedback and a more interactive experience."}]}],"content":[{"type":"paragraph","inlineContent":[{"text":"Users see responses as they’re generated in real-time.","type":"text"}]}]},{"isCorrect":false,"justification":[{"inlineContent":[{"text":"Memory usage is similar; the benefit is user experience.","type":"text"}],"type":"paragraph"}],"content":[{"inlineContent":[{"type":"text","text":"It uses less memory than regular responses."}],"type":"paragraph"}]},{"isCorrect":false,"justification":[{"type":"paragraph","inlineContent":[{"text":"Total generation time is the same; it’s the perception that improves.","type":"text"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Responses are generated faster."}]}]}],"content":[]},{"title":[{"inlineContent":[{"type":"text","text":"How should you handle stream cancellation?"}],"type":"paragraph"}],"type":"multiple-choice","choices":[{"isCorrect":false,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let the stream complete naturally."}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This wastes resources and provides poor user experience."}]}]},{"isCorrect":true,"content":[{"inlineContent":[{"text":"Use a Task handle to cancel the stream and clean up resources.","type":"text"}],"type":"paragraph"}],"justification":[{"inlineContent":[{"text":"Proper cancellation ensures resources are freed and the UI updates correctly.","type":"text"}],"type":"paragraph"}]},{"isCorrect":false,"content":[{"inlineContent":[{"type":"text","text":"Force quit the entire app."}],"type":"paragraph"}],"justification":[{"inlineContent":[{"type":"text","text":"This is extreme and provides terrible user experience."}],"type":"paragraph"}]}],"content":[]}],"anchor":"Check-Your-Understanding"},{"kind":"callToAction","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"title":"Working with Functions","action":{"type":"reference","overridingTitle":"Get started","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"isActive":true},"featuredEyebrow":"Tutorial"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/openaikit\/06-streaming-responses"]}],"metadata":{"category":"OpenAIKit","categoryPathComponent":"OpenAIKit-Tutorials","role":"project","title":"Streaming Responses"},"references":{"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Basic-Audio-Transcription":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Basic-Audio-Transcription","role":"pseudoSymbol","title":"Basic Audio Transcription","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"url":"\/tutorials\/openaikit\/08-transcribing-audio#Basic-Audio-Transcription","kind":"section"},"streaming-05-process.swift":{"fileType":"swift","fileName":"StreamingChat.swift","syntax":"swift","identifier":"streaming-05-process.swift","content":["\/\/ StreamingChat.swift - Processing streamed responses","import Foundation","import OpenAIKit","","class StreamingChat: ObservableObject {","    @Published var streamedText = \"\"","    @Published var isStreaming = false","    ","    let openAI = OpenAIManager.shared.client","    private var streamTask: Task<Void, Never>?","    ","    func streamMessage(_ message: String) {","        streamTask?.cancel()","        streamedText = \"\"","        isStreaming = true","        ","        streamTask = Task {","            do {","                guard let openAI = openAI else {","                    throw OpenAIError.missingAPIKey","                }","                ","                let request = ChatCompletionRequest(","                    messages: [","                        ChatMessage(role: .user, content: message)","                    ],","                    model: \"gpt-4o-mini\",","                    stream: true","                )","                ","                let stream = try await openAI.chat.completionsStream(request)","                ","                for try await chunk in stream {","                    guard !Task.isCancelled else { break }","                    ","                    if let content = chunk.choices.first?.delta.content {","                        await MainActor.run {","                            streamedText += content","                        }","                    }","                }","            } catch {","                print(\"Streaming error: \\(error)\")","            }","            ","            await MainActor.run {","                isStreaming = false","            }","        }","    }","    ","    func cancelStream() {","        streamTask?.cancel()","        isStreaming = false","    }","}"],"type":"file","highlights":[{"line":1},{"line":5},{"line":6},{"line":7},{"line":8},{"line":10},{"line":12},{"line":13},{"line":14},{"line":15},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":42},{"line":43},{"line":45},{"line":46},{"line":47},{"line":48},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55}]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Advanced-Techniques":{"title":"Advanced Techniques","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Advanced-Techniques","url":"\/tutorials\/openaikit\/09-building-semantic-search#Advanced-Techniques"},"stream-04-timeout.swift":{"fileType":"swift","syntax":"swift","type":"file","fileName":"StreamManager.swift","identifier":"stream-04-timeout.swift","highlights":[{"line":1},{"line":5},{"line":6},{"line":8},{"line":9},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31}],"content":["\/\/ StreamTimeout.swift","import Foundation","import OpenAIKit","","class TimeoutStream {","    func streamWithTimeout(","        request: ChatCompletionRequest,","        client: OpenAIKit,","        timeout: TimeInterval,","        onChunk: @escaping (String) -> Void,","        onTimeout: @escaping () -> Void","    ) async throws {","        let streamTask = Task {","            let stream = try await client.chat.completionsStream(request)","            ","            for try await chunk in stream {","                if let content = chunk.choices.first?.delta.content {","                    onChunk(content)","                }","            }","        }","        ","        let timeoutTask = Task {","            try await Task.sleep(nanoseconds: UInt64(timeout * 1_000_000_000))","            streamTask.cancel()","            onTimeout()","        }","        ","        \/\/ Wait for either to complete","        _ = await streamTask.result","        timeoutTask.cancel()","    }","}"]},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Building-a-Streaming-UI":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Building-a-Streaming-UI","type":"section","role":"pseudoSymbol","title":"Building a Streaming UI","abstract":[{"text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated.","type":"text"}],"url":"\/tutorials\/openaikit\/06-streaming-responses#Building-a-Streaming-UI","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Chat-Completions":{"title":"Chat Completions","abstract":[],"role":"article","kind":"article","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Chat-Completions","url":"\/tutorials\/openaikit-tutorials\/chat-completions"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Introduction-to-DeepResearch":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Introduction-to-DeepResearch","role":"pseudoSymbol","title":"Introduction to DeepResearch","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Introduction-to-DeepResearch","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Advanced-Transcription-Options":{"title":"Advanced Transcription Options","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Advanced-Transcription-Options","url":"\/tutorials\/openaikit\/08-transcribing-audio#Advanced-Transcription-Options"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Multimodal-AI":{"title":"Multimodal AI","abstract":[],"role":"article","kind":"article","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Multimodal-AI","url":"\/tutorials\/openaikit-tutorials\/multimodal-ai"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Implementing-the-Weather-Function":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Implementing-the-Weather-Function","role":"pseudoSymbol","title":"Implementing the Weather Function","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"url":"\/tutorials\/openaikit\/03-working-with-functions#Implementing-the-Weather-Function","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search","type":"topic","role":"project","title":"Building Semantic Search","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"estimatedTime":"20min","url":"\/tutorials\/openaikit\/09-building-semantic-search","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis","role":"project","title":"Deep Research and Analysis","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"estimatedTime":"25min","url":"\/tutorials\/openaikit\/09-deep-research-analysis","kind":"project"},"advanced-04-markdown.swift":{"fileType":"swift","fileName":"AdvancedStreaming.swift","syntax":"swift","identifier":"advanced-04-markdown.swift","content":["\/\/ MarkdownStreamRenderer.swift","import SwiftUI","","struct MarkdownStreamView: View {","    let text: String","    let isComplete: Bool","    ","    var body: some View {","        ScrollView {","            VStack(alignment: .leading, spacing: 8) {","                ForEach(parseMarkdown(text), id: \\.self) { element in","                    renderElement(element)","                }","                ","                if !isComplete {","                    ProgressView()","                        .scaleEffect(0.7)","                }","            }","            .padding()","        }","    }","    ","    private func parseMarkdown(_ text: String) -> [MarkdownElement] {","        \/\/ Simple markdown parser","        var elements: [MarkdownElement] = []","        let lines = text.components(separatedBy: .newlines)","        ","        for line in lines {","            if line.hasPrefix(\"# \") {","                elements.append(.heading(String(line.dropFirst(2))))","            } else if line.hasPrefix(\"- \") {","                elements.append(.listItem(String(line.dropFirst(2))))","            } else if line.hasPrefix(\"```\") {","                elements.append(.codeBlock(line))","            } else if !line.isEmpty {","                elements.append(.paragraph(line))","            }","        }","        ","        return elements","    }","    ","    @ViewBuilder","    private func renderElement(_ element: MarkdownElement) -> some View {","        switch element {","        case .heading(let text):","            Text(text)","                .font(.title2)","                .fontWeight(.bold)","        case .paragraph(let text):","            Text(text)","        case .listItem(let text):","            HStack(alignment: .top) {","                Text(\"•\")","                Text(text)","            }","        case .codeBlock(let code):","            Text(code)","                .font(.system(.body, design: .monospaced))","                .padding(8)","                .background(Color.gray.opacity(0.1))","                .cornerRadius(4)","        }","    }","}","","enum MarkdownElement: Hashable {","    case heading(String)","    case paragraph(String)","    case listItem(String)","    case codeBlock(String)","}"],"type":"file","highlights":[{"line":1},{"line":2},{"line":4},{"line":5},{"line":6},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":15},{"line":16},{"line":17},{"line":20},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":41},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73}]},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Building-a-Chat-Interface":{"title":"Building a Chat Interface","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Building-a-Chat-Interface","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Building-a-Chat-Interface"},"advanced-02-throttle.swift":{"fileType":"swift","syntax":"swift","type":"file","fileName":"AdvancedStreaming.swift","identifier":"advanced-02-throttle.swift","highlights":[{"line":1},{"line":3},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":11},{"line":12},{"line":13},{"line":14},{"line":17},{"line":19},{"line":20},{"line":21},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35}],"content":["\/\/ StreamThrottling.swift","import Foundation","import Combine","","class ThrottledStreamProcessor {","    private let updateInterval: TimeInterval","    private var buffer = \"\"","    private var updateTimer: Timer?","    private let onUpdate: (String) -> Void","    ","    init(updateInterval: TimeInterval = 0.1, onUpdate: @escaping (String) -> Void) {","        self.updateInterval = updateInterval","        self.onUpdate = onUpdate","    }","    ","    func processChunk(_ chunk: String) {","        buffer += chunk","        ","        if updateTimer == nil {","            updateTimer = Timer.scheduledTimer(withTimeInterval: updateInterval, repeats: true) { _ in","                self.flushBuffer()","            }","        }","    }","    ","    func finish() {","        updateTimer?.invalidate()","        updateTimer = nil","        flushBuffer()","    }","    ","    private func flushBuffer() {","        if !buffer.isEmpty {","            onUpdate(buffer)","            buffer = \"\"","        }","    }","}"]},"stream-02-cancel.swift":{"fileType":"swift","fileName":"StreamManager.swift","syntax":"swift","identifier":"stream-02-cancel.swift","content":["\/\/ StreamCancellation.swift","import Foundation","import OpenAIKit","","class CancellableStreamViewModel: ObservableObject {","    @Published var streamText = \"\"","    @Published var isStreaming = false","    ","    private let streamManager = StreamManager()","    private let streamId = UUID()","    private let openAI: OpenAIKit","    ","    init(openAI: OpenAIKit) {","        self.openAI = openAI","    }","    ","    func startStreaming(prompt: String) {","        streamText = \"\"","        isStreaming = true","        ","        let request = ChatCompletionRequest(","            messages: [ChatMessage(role: .user, content: prompt)],","            model: \"gpt-4o-mini\",","            stream: true","        )","        ","        streamManager.startStream(","            id: streamId,","            request: request,","            client: openAI,","            onChunk: { [weak self] chunk in","                DispatchQueue.main.async {","                    if let content = chunk.choices.first?.delta.content {","                        self?.streamText += content","                    }","                }","            },","            onComplete: { [weak self] in","                DispatchQueue.main.async {","                    self?.isStreaming = false","                }","            },","            onError: { [weak self] error in","                DispatchQueue.main.async {","                    self?.isStreaming = false","                    print(\"Stream error: \\(error)\")","                }","            }","        )","    }","    ","    func cancelStreaming() {","        streamManager.cancelStream(id: streamId)","        isStreaming = false","    }","}"],"type":"file","highlights":[{"line":1},{"line":5},{"line":6},{"line":7},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":37},{"line":38},{"line":39},{"line":40},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":49},{"line":52},{"line":53},{"line":54}]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Check-Your-Understanding":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Check-Your-Understanding","type":"link","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"title":"Check Your Understanding","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Understanding-OpenAIKit-Errors":{"title":"Understanding OpenAIKit Errors","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Understanding-OpenAIKit-Errors","url":"\/tutorials\/openaikit\/04-handling-errors#Understanding-OpenAIKit-Errors"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Getting-Started":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Getting-Started","role":"article","title":"Getting Started","abstract":[],"url":"\/tutorials\/openaikit-tutorials\/getting-started","kind":"article"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Check-Your-Understanding":{"type":"link","url":"\/tutorials\/openaikit\/06-streaming-responses#Check-Your-Understanding","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Check-Your-Understanding","title":"Check Your Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}]},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Building-a-Complete-Chatbot":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Building-a-Complete-Chatbot","role":"pseudoSymbol","title":"Building a Complete Chatbot","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"url":"\/tutorials\/openaikit\/05-building-conversations#Building-a-Complete-Chatbot","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Check-Your-Understanding":{"titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Check-Your-Understanding","title":"Check Your Understanding","url":"\/tutorials\/openaikit\/08-transcribing-audio#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Understanding-Function-Calling":{"title":"Understanding Function Calling","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Understanding-Function-Calling","url":"\/tutorials\/openaikit\/03-working-with-functions#Understanding-Function-Calling"},"ui-01-viewmodel.swift":{"fileType":"swift","syntax":"swift","type":"file","fileName":"StreamingChatView.swift","identifier":"ui-01-viewmodel.swift","highlights":[],"content":["\/\/ ImageGenerationViewModel.swift","import Foundation","import OpenAIKit","import SwiftUI","","@MainActor","class ImageGenerationViewModel: ObservableObject {","    @Published var prompt = \"\"","    @Published var generatedImageURL: URL?","    @Published var isGenerating = false","    @Published var error: Error?","    @Published var options = ImageGenerationOptions.standard","    ","    private let openAI: OpenAIKit","    ","    init(openAI: OpenAIKit) {","        self.openAI = openAI","    }","    ","    func generateImage() async {","        guard !prompt.isEmpty else { return }","        ","        isGenerating = true","        error = nil","        ","        do {","            let request = options.createRequest(prompt: prompt)","            let response = try await openAI.images.generations(request)","            ","            if let urlString = response.data.first?.url,","               let url = URL(string: urlString) {","                generatedImageURL = url","            }","        } catch {","            self.error = error","        }","        ","        isGenerating = false","    }","}"]},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Set-Environment-Variables":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Set-Environment-Variables","type":"section","role":"pseudoSymbol","title":"Set Environment Variables","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Set-Environment-Variables","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors":{"title":"Handling Errors","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors","url":"\/tutorials\/openaikit\/04-handling-errors","estimatedTime":"12min"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Implementing-Conversation-Memory":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Implementing-Conversation-Memory","type":"section","role":"pseudoSymbol","title":"Implementing Conversation Memory","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"url":"\/tutorials\/openaikit\/05-building-conversations#Implementing-Conversation-Memory","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Code-Interpreter-for-Data-Analysis":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Code-Interpreter-for-Data-Analysis","role":"pseudoSymbol","title":"Code Interpreter for Data Analysis","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Code-Interpreter-for-Data-Analysis","kind":"section"},"streaming-02-function.swift":{"fileType":"swift","fileName":"StreamingChat.swift","syntax":"swift","identifier":"streaming-02-function.swift","content":["\/\/ StreamingChat.swift","import Foundation","import OpenAIKit","","class StreamingChat {","    let openAI = OpenAIManager.shared.client","    ","    func streamMessage(_ message: String) async throws {","        \/\/ Implementation here","    }","}"],"type":"file","highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}]},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Handling-Stream-Interruptions":{"title":"Handling Stream Interruptions","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Handling-Stream-Interruptions","url":"\/tutorials\/openaikit\/06-streaming-responses#Handling-Stream-Interruptions"},"doc://OpenAIKit/tutorials/OpenAIKit/07-Generating-Images":{"title":"Generating Images with AI","abstract":[{"type":"text","text":"Master image generation using DALL-E 2, DALL-E 3, and the advanced GPT Image 1 model. Learn to select the right model, handle errors professionally, and build production-ready image generation features."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images","url":"\/tutorials\/openaikit\/07-generating-images","estimatedTime":"25min"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Understanding-Streaming":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Understanding-Streaming","type":"section","role":"pseudoSymbol","title":"Understanding Streaming","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"url":"\/tutorials\/openaikit\/06-streaming-responses#Understanding-Streaming","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Customizing-Model-Parameters":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Customizing-Model-Parameters","role":"pseudoSymbol","title":"Customizing Model Parameters","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Customizing-Model-Parameters","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Building-a-Robust-Error-Handler":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Building-a-Robust-Error-Handler","type":"section","role":"pseudoSymbol","title":"Building a Robust Error Handler","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"url":"\/tutorials\/openaikit\/04-handling-errors#Building-a-Robust-Error-Handler","kind":"section"},"stream-01-manager.swift":{"fileType":"swift","syntax":"swift","fileName":"StreamManager.swift","type":"file","identifier":"stream-01-manager.swift","highlights":[],"content":["\/\/ StreamManager.swift","import Foundation","import OpenAIKit","","class StreamManager {","    private var activeStreams: [UUID: Task<Void, Error>] = [:]","    ","    func startStream(","        id: UUID,","        request: ChatCompletionRequest,","        client: OpenAIKit,","        onChunk: @escaping (ChatStreamChunk) -> Void,","        onComplete: @escaping () -> Void,","        onError: @escaping (Error) -> Void","    ) {","        \/\/ Cancel existing stream if any","        cancelStream(id: id)","        ","        let task = Task {","            do {","                let stream = try await client.chat.completionsStream(request)","                ","                for try await chunk in stream {","                    if Task.isCancelled { break }","                    onChunk(chunk)","                }","                ","                onComplete()","            } catch {","                if !Task.isCancelled {","                    onError(error)","                }","            }","        }","        ","        activeStreams[id] = task","    }","    ","    func cancelStream(id: UUID) {","        activeStreams[id]?.cancel()","        activeStreams.removeValue(forKey: id)","    }","    ","    func cancelAllStreams() {","        activeStreams.values.forEach { $0.cancel() }","        activeStreams.removeAll()","    }","}"]},"platform-01-interface.swift":{"fileType":"swift","fileName":"CrossPlatformStreaming.swift","syntax":"swift","identifier":"platform-01-interface.swift","content":["\/\/ PlatformStreamInterface.swift","import Foundation","","protocol StreamInterface {","    func startStream(request: ChatCompletionRequest) async throws","    func processChunk(_ chunk: ChatStreamChunk)","    func handleError(_ error: Error)","    func complete()","}","","class BaseStreamHandler: StreamInterface {","    func startStream(request: ChatCompletionRequest) async throws {","        fatalError(\"Must be implemented by subclass\")","    }","    ","    func processChunk(_ chunk: ChatStreamChunk) {","        \/\/ Process streaming chunk","    }","    ","    func handleError(_ error: Error) {","        \/\/ Handle streaming error","    }","    ","    func complete() {","        \/\/ Stream completed","    }","}"],"type":"file","highlights":[]},"streaming-04-stream.swift":{"fileType":"swift","syntax":"swift","fileName":"StreamingChat.swift","type":"file","identifier":"streaming-04-stream.swift","highlights":[{"line":8},{"line":18},{"line":19},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37}],"content":["\/\/ StreamingChat.swift","import Foundation","import OpenAIKit","","class StreamingChat {","    let openAI = OpenAIManager.shared.client","    ","    func streamMessage(_ message: String) async throws -> AsyncThrowingStream<String, Error> {","        guard let openAI = openAI else {","            throw OpenAIError.missingAPIKey","        }","        ","        let request = ChatCompletionRequest(","            messages: [","                ChatMessage(role: .user, content: message)","            ],","            model: \"gpt-4o-mini\",","            stream: true,","            streamOptions: StreamOptions(includeUsage: true)","        )","        ","        let stream = try await openAI.chat.completionsStream(request)","        ","        return AsyncThrowingStream { continuation in","            Task {","                do {","                    for try await chunk in stream {","                        if let content = chunk.choices.first?.delta.content {","                            continuation.yield(content)","                        }","                    }","                    continuation.finish()","                } catch {","                    continuation.finish(throwing: error)","                }","            }","        }","    }","}"]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Semantic-Search-Engine":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Semantic-Search-Engine","role":"pseudoSymbol","title":"Semantic Search Engine","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"url":"\/tutorials\/openaikit\/09-building-semantic-search#Semantic-Search-Engine","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Managing-Conversation-Context":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Managing-Conversation-Context","role":"pseudoSymbol","title":"Managing Conversation Context","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"url":"\/tutorials\/openaikit\/05-building-conversations#Managing-Conversation-Context","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials":{"title":"Welcome to OpenAIKit","abstract":[{"type":"text","text":"Learn how to integrate OpenAI’s powerful AI models into your Swift applications with OpenAIKit."}],"role":"overview","kind":"overview","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials","url":"\/tutorials\/openaikit-tutorials"},"platform-03-linux.swift":{"fileType":"swift","fileName":"CrossPlatformStreaming.swift","syntax":"swift","identifier":"platform-03-linux.swift","content":["\/\/ LinuxStreamHandler.swift","#if os(Linux)","import Foundation","import OpenAIKit","","class LinuxStreamHandler: BaseStreamHandler {","    private var streamText = \"\"","    private var isStreaming = false","    ","    override func startStream(request: ChatCompletionRequest) async throws {","        isStreaming = true","        streamText = \"\"","        ","        \/\/ Linux-specific implementation","    }","    ","    override func processChunk(_ chunk: ChatStreamChunk) {","        if let content = chunk.choices.first?.delta.content {","            streamText += content","            print(content, terminator: \"\") \/\/ Direct console output on Linux","        }","    }","    ","    override func complete() {","        isStreaming = false","        print() \/\/ New line after stream completes","    }","}","#endif"],"type":"file","highlights":[{"line":1},{"line":2},{"line":6},{"line":7},{"line":8},{"line":14},{"line":20},{"line":26}]},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Check-Your-Understanding":{"title":"Check Your Understanding","url":"\/tutorials\/openaikit\/04-handling-errors#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Check-Your-Understanding":{"url":"\/tutorials\/openaikit\/05-building-conversations#Check-Your-Understanding","type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"title":"Check Your Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Configure-OpenAIKit":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Configure-OpenAIKit","role":"pseudoSymbol","title":"Configure OpenAIKit","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Configure-OpenAIKit","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Web-Search-Research":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Web-Search-Research","role":"pseudoSymbol","title":"Web Search Research","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Web-Search-Research","kind":"section"},"streaming-01-empty.swift":{"fileType":"swift","syntax":"swift","type":"file","fileName":"StreamingChat.swift","identifier":"streaming-01-empty.swift","highlights":[],"content":["\/\/ StreamingChat.swift"]},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Advanced-Function-Patterns":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Advanced-Function-Patterns","role":"pseudoSymbol","title":"Advanced Function Patterns","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"url":"\/tutorials\/openaikit\/03-working-with-functions#Advanced-Function-Patterns","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Building-a-Voice-Notes-App":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Building-a-Voice-Notes-App","role":"pseudoSymbol","title":"Building a Voice Notes App","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"url":"\/tutorials\/openaikit\/08-transcribing-audio#Building-a-Voice-Notes-App","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Advanced-Conversation-Patterns":{"title":"Advanced Conversation Patterns","abstract":[{"text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions.","type":"text"}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Advanced-Conversation-Patterns","url":"\/tutorials\/openaikit\/05-building-conversations#Advanced-Conversation-Patterns"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Obtain-an-API-Key":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Obtain-an-API-Key","type":"section","role":"pseudoSymbol","title":"Obtain an API Key","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Obtain-an-API-Key","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Advanced-Research":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Advanced-Research","role":"article","title":"Advanced Research","abstract":[],"url":"\/tutorials\/openaikit-tutorials\/advanced-research","kind":"article"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Working-with-MCP-Servers":{"title":"Working with MCP Servers","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Working-with-MCP-Servers","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Working-with-MCP-Servers"},"ui-05-animation.swift":{"fileType":"swift","fileName":"StreamingChatView.swift","syntax":"swift","identifier":"ui-05-animation.swift","content":["\/\/ StreamingAnimation.swift","import SwiftUI","","struct AnimatedStreamText: View {","    let text: String","    @State private var visibleCharacters = 0","    ","    var body: some View {","        Text(String(text.prefix(visibleCharacters)))","            .onAppear {","                animateText()","            }","            .onChange(of: text) { _ in","                animateText()","            }","    }","    ","    private func animateText() {","        visibleCharacters = 0","        ","        for (index, _) in text.enumerated() {","            DispatchQueue.main.asyncAfter(deadline: .now() + Double(index) * 0.02) {","                if index < text.count {","                    visibleCharacters = index + 1","                }","            }","        }","    }","}","","struct StreamingTextView: View {","    @Binding var text: String","    let isComplete: Bool","    ","    var body: some View {","        HStack(alignment: .bottom) {","            if isComplete {","                Text(text)","            } else {","                AnimatedStreamText(text: text)","                ","                \/\/ Blinking cursor","                Text(\"|\")","                    .opacity(isComplete ? 0 : 1)","                    .animation(Animation.easeInOut(duration: 0.5).repeatForever(autoreverses: true))","            }","        }","    }","}"],"type":"file","highlights":[{"line":1},{"line":4},{"line":5},{"line":6},{"line":9},{"line":10},{"line":11},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":31},{"line":32},{"line":33},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":42},{"line":43},{"line":44},{"line":45}]},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses","type":"topic","role":"project","title":"Streaming Responses","abstract":[{"text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated.","type":"text"}],"estimatedTime":"15min","url":"\/tutorials\/openaikit\/06-streaming-responses","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Understanding-Chat-Messages":{"title":"Understanding Chat Messages","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Understanding-Chat-Messages","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Understanding-Chat-Messages"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Understanding-Embeddings":{"title":"Understanding Embeddings","abstract":[{"text":"Create intelligent search systems using embeddings to find semantically similar content.","type":"text"}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Understanding-Embeddings","url":"\/tutorials\/openaikit\/09-building-semantic-search#Understanding-Embeddings"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Building-a-Vector-Database":{"title":"Building a Vector Database","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Vector-Database","url":"\/tutorials\/openaikit\/09-building-semantic-search#Building-a-Vector-Database"},"ui-02-property.swift":{"fileType":"swift","syntax":"swift","fileName":"StreamingChatView.swift","type":"file","identifier":"ui-02-property.swift","highlights":[{"line":1},{"line":7},{"line":8},{"line":9},{"line":10},{"line":13},{"line":14},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":50},{"line":51},{"line":52}],"content":["\/\/ StreamingViewModel.swift - Property wrapper for streaming","import Foundation","import OpenAIKit","import SwiftUI","","@MainActor","class StreamingViewModel: ObservableObject {","    @Published var messages: [StreamMessage] = []","    @Published var currentStreamText = \"\"","    @Published var isStreaming = false","    @Published var error: Error?","    ","    private let openAI = OpenAIManager.shared.client","    private var streamTask: Task<Void, Never>?","    ","    struct StreamMessage: Identifiable {","        let id = UUID()","        let role: ChatRole","        var content: String","        let timestamp = Date()","        var isComplete = true","    }","    ","    func sendMessage(_ text: String) {","        \/\/ Add user message","        messages.append(StreamMessage(","            role: .user,","            content: text,","            isComplete: true","        ))","        ","        \/\/ Start streaming response","        streamResponse(for: text)","    }","    ","    private func streamResponse(for prompt: String) {","        streamTask?.cancel()","        currentStreamText = \"\"","        isStreaming = true","        error = nil","        ","        \/\/ Add placeholder for assistant message","        let assistantMessage = StreamMessage(","            role: .assistant,","            content: \"\",","            isComplete: false","        )","        messages.append(assistantMessage)","        ","        streamTask = Task {","            \/\/ Implementation next","        }","    }","}"]},"streaming-03-request.swift":{"fileType":"swift","fileName":"StreamingChat.swift","syntax":"swift","identifier":"streaming-03-request.swift","content":["\/\/ StreamingChat.swift","import Foundation","import OpenAIKit","","class StreamingChat {","    let openAI = OpenAIManager.shared.client","    ","    func streamMessage(_ message: String) async throws {","        guard let openAI = openAI else {","            throw OpenAIError.missingAPIKey","        }","        ","        let request = ChatCompletionRequest(","            messages: [","                ChatMessage(role: .user, content: message)","            ],","            model: \"gpt-4o-mini\",","            stream: true","        )","        ","        \/\/ Stream will be handled next","    }","}"],"type":"file","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21}]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Building-a-Knowledge-Base-App":{"title":"Building a Knowledge Base App","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Knowledge-Base-App","url":"\/tutorials\/openaikit\/09-building-semantic-search#Building-a-Knowledge-Base-App"},"platform-02-apple.swift":{"fileType":"swift","syntax":"swift","type":"file","fileName":"CrossPlatformStreaming.swift","identifier":"platform-02-apple.swift","highlights":[{"line":1},{"line":2},{"line":3},{"line":5},{"line":7},{"line":8},{"line":9},{"line":10},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":19},{"line":20},{"line":21},{"line":22},{"line":25},{"line":26},{"line":29}],"content":["\/\/ AppleStreamHandler.swift","#if canImport(Combine)","import Combine","import Foundation","import OpenAIKit","","class AppleStreamHandler: BaseStreamHandler {","    private var cancellables = Set<AnyCancellable>()","    @Published var streamText = \"\"","    @Published var isStreaming = false","    ","    override func startStream(request: ChatCompletionRequest) async throws {","        isStreaming = true","        streamText = \"\"","        ","        \/\/ Implementation using Combine for Apple platforms","    }","    ","    override func processChunk(_ chunk: ChatStreamChunk) {","        if let content = chunk.choices.first?.delta.content {","            streamText += content","        }","    }","    ","    override func complete() {","        isStreaming = false","    }","}","#endif"]},"platform-04-errors.swift":{"fileType":"swift","fileName":"CrossPlatformStreaming.swift","syntax":"swift","identifier":"platform-04-errors.swift","content":["\/\/ StreamErrorHandling.swift","import Foundation","","enum StreamError: LocalizedError {","    case connectionLost","    case timeout","    case invalidResponse","    case rateLimited","    ","    var errorDescription: String? {","        switch self {","        case .connectionLost:","            return \"Connection lost during streaming\"","        case .timeout:","            return \"Stream timed out\"","        case .invalidResponse:","            return \"Invalid streaming response\"","        case .rateLimited:","            return \"Rate limit exceeded during streaming\"","        }","    }","}","","class StreamErrorHandler {","    static func handle(_ error: Error) -> StreamError {","        \/\/ Map various errors to stream errors","        if let urlError = error as? URLError {","            switch urlError.code {","            case .timedOut:","                return .timeout","            case .networkConnectionLost:","                return .connectionLost","            default:","                return .connectionLost","            }","        }","        ","        return .invalidResponse","    }","}"],"type":"file","highlights":[{"line":1},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":37},{"line":38}]},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Check-Your-Understanding":{"title":"Check Your Understanding","url":"\/tutorials\/openaikit\/03-working-with-functions#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Check-Your-Understanding","type":"link"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion","role":"project","title":"Your First Chat Completion","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"estimatedTime":"15min","url":"\/tutorials\/openaikit\/02-your-first-chat-completion","kind":"project"},"ui-03-send.swift":{"fileType":"swift","syntax":"swift","type":"file","fileName":"StreamingChatView.swift","identifier":"ui-03-send.swift","highlights":[{"line":1},{"line":6},{"line":26},{"line":27},{"line":31},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69}],"content":["\/\/ StreamingViewModel.swift - Sending messages","import Foundation","import OpenAIKit","import SwiftUI","","extension StreamingViewModel {","    func sendMessage(_ text: String) {","        \/\/ Add user message","        messages.append(StreamMessage(","            role: .user,","            content: text,","            isComplete: true","        ))","        ","        \/\/ Start streaming response","        streamResponse(for: text)","    }","    ","    private func streamResponse(for prompt: String) {","        streamTask?.cancel()","        currentStreamText = \"\"","        isStreaming = true","        error = nil","        ","        \/\/ Add placeholder for assistant message","        let assistantMessageIndex = messages.count","        messages.append(StreamMessage(","            role: .assistant,","            content: \"\",","            isComplete: false","        ))","        ","        streamTask = Task {","            do {","                guard let openAI = openAI else {","                    throw OpenAIError.missingAPIKey","                }","                ","                let request = ChatCompletionRequest(","                    messages: messages.map { ChatMessage(role: $0.role, content: $0.content) },","                    model: \"gpt-4o-mini\",","                    stream: true","                )","                ","                let stream = try await openAI.chat.completionsStream(request)","                ","                for try await chunk in stream {","                    guard !Task.isCancelled else { break }","                    ","                    if let content = chunk.choices.first?.delta.content {","                        await MainActor.run {","                            currentStreamText += content","                            messages[assistantMessageIndex].content = currentStreamText","                        }","                    }","                }","                ","                await MainActor.run {","                    messages[assistantMessageIndex].isComplete = true","                }","            } catch {","                await MainActor.run {","                    self.error = error","                }","            }","            ","            await MainActor.run {","                isStreaming = false","            }","        }","    }","}"]},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Handling-Large-Audio-Files":{"title":"Handling Large Audio Files","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Handling-Large-Audio-Files","url":"\/tutorials\/openaikit\/08-transcribing-audio#Handling-Large-Audio-Files"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions","type":"topic","role":"project","title":"Working with Functions","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"estimatedTime":"20min","url":"\/tutorials\/openaikit\/03-working-with-functions","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Audio-Translation":{"title":"Audio Translation","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Audio-Translation","url":"\/tutorials\/openaikit\/08-transcribing-audio#Audio-Translation"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Handling-Function-Calls":{"title":"Handling Function Calls","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Handling-Function-Calls","url":"\/tutorials\/openaikit\/03-working-with-functions#Handling-Function-Calls"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Implementing-Retry-Logic":{"title":"Implementing Retry Logic","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Implementing-Retry-Logic","url":"\/tutorials\/openaikit\/04-handling-errors#Implementing-Retry-Logic"},"doc://OpenAIKit/tutorials/OpenAIKit/07-Generating-Images#Understanding-Image-Models":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images#Understanding-Image-Models","role":"pseudoSymbol","title":"Understanding Image Models","abstract":[{"type":"text","text":"Master image generation using DALL-E 2, DALL-E 3, and the advanced GPT Image 1 model. Learn to select the right model, handle errors professionally, and build production-ready image generation features."}],"url":"\/tutorials\/openaikit\/07-generating-images#Understanding-Image-Models","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Security-and-Privacy-Considerations":{"title":"Security and Privacy Considerations","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Security-and-Privacy-Considerations","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Security-and-Privacy-Considerations"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Creating-Dynamic-Personas":{"title":"Creating Dynamic Personas","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Creating-Dynamic-Personas","url":"\/tutorials\/openaikit\/05-building-conversations#Creating-Dynamic-Personas"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Streaming-Research-Responses":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Streaming-Research-Responses","role":"pseudoSymbol","title":"Streaming Research Responses","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Streaming-Research-Responses","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Check-Your-Understanding":{"title":"Check Your Understanding","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Building-the-Complete-Assistant":{"title":"Building the Complete Assistant","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Building-the-Complete-Assistant","url":"\/tutorials\/openaikit\/03-working-with-functions#Building-the-Complete-Assistant"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Vector-Similarity-Search":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Vector-Similarity-Search","role":"pseudoSymbol","title":"Vector Similarity Search","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"url":"\/tutorials\/openaikit\/09-building-semantic-search#Vector-Similarity-Search","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Install-OpenAIKit":{"title":"Install OpenAIKit","abstract":[{"text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API.","type":"text"}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Install-OpenAIKit","url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Install-OpenAIKit"},"advanced-03-json.swift":{"fileType":"swift","fileName":"AdvancedStreaming.swift","syntax":"swift","identifier":"advanced-03-json.swift","content":["\/\/ JSONStreamParser.swift","import Foundation","","class JSONStreamParser {","    private var buffer = \"\"","    private var depth = 0","    ","    func parse(_ chunk: String) -> [Any]? {","        buffer += chunk","        var objects: [Any] = []","        ","        var startIndex = buffer.startIndex","        for (index, char) in buffer.enumerated() {","            switch char {","            case \"{\", \"[\":","                depth += 1","            case \"}\", \"]\":","                depth -= 1","                ","                if depth == 0 {","                    \/\/ Complete JSON object","                    let endIndex = buffer.index(buffer.startIndex, offsetBy: index + 1)","                    let jsonString = String(buffer[startIndex..<endIndex])","                    ","                    if let data = jsonString.data(using: .utf8),","                       let json = try? JSONSerialization.jsonObject(with: data) {","                        objects.append(json)","                    }","                    ","                    startIndex = endIndex","                }","            default:","                break","            }","        }","        ","        \/\/ Keep unparsed data in buffer","        if startIndex < buffer.endIndex {","            buffer = String(buffer[startIndex...])","        } else {","            buffer = \"\"","        }","        ","        return objects.isEmpty ? nil : objects","    }","}"],"type":"file","highlights":[{"line":1},{"line":4},{"line":6},{"line":8},{"line":10},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":43},{"line":44}]},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Create-a-Simple-Chat-Request":{"title":"Create a Simple Chat Request","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Create-a-Simple-Chat-Request","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Create-a-Simple-Chat-Request"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Cross-Platform-Streaming":{"title":"Cross-Platform Streaming","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Cross-Platform-Streaming","url":"\/tutorials\/openaikit\/06-streaming-responses#Cross-Platform-Streaming"},"ui-04-view.swift":{"fileType":"swift","syntax":"swift","type":"file","fileName":"StreamingChatView.swift","identifier":"ui-04-view.swift","highlights":[{"line":1},{"line":3},{"line":5},{"line":6},{"line":7},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":25},{"line":26},{"line":27},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":52},{"line":53},{"line":54},{"line":58},{"line":59}],"content":["\/\/ StreamingChatView.swift","import SwiftUI","import OpenAIKit","","struct StreamingChatView: View {","    @StateObject private var viewModel = StreamingViewModel()","    @State private var inputText = \"\"","    ","    var body: some View {","        VStack {","            ScrollView {","                VStack(alignment: .leading, spacing: 12) {","                    ForEach(viewModel.messages) { message in","                        StreamMessageRow(message: message)","                    }","                }","                .padding()","            }","            ","            HStack {","                TextField(\"Type a message...\", text: $inputText)","                    .textFieldStyle(.roundedBorder)","                    .disabled(viewModel.isStreaming)","                ","                Button(\"Send\") {","                    viewModel.sendMessage(inputText)","                    inputText = \"\"","                }","                .disabled(inputText.isEmpty || viewModel.isStreaming)","            }","            .padding()","        }","    }","}","","struct StreamMessageRow: View {","    let message: StreamingViewModel.StreamMessage","    ","    var body: some View {","        HStack {","            if message.role == .user {","                Spacer()","            }","            ","            VStack(alignment: message.role == .user ? .trailing : .leading) {","                Text(message.content)","                    .padding()","                    .background(message.role == .user ? Color.blue : Color.gray.opacity(0.2))","                    .foregroundColor(message.role == .user ? .white : .primary)","                    .cornerRadius(16)","                ","                if !message.isComplete {","                    ProgressView()","                        .scaleEffect(0.6)","                }","            }","            ","            if message.role == .assistant {","                Spacer()","            }","        }","    }","}"]},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations":{"title":"Building Conversations","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations","url":"\/tutorials\/openaikit\/05-building-conversations","estimatedTime":"18min"},"advanced-01-tokens.swift":{"fileType":"swift","fileName":"AdvancedStreaming.swift","syntax":"swift","identifier":"advanced-01-tokens.swift","content":["\/\/ TokenStreaming.swift","import Foundation","import OpenAIKit","","class TokenStreamProcessor {","    @Published var tokens: [String] = []","    @Published var tokenCount = 0","    @Published var tokensPerSecond: Double = 0","    ","    private var startTime: Date?","    private var tokenBuffer = \"\"","    ","    func processChunk(_ chunk: String) {","        if startTime == nil {","            startTime = Date()","        }","        ","        tokenBuffer += chunk","        ","        \/\/ Simple tokenization by spaces","        let newTokens = tokenBuffer.components(separatedBy: .whitespaces)","        if newTokens.count > 1 {","            tokens.append(contentsOf: newTokens.dropLast())","            tokenBuffer = newTokens.last ?? \"\"","            tokenCount = tokens.count","            ","            \/\/ Calculate tokens per second","            if let start = startTime {","                let elapsed = Date().timeIntervalSince(start)","                tokensPerSecond = elapsed > 0 ? Double(tokenCount) \/ elapsed : 0","            }","        }","    }","    ","    func finalize() {","        if !tokenBuffer.isEmpty {","            tokens.append(tokenBuffer)","            tokenCount = tokens.count","            tokenBuffer = \"\"","        }","    }","}"],"type":"file","highlights":[]},"advanced-05-cache.swift":{"fileType":"swift","syntax":"swift","type":"file","fileName":"AdvancedStreaming.swift","identifier":"advanced-05-cache.swift","highlights":[{"line":1},{"line":2},{"line":4},{"line":5},{"line":6},{"line":7},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":28},{"line":29},{"line":31},{"line":32},{"line":33},{"line":34},{"line":37},{"line":40},{"line":41},{"line":42}],"content":["\/\/ StreamCache.swift","import Foundation","","class StreamCache {","    private var cache: [String: CachedStream] = [:]","    private let maxCacheSize = 100","    private let cacheLifetime: TimeInterval = 3600 \/\/ 1 hour","    ","    struct CachedStream {","        let content: String","        let timestamp: Date","        let metadata: [String: Any]","    }","    ","    func store(key: String, content: String, metadata: [String: Any] = [:]) {","        cache[key] = CachedStream(","            content: content,","            timestamp: Date(),","            metadata: metadata","        )","        ","        \/\/ Clean old entries if cache is too large","        if cache.count > maxCacheSize {","            cleanOldEntries()","        }","    }","    ","    func retrieve(key: String) -> String? {","        guard let cached = cache[key] else { return nil }","        ","        \/\/ Check if cache is still valid","        if Date().timeIntervalSince(cached.timestamp) > cacheLifetime {","            cache.removeValue(forKey: key)","            return nil","        }","        ","        return cached.content","    }","    ","    private func cleanOldEntries() {","        let cutoffDate = Date().addingTimeInterval(-cacheLifetime)","        cache = cache.filter { $0.value.timestamp > cutoffDate }","    }","}"]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Check-Your-Understanding":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Check-Your-Understanding","type":"link","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"title":"Check Your Understanding","url":"\/tutorials\/openaikit\/09-building-semantic-search#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Advanced-Streaming-Features":{"title":"Advanced Streaming Features","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Advanced-Streaming-Features","url":"\/tutorials\/openaikit\/06-streaming-responses#Advanced-Streaming-Features"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Check-Your-Understanding":{"type":"link","url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Check-Your-Understanding","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Check-Your-Understanding","title":"Check Your Understanding","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}]},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#User-Friendly-Error-Messages":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#User-Friendly-Error-Messages","type":"section","role":"pseudoSymbol","title":"User-Friendly Error Messages","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"url":"\/tutorials\/openaikit\/04-handling-errors#User-Friendly-Error-Messages","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio":{"title":"Transcribing Audio","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio","url":"\/tutorials\/openaikit\/08-transcribing-audio","estimatedTime":"12min"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit","role":"project","title":"Setting Up OpenAIKit","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"estimatedTime":"10min","url":"\/tutorials\/openaikit\/01-setting-up-openaikit","kind":"project"},"stream-03-reconnect.swift":{"fileType":"swift","fileName":"StreamManager.swift","syntax":"swift","identifier":"stream-03-reconnect.swift","content":["\/\/ StreamReconnection.swift","import Foundation","import OpenAIKit","","class ReconnectingStream {","    private let maxRetries = 3","    private var retryCount = 0","    private let client: OpenAIKit","    ","    init(client: OpenAIKit) {","        self.client = client","    }","    ","    func streamWithReconnect(","        request: ChatCompletionRequest,","        onChunk: @escaping (String) -> Void,","        onError: @escaping (Error) -> Void","    ) async {","        while retryCount < maxRetries {","            do {","                let stream = try await client.chat.completionsStream(request)","                retryCount = 0 \/\/ Reset on success","                ","                for try await chunk in stream {","                    if let content = chunk.choices.first?.delta.content {","                        onChunk(content)","                    }","                }","                ","                break \/\/ Success, exit loop","            } catch {","                retryCount += 1","                ","                if retryCount >= maxRetries {","                    onError(error)","                    break","                }","                ","                \/\/ Wait before retry with exponential backoff","                let delay = pow(2.0, Double(retryCount))","                try? await Task.sleep(nanoseconds: UInt64(delay * 1_000_000_000))","            }","        }","    }","}"],"type":"file","highlights":[{"line":1},{"line":5},{"line":6},{"line":7},{"line":8},{"line":10},{"line":11},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":26},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":38},{"line":39},{"line":40},{"line":41},{"line":43}]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Best-Practices-for-Research-Prompting":{"title":"Best Practices for Research Prompting","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Best-Practices-for-Research-Prompting","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Best-Practices-for-Research-Prompting"}}}