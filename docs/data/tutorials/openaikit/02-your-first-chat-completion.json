{"metadata":{"title":"Your First Chat Completion","role":"project","category":"OpenAIKit","categoryPathComponent":"OpenAIKit-Tutorials"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion"},"hierarchy":{"modules":[{"projects":[{"sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Install-OpenAIKit","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Obtain-an-API-Key","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Configure-OpenAIKit","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Set-Environment-Variables","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Check-Your-Understanding","kind":"assessment"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit"},{"sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Create-a-Simple-Chat-Request","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Understanding-Chat-Messages","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Customizing-Model-Parameters","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Building-a-Chat-Interface","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Check-Your-Understanding","kind":"assessment"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion"},{"sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Understanding-OpenAIKit-Errors"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Implementing-Retry-Logic"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#User-Friendly-Error-Messages"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Building-a-Robust-Error-Handler"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Check-Your-Understanding"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Getting-Started"},{"projects":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations","sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Managing-Conversation-Context","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Implementing-Conversation-Memory","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Creating-Dynamic-Personas","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Advanced-Conversation-Patterns","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Building-a-Complete-Chatbot","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Check-Your-Understanding","kind":"assessment"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses","sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Understanding-Streaming","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Building-a-Streaming-UI","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Handling-Stream-Interruptions","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Advanced-Streaming-Features","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Cross-Platform-Streaming","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Check-Your-Understanding","kind":"assessment"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions","sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Understanding-Function-Calling"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Implementing-the-Weather-Function"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Handling-Function-Calls"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Building-the-Complete-Assistant"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Advanced-Function-Patterns"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Check-Your-Understanding"}]}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Chat-Completions"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images#Understanding-Image-Models"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images"},{"sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Basic-Audio-Transcription","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Advanced-Transcription-Options","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Audio-Translation","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Building-a-Voice-Notes-App","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Handling-Large-Audio-Files","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Check-Your-Understanding","kind":"assessment"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio"},{"sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Understanding-Embeddings","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Vector-Similarity-Search","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Vector-Database","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Semantic-Search-Engine","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Knowledge-Base-App","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Advanced-Techniques","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Check-Your-Understanding","kind":"assessment"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Multimodal-AI"},{"projects":[{"sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Introduction-to-DeepResearch","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Web-Search-Research","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Code-Interpreter-for-Data-Analysis","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Working-with-MCP-Servers","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Streaming-Research-Responses","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Best-Practices-for-Research-Prompting","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Security-and-Privacy-Considerations","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Check-Your-Understanding","kind":"assessment"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Advanced-Research"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials","paths":[["doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials","doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/$volume","doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Getting-Started"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/openaikit\/02-your-first-chat-completion"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[{"chapter":"Getting Started","content":[{"inlineContent":[{"text":"Make your first API call to generate text using OpenAI’s chat completion models.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You’ll learn how to construct requests, handle responses, and work with the chat format.","type":"text"}],"type":"paragraph"}],"kind":"hero","estimatedTimeInMinutes":15,"title":"Your First Chat Completion"},{"tasks":[{"contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"text":"Let’s start with a basic chat completion request to see how the API works.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia"}],"title":"Create a Simple Chat Request","anchor":"Create-a-Simple-Chat-Request","stepsSection":[{"runtimePreview":null,"code":"chat-01-empty.swift","caption":[],"content":[{"inlineContent":[{"text":"Create a new SwiftUI view to build our chat interface.","type":"text"}],"type":"paragraph"}],"type":"step","media":null},{"runtimePreview":null,"code":"chat-02-imports.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Import OpenAIKit and add a state variable for the response.","type":"text"}]}],"type":"step","media":null},{"runtimePreview":null,"code":"chat-03-ui.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Add a text field for user input and a button to send the message.","type":"text"}]}],"type":"step","media":null},{"runtimePreview":null,"code":"chat-04-function.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create an async function to send the chat request."}]}],"type":"step","media":null},{"runtimePreview":null,"code":"chat-05-request.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement the chat completion request with a simple user message."}]}],"type":"step","media":null},{"runtimePreview":null,"code":"chat-06-response.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Extract the response text and update the UI.","type":"text"}]}],"type":"step","media":null},{"runtimePreview":null,"code":"chat-07-complete.swift","caption":[],"content":[{"inlineContent":[{"text":"Add error handling to gracefully handle failures.","type":"text"}],"type":"paragraph"}],"type":"step","media":null}]},{"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Chat completions use a conversation format with different message roles."}]}],"mediaPosition":"trailing"}],"title":"Understanding Chat Messages","anchor":"Understanding-Chat-Messages","stepsSection":[{"code":"messages-01-user.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create a ChatMessage with the user role for questions from the user.","type":"text"}]}],"runtimePreview":null,"type":"step","caption":[]},{"code":"messages-02-system.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a system message to set the assistant’s behavior and context."}]}],"runtimePreview":null,"type":"step","caption":[]},{"code":"messages-03-conversation.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Build a multi-turn conversation by maintaining message history.","type":"text"}]}],"runtimePreview":null,"type":"step","caption":[]},{"code":"messages-04-assistant.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Include the assistant’s responses in the conversation."}]}],"runtimePreview":null,"type":"step","caption":[]}]},{"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Fine-tune the model’s behavior with parameters like temperature and max tokens."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Customizing Model Parameters","anchor":"Customizing-Model-Parameters","stepsSection":[{"content":[{"inlineContent":[{"type":"text","text":"Start with a basic request using default parameters."}],"type":"paragraph"}],"runtimePreview":null,"code":"params-01-basic.swift","type":"step","media":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Add temperature to control response creativity (0.0 to 2.0).","type":"text"}]}],"runtimePreview":null,"code":"params-02-temperature.swift","type":"step","media":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Limit response length with maxCompletionTokens."}]}],"runtimePreview":null,"code":"params-03-tokens.swift","type":"step","media":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use different models for different use cases.","type":"text"}]}],"runtimePreview":null,"code":"params-04-models.swift","type":"step","media":null,"caption":[]}]},{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Let’s create a complete chat interface that maintains conversation history."}],"type":"paragraph"}]}],"title":"Building a Chat Interface","anchor":"Building-a-Chat-Interface","stepsSection":[{"runtimePreview":null,"code":"interface-01-model.swift","media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Create a Message model to represent chat messages."}],"type":"paragraph"}],"caption":[]},{"runtimePreview":null,"code":"interface-02-viewmodel.swift","media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Build a view model to manage the conversation state."}]}],"caption":[]},{"runtimePreview":null,"code":"interface-03-send.swift","media":null,"type":"step","content":[{"inlineContent":[{"text":"Implement the sendMessage function with conversation history.","type":"text"}],"type":"paragraph"}],"caption":[]},{"runtimePreview":null,"code":"interface-04-view.swift","media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create the SwiftUI view with a message list and input field."}]}],"caption":[]},{"runtimePreview":null,"code":"interface-05-bubbles.swift","media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Add message bubbles for better visual presentation."}],"type":"paragraph"}],"caption":[]},{"runtimePreview":null,"code":"interface-06-complete.swift","media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Add loading states and disable input while processing.","type":"text"}]}],"caption":[]}]}],"kind":"tasks"},{"anchor":"Check-Your-Understanding","kind":"assessments","assessments":[{"title":[{"inlineContent":[{"type":"text","text":"Which role should you use for instructions that define the assistant’s behavior?"}],"type":"paragraph"}],"choices":[{"isCorrect":false,"justification":[{"inlineContent":[{"type":"text","text":"The user role is for messages from the end user."}],"type":"paragraph"}],"content":[{"inlineContent":[{"code":".user","type":"codeVoice"}],"type":"paragraph"}]},{"isCorrect":true,"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"System messages set the context and behavior for the assistant."}]}],"content":[{"type":"paragraph","inlineContent":[{"code":".system","type":"codeVoice"}]}]},{"isCorrect":false,"justification":[{"type":"paragraph","inlineContent":[{"text":"The assistant role is for responses from the AI model.","type":"text"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".assistant"}]}]}],"type":"multiple-choice","content":[]},{"title":[{"type":"paragraph","inlineContent":[{"type":"text","text":"What temperature value would you use for factual, consistent responses?"}]}],"choices":[{"content":[{"type":"paragraph","inlineContent":[{"code":"0.2","type":"codeVoice"}]}],"justification":[{"type":"paragraph","inlineContent":[{"text":"Lower temperatures (0.0-0.5) produce more focused and deterministic responses.","type":"text"}]}],"isCorrect":true},{"content":[{"inlineContent":[{"code":"1.5","type":"codeVoice"}],"type":"paragraph"}],"justification":[{"inlineContent":[{"type":"text","text":"Higher temperatures produce more creative but less consistent responses."}],"type":"paragraph"}],"isCorrect":false},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"2.0"}]}],"justification":[{"type":"paragraph","inlineContent":[{"text":"Maximum temperature produces very creative but potentially incoherent responses.","type":"text"}]}],"isCorrect":false}],"type":"multiple-choice","content":[]}]},{"action":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors","overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"isActive":true,"type":"reference"},"abstract":[{"text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API.","type":"text"}],"kind":"callToAction","featuredEyebrow":"Tutorial","title":"Handling Errors"}],"kind":"project","references":{"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Check-Your-Understanding":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Check-Your-Understanding","url":"\/tutorials\/openaikit\/08-transcribing-audio#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"title":"Check Your Understanding","type":"link"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Understanding-Streaming":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Understanding-Streaming","type":"section","role":"pseudoSymbol","title":"Understanding Streaming","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"url":"\/tutorials\/openaikit\/06-streaming-responses#Understanding-Streaming","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses","type":"topic","role":"project","title":"Streaming Responses","abstract":[{"text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated.","type":"text"}],"estimatedTime":"15min","url":"\/tutorials\/openaikit\/06-streaming-responses","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Building-a-Robust-Error-Handler":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Building-a-Robust-Error-Handler","type":"section","role":"pseudoSymbol","title":"Building a Robust Error Handler","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"url":"\/tutorials\/openaikit\/04-handling-errors#Building-a-Robust-Error-Handler","kind":"section"},"messages-02-system.swift":{"type":"file","identifier":"messages-02-system.swift","content":["\/\/ Creating different types of messages","import OpenAIKit","","\/\/ System message - sets the AI's behavior","let systemMessage = ChatMessage(","    role: .system,","    content: \"You are a helpful weather assistant. Always provide temperatures in both Celsius and Fahrenheit.\"",")","","\/\/ User message","let userMessage = ChatMessage(","    role: .user, ","    content: \"What's the weather like today?\"",")"],"highlights":[{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"fileName":"MessageExamples.swift","syntax":"swift","fileType":"swift"},"interface-04-view.swift":{"fileName":"ChatInterface.swift","type":"file","syntax":"swift","identifier":"interface-04-view.swift","content":["\/\/ ChatView.swift","import SwiftUI","","struct ChatView: View {","    @StateObject private var viewModel = ChatViewModel()","    @State private var inputText = \"\"","    ","    var body: some View {","        VStack {","            ScrollViewReader { proxy in","                ScrollView {","                    VStack(alignment: .leading, spacing: 12) {","                        ForEach(viewModel.messages) { message in","                            MessageBubble(message: message)","                        }","                        ","                        if viewModel.isLoading {","                            ProgressView()","                                .frame(maxWidth: .infinity)","                                .padding()","                        }","                    }","                    .padding()","                }","            }","            ","            HStack {","                TextField(\"Type a message...\", text: $inputText)","                    .textFieldStyle(.roundedBorder)","                ","                Button(\"Send\") {","                    guard !inputText.isEmpty else { return }","                    viewModel.sendMessage(inputText)","                    inputText = \"\"","                }","                .disabled(viewModel.isLoading || inputText.isEmpty)","            }","            .padding()","        }","    }","}"],"fileType":"swift","highlights":[{"line":1},{"line":2},{"line":4},{"line":5},{"line":6},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38}]},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Check-Your-Understanding":{"titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Check-Your-Understanding","type":"link","title":"Check Your Understanding","url":"\/tutorials\/openaikit\/04-handling-errors#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Code-Interpreter-for-Data-Analysis":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Code-Interpreter-for-Data-Analysis","role":"pseudoSymbol","title":"Code Interpreter for Data Analysis","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Code-Interpreter-for-Data-Analysis","kind":"section"},"interface-05-bubbles.swift":{"type":"file","content":["\/\/ MessageBubble.swift","import SwiftUI","import OpenAIKit","","struct MessageBubble: View {","    let message: ChatMessage","    ","    var body: some View {","        HStack {","            if message.role == .user {","                Spacer()","            }","            ","            VStack(alignment: message.role == .user ? .trailing : .leading) {","                Text(message.content)","                    .padding(12)","                    .background(backgroundColor)","                    .foregroundColor(textColor)","                    .cornerRadius(16)","                ","                Text(message.timestamp, style: .time)","                    .font(.caption2)","                    .foregroundColor(.secondary)","            }","            ","            if message.role == .assistant {","                Spacer()","            }","        }","    }","    ","    private var backgroundColor: Color {","        switch message.role {","        case .user:","            return .blue","        case .assistant:","            return Color(.systemGray5)","        case .system:","            return .orange","        case .tool:","            return .purple","        }","    }","    ","    private var textColor: Color {","        message.role == .user ? .white : .primary","    }","}"],"identifier":"interface-05-bubbles.swift","highlights":[{"line":1},{"line":3},{"line":5},{"line":6},{"line":9},{"line":10},{"line":11},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":21},{"line":22},{"line":23},{"line":25},{"line":26},{"line":27},{"line":28},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47}],"fileName":"ChatInterface.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis","role":"project","title":"Deep Research and Analysis","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"estimatedTime":"25min","url":"\/tutorials\/openaikit\/09-deep-research-analysis","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Advanced-Research":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Advanced-Research","role":"article","title":"Advanced Research","abstract":[],"url":"\/tutorials\/openaikit-tutorials\/advanced-research","kind":"article"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Building-a-Voice-Notes-App":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Building-a-Voice-Notes-App","role":"pseudoSymbol","title":"Building a Voice Notes App","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"url":"\/tutorials\/openaikit\/08-transcribing-audio#Building-a-Voice-Notes-App","kind":"section"},"chat-02-imports.swift":{"fileName":"ChatView.swift","type":"file","syntax":"swift","identifier":"chat-02-imports.swift","content":["\/\/ ChatExample.swift","import Foundation","import OpenAIKit","","class ChatExample {","    let openAI = OpenAIManager.shared.client","}"],"fileType":"swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7}]},"doc://OpenAIKit/tutorials/OpenAIKit/07-Generating-Images#Understanding-Image-Models":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images#Understanding-Image-Models","role":"pseudoSymbol","title":"Understanding Image Models","abstract":[{"type":"text","text":"Master image generation using DALL-E 2, DALL-E 3, and the advanced GPT Image 1 model. Learn to select the right model, handle errors professionally, and build production-ready image generation features."}],"url":"\/tutorials\/openaikit\/07-generating-images#Understanding-Image-Models","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Building-the-Complete-Assistant":{"title":"Building the Complete Assistant","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Building-the-Complete-Assistant","url":"\/tutorials\/openaikit\/03-working-with-functions#Building-the-Complete-Assistant"},"interface-06-complete.swift":{"type":"file","identifier":"interface-06-complete.swift","content":["\/\/ Complete Chat Interface","import SwiftUI","import OpenAIKit","","struct ChatView: View {","    @StateObject private var viewModel = ChatViewModel()","    @State private var inputText = \"\"","    @FocusState private var isInputFocused: Bool","    ","    var body: some View {","        VStack(spacing: 0) {","            \/\/ Header","            HStack {","                Text(\"OpenAI Chat\")","                    .font(.headline)","                Spacer()","                Button(\"Clear\") {","                    viewModel.messages.removeAll()","                }","            }","            .padding()","            .background(Color(.systemBackground))","            .shadow(radius: 1)","            ","            \/\/ Messages","            ScrollViewReader { proxy in","                ScrollView {","                    VStack(alignment: .leading, spacing: 12) {","                        ForEach(viewModel.messages) { message in","                            MessageBubble(message: message)","                                .id(message.id)","                        }","                        ","                        if viewModel.isLoading {","                            HStack {","                                ProgressView()","                                Text(\"Thinking...\")","                                    .foregroundColor(.secondary)","                            }","                            .frame(maxWidth: .infinity)","                            .padding()","                        }","                    }","                    .padding()","                    .onChange(of: viewModel.messages.count) { _ in","                        withAnimation {","                            proxy.scrollTo(viewModel.messages.last?.id)","                        }","                    }","                }","            }","            ","            \/\/ Error message","            if let error = viewModel.errorMessage {","                Text(error)","                    .foregroundColor(.red)","                    .font(.caption)","                    .padding(.horizontal)","            }","            ","            \/\/ Input area","            HStack(spacing: 12) {","                TextField(\"Type a message...\", text: $inputText)","                    .textFieldStyle(.roundedBorder)","                    .focused($isInputFocused)","                    .onSubmit {","                        sendMessage()","                    }","                ","                Button(action: sendMessage) {","                    Image(systemName: \"paperplane.fill\")","                        .foregroundColor(.white)","                        .frame(width: 44, height: 44)","                        .background(Circle().fill(.blue))","                }","                .disabled(viewModel.isLoading || inputText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)","            }","            .padding()","            .background(Color(.secondarySystemBackground))","        }","        .onAppear {","            isInputFocused = true","        }","    }","    ","    private func sendMessage() {","        let trimmedText = inputText.trimmingCharacters(in: .whitespacesAndNewlines)","        guard !trimmedText.isEmpty else { return }","        ","        viewModel.sendMessage(trimmedText)","        inputText = \"\"","    }","}"],"highlights":[{"line":1},{"line":5},{"line":6},{"line":7},{"line":8},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":17},{"line":18},{"line":19},{"line":21},{"line":22},{"line":23},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":81},{"line":82},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91}],"fileName":"ChatInterface.swift","syntax":"swift","fileType":"swift"},"interface-01-model.swift":{"fileName":"ChatInterface.swift","type":"file","syntax":"swift","content":["\/\/ ChatViewModel.swift","import Foundation","import OpenAIKit","","struct ChatMessage: Identifiable {","    let id = UUID()","    let role: ChatRole","    let content: String","    let timestamp = Date()","}","","class ChatViewModel: ObservableObject {","    @Published var messages: [ChatMessage] = []","    @Published var isLoading = false","    ","    private let openAI = OpenAIManager.shared.client","}"],"identifier":"interface-01-model.swift","fileType":"swift","highlights":[]},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Advanced-Conversation-Patterns":{"title":"Advanced Conversation Patterns","abstract":[{"text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions.","type":"text"}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Advanced-Conversation-Patterns","url":"\/tutorials\/openaikit\/05-building-conversations#Advanced-Conversation-Patterns"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Semantic-Search-Engine":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Semantic-Search-Engine","role":"pseudoSymbol","title":"Semantic Search Engine","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"url":"\/tutorials\/openaikit\/09-building-semantic-search#Semantic-Search-Engine","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Create-a-Simple-Chat-Request":{"title":"Create a Simple Chat Request","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Create-a-Simple-Chat-Request","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Create-a-Simple-Chat-Request"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Obtain-an-API-Key":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Obtain-an-API-Key","type":"section","role":"pseudoSymbol","title":"Obtain an API Key","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Obtain-an-API-Key","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Managing-Conversation-Context":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Managing-Conversation-Context","role":"pseudoSymbol","title":"Managing Conversation Context","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"url":"\/tutorials\/openaikit\/05-building-conversations#Managing-Conversation-Context","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Building-a-Complete-Chatbot":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Building-a-Complete-Chatbot","role":"pseudoSymbol","title":"Building a Complete Chatbot","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"url":"\/tutorials\/openaikit\/05-building-conversations#Building-a-Complete-Chatbot","kind":"section"},"chat-07-complete.swift":{"type":"file","content":["\/\/ ChatExample.swift","import Foundation","import OpenAIKit","","class ChatExample: ObservableObject {","    let openAI = OpenAIManager.shared.client","    @Published var isLoading = false","    @Published var errorMessage: String?","    ","    func sendMessage(_ message: String) async throws -> String {","        guard let openAI = openAI else { ","            throw OpenAIError.missingAPIKey ","        }","        ","        isLoading = true","        defer { isLoading = false }","        ","        let chatMessage = ChatMessage(role: .user, content: message)","        ","        let request = ChatCompletionRequest(","            messages: [chatMessage],","            model: Models.Chat.gpt4oMini","        )","        ","        do {","            let response = try await openAI.chat.completions(request)","            return response.choices.first?.message.content ?? \"No response\"","        } catch {","            errorMessage = error.localizedDescription","            throw error","        }","    }","}"],"identifier":"chat-07-complete.swift","highlights":[{"line":5},{"line":7},{"line":8},{"line":15},{"line":16},{"line":17},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31}],"fileName":"ChatView.swift","syntax":"swift","fileType":"swift"},"chat-03-ui.swift":{"fileName":"ChatView.swift","type":"file","syntax":"swift","identifier":"chat-03-ui.swift","content":["\/\/ ChatExample.swift","import Foundation","import OpenAIKit","import SwiftUI","","struct ChatView: View {","    @State private var userMessage = \"\"","    @State private var messages: [String] = []","    ","    var body: some View {","        VStack {","            ScrollView {","                ForEach(messages, id: \\.self) { message in","                    Text(message)","                        .padding()","                }","            }","            ","            HStack {","                TextField(\"Type a message\", text: $userMessage)","                Button(\"Send\") {","                    \/\/ Send message","                }","            }","            .padding()","        }","    }","}"],"fileType":"swift","highlights":[{"line":4},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}]},"chat-01-empty.swift":{"type":"file","identifier":"chat-01-empty.swift","content":["\/\/ ChatExample.swift"],"highlights":[],"fileName":"ChatView.swift","syntax":"swift","fileType":"swift"},"interface-03-send.swift":{"fileName":"ChatInterface.swift","type":"file","syntax":"swift","identifier":"interface-03-send.swift","content":["\/\/ ChatViewModel.swift","import Foundation","import OpenAIKit","","class ChatViewModel: ObservableObject {","    @Published var messages: [ChatMessage] = []","    @Published var isLoading = false","    @Published var errorMessage: String?","    ","    private let openAI = OpenAIManager.shared.client","    ","    func sendMessage(_ content: String) {","        messages.append(ChatMessage(role: .user, content: content))","        ","        Task {","            await getResponse()","        }","    }","    ","    @MainActor","    private func getResponse() async {","        guard let openAI = openAI else {","            errorMessage = \"OpenAI client not initialized\"","            return","        }","        ","        isLoading = true","        defer { isLoading = false }","        ","        let chatMessages = messages.map { message in","            ChatMessage(role: message.role, content: message.content)","        }","        ","        let request = ChatCompletionRequest(","            messages: chatMessages,","            model: \"gpt-4o-mini\"","        )","        ","        do {","            let response = try await openAI.chat.completions(request)","            if let content = response.choices.first?.message.content {","                messages.append(ChatMessage(role: .assistant, content: content))","            }","        } catch {","            errorMessage = error.localizedDescription","        }","    }","}"],"fileType":"swift","highlights":[{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46}]},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Cross-Platform-Streaming":{"title":"Cross-Platform Streaming","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Cross-Platform-Streaming","url":"\/tutorials\/openaikit\/06-streaming-responses#Cross-Platform-Streaming"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Implementing-Retry-Logic":{"title":"Implementing Retry Logic","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Implementing-Retry-Logic","url":"\/tutorials\/openaikit\/04-handling-errors#Implementing-Retry-Logic"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Understanding-Embeddings":{"title":"Understanding Embeddings","abstract":[{"text":"Create intelligent search systems using embeddings to find semantically similar content.","type":"text"}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Understanding-Embeddings","url":"\/tutorials\/openaikit\/09-building-semantic-search#Understanding-Embeddings"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit","role":"project","title":"Setting Up OpenAIKit","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"estimatedTime":"10min","url":"\/tutorials\/openaikit\/01-setting-up-openaikit","kind":"project"},"interface-02-viewmodel.swift":{"type":"file","identifier":"interface-02-viewmodel.swift","content":["\/\/ ChatViewModel.swift","import Foundation","import OpenAIKit","","struct ChatMessage: Identifiable {","    let id = UUID()","    let role: ChatRole","    let content: String","    let timestamp = Date()","}","","class ChatViewModel: ObservableObject {","    @Published var messages: [ChatMessage] = []","    @Published var isLoading = false","    @Published var errorMessage: String?","    ","    private let openAI = OpenAIManager.shared.client","    ","    func sendMessage(_ content: String) {","        \/\/ Add user message","        messages.append(ChatMessage(role: .user, content: content))","        ","        Task {","            await getResponse()","        }","    }","    ","    @MainActor","    private func getResponse() async {","        isLoading = true","        defer { isLoading = false }","        ","        \/\/ Implementation coming next","    }","}"],"highlights":[{"line":15},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}],"fileName":"ChatInterface.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Configure-OpenAIKit":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Configure-OpenAIKit","role":"pseudoSymbol","title":"Configure OpenAIKit","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Configure-OpenAIKit","kind":"section"},"params-04-models.swift":{"fileName":"Parameters.swift","type":"file","syntax":"swift","content":["\/\/ Different models for different use cases","import OpenAIKit","","\/\/ Fast, cost-effective model","let quickRequest = ChatCompletionRequest(","    messages: [ChatMessage(role: .user, content: \"Hello!\")],","    model: Models.Chat.gpt4oMini",")","","\/\/ More capable model for complex tasks","let complexRequest = ChatCompletionRequest(","    messages: [","        ChatMessage(role: .system, content: \"You are an expert programmer.\"),","        ChatMessage(role: .user, content: \"Explain the SOLID principles with code examples\")","    ],","    model: Models.Chat.gpt4o,","    temperature: 0.7",")","","\/\/ Multiple responses","let multipleRequest = ChatCompletionRequest(","    messages: [ChatMessage(role: .user, content: \"Suggest a name for my cat\")],","    model: Models.Chat.gpt4oMini,","    n: 3,  \/\/ Get 3 different suggestions","    temperature: 0.8",")"],"identifier":"params-04-models.swift","fileType":"swift","highlights":[{"line":1},{"line":4},{"line":5},{"line":6},{"line":7},{"line":10},{"line":11},{"line":13},{"line":14},{"line":16},{"line":17},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}]},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Advanced-Transcription-Options":{"title":"Advanced Transcription Options","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Advanced-Transcription-Options","url":"\/tutorials\/openaikit\/08-transcribing-audio#Advanced-Transcription-Options"},"chat-06-response.swift":{"type":"file","identifier":"chat-06-response.swift","content":["\/\/ ChatExample.swift","import Foundation","import OpenAIKit","","class ChatExample {","    let openAI = OpenAIManager.shared.client","    ","    func sendMessage(_ message: String) async throws -> String {","        guard let openAI = openAI else { ","            throw OpenAIError.missingAPIKey ","        }","        ","        let chatMessage = ChatMessage(role: .user, content: message)","        ","        let request = ChatCompletionRequest(","            messages: [chatMessage],","            model: Models.Chat.gpt4oMini","        )","        ","        let response = try await openAI.chat.completions(request)","        ","        return response.choices.first?.message.content ?? \"No response\"","    }","}"],"highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":20},{"line":21},{"line":22}],"fileName":"ChatView.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Handling-Function-Calls":{"title":"Handling Function Calls","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Handling-Function-Calls","url":"\/tutorials\/openaikit\/03-working-with-functions#Handling-Function-Calls"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Building-a-Streaming-UI":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Building-a-Streaming-UI","type":"section","role":"pseudoSymbol","title":"Building a Streaming UI","abstract":[{"text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated.","type":"text"}],"url":"\/tutorials\/openaikit\/06-streaming-responses#Building-a-Streaming-UI","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Building-a-Knowledge-Base-App":{"title":"Building a Knowledge Base App","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Knowledge-Base-App","url":"\/tutorials\/openaikit\/09-building-semantic-search#Building-a-Knowledge-Base-App"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Set-Environment-Variables":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Set-Environment-Variables","type":"section","role":"pseudoSymbol","title":"Set Environment Variables","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Set-Environment-Variables","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Customizing-Model-Parameters":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Customizing-Model-Parameters","role":"pseudoSymbol","title":"Customizing Model Parameters","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Customizing-Model-Parameters","kind":"section"},"params-02-temperature.swift":{"fileName":"Parameters.swift","type":"file","syntax":"swift","identifier":"params-02-temperature.swift","content":["\/\/ Controlling response creativity with temperature","import OpenAIKit","","\/\/ Low temperature (0.2) - More focused and deterministic","let preciseRequest = ChatCompletionRequest(","    messages: [","        ChatMessage(role: .user, content: \"What is 2+2?\")","    ],","    model: \"gpt-4o-mini\",","    temperature: 0.2",")","","\/\/ High temperature (0.9) - More creative and varied","let creativeRequest = ChatCompletionRequest(","    messages: [","        ChatMessage(role: .user, content: \"Write a creative story opening\")","    ],","    model: \"gpt-4o-mini\",","    temperature: 0.9",")"],"fileType":"swift","highlights":[{"line":1},{"line":4},{"line":5},{"line":7},{"line":9},{"line":10},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20}]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Building-a-Vector-Database":{"title":"Building a Vector Database","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Vector-Database","url":"\/tutorials\/openaikit\/09-building-semantic-search#Building-a-Vector-Database"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Handling-Stream-Interruptions":{"title":"Handling Stream Interruptions","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Handling-Stream-Interruptions","url":"\/tutorials\/openaikit\/06-streaming-responses#Handling-Stream-Interruptions"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Vector-Similarity-Search":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Vector-Similarity-Search","role":"pseudoSymbol","title":"Vector Similarity Search","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"url":"\/tutorials\/openaikit\/09-building-semantic-search#Vector-Similarity-Search","kind":"section"},"chat-04-function.swift":{"type":"file","content":["\/\/ ChatExample.swift","import Foundation","import OpenAIKit","","class ChatExample {","    let openAI = OpenAIManager.shared.client","    ","    func sendMessage(_ message: String) async throws -> String {","        \/\/ Implementation here","        return \"\"","    }","}"],"identifier":"chat-04-function.swift","highlights":[{"line":5},{"line":6},{"line":8},{"line":9},{"line":10}],"fileName":"ChatView.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Check-Your-Understanding":{"titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"url":"\/tutorials\/openaikit\/03-working-with-functions#Check-Your-Understanding","type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Check-Your-Understanding","title":"Check Your Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Chat-Completions":{"title":"Chat Completions","abstract":[],"role":"article","kind":"article","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Chat-Completions","url":"\/tutorials\/openaikit-tutorials\/chat-completions"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions","type":"topic","role":"project","title":"Working with Functions","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"estimatedTime":"20min","url":"\/tutorials\/openaikit\/03-working-with-functions","kind":"project"},"messages-04-assistant.swift":{"fileName":"MessageExamples.swift","type":"file","syntax":"swift","identifier":"messages-04-assistant.swift","content":["\/\/ Complete conversation management","import OpenAIKit","","class ConversationManager {","    var messages: [ChatMessage] = []","    ","    init(systemPrompt: String? = nil) {","        if let prompt = systemPrompt {","            messages.append(ChatMessage(role: .system, content: prompt))","        }","    }","    ","    func addUserMessage(_ content: String) {","        messages.append(ChatMessage(role: .user, content: content))","    }","    ","    func addAssistantMessage(_ content: String) {","        messages.append(ChatMessage(role: .assistant, content: content))","    }","    ","    func createRequest(model: String = \"gpt-4o-mini\") -> ChatCompletionRequest {","        ChatCompletionRequest(messages: messages, model: model)","    }","}"],"fileType":"swift","highlights":[{"line":1},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}]},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Getting-Started":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Getting-Started","role":"article","title":"Getting Started","abstract":[],"url":"\/tutorials\/openaikit-tutorials\/getting-started","kind":"article"},"messages-03-conversation.swift":{"type":"file","identifier":"messages-03-conversation.swift","content":["\/\/ Building a conversation with message history","import OpenAIKit","","var messages: [ChatMessage] = []","","\/\/ System prompt","messages.append(ChatMessage(","    role: .system,","    content: \"You are a helpful weather assistant.\"","))","","\/\/ User question","messages.append(ChatMessage(","    role: .user,","    content: \"What's the weather in New York?\"","))","","\/\/ Assistant response (from previous API call)","messages.append(ChatMessage(","    role: .assistant,","    content: \"The weather in New York is currently 72°F (22°C) with partly cloudy skies.\"","))","","\/\/ Follow-up question","messages.append(ChatMessage(","    role: .user,","    content: \"What about tomorrow?\"","))","","\/\/ Create request with full conversation","let request = ChatCompletionRequest(","    messages: messages,","    model: \"gpt-4o-mini\"",")"],"highlights":[{"line":1},{"line":4},{"line":5},{"line":6},{"line":7},{"line":9},{"line":10},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33}],"fileName":"MessageExamples.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Basic-Audio-Transcription":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Basic-Audio-Transcription","role":"pseudoSymbol","title":"Basic Audio Transcription","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"url":"\/tutorials\/openaikit\/08-transcribing-audio#Basic-Audio-Transcription","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Check-Your-Understanding":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"title":"Check Your Understanding","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Check-Your-Understanding","type":"link"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Check-Your-Understanding":{"type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Check-Your-Understanding","title":"Check Your Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"url":"\/tutorials\/openaikit\/09-building-semantic-search#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Install-OpenAIKit":{"title":"Install OpenAIKit","abstract":[{"text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API.","type":"text"}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Install-OpenAIKit","url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Install-OpenAIKit"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Check-Your-Understanding":{"titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"url":"\/tutorials\/openaikit\/05-building-conversations#Check-Your-Understanding","type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Check-Your-Understanding","title":"Check Your Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Creating-Dynamic-Personas":{"title":"Creating Dynamic Personas","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Creating-Dynamic-Personas","url":"\/tutorials\/openaikit\/05-building-conversations#Creating-Dynamic-Personas"},"doc://OpenAIKit/tutorials/OpenAIKit/07-Generating-Images":{"title":"Generating Images with AI","abstract":[{"type":"text","text":"Master image generation using DALL-E 2, DALL-E 3, and the advanced GPT Image 1 model. Learn to select the right model, handle errors professionally, and build production-ready image generation features."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images","url":"\/tutorials\/openaikit\/07-generating-images","estimatedTime":"25min"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Understanding-Function-Calling":{"title":"Understanding Function Calling","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Understanding-Function-Calling","url":"\/tutorials\/openaikit\/03-working-with-functions#Understanding-Function-Calling"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Introduction-to-DeepResearch":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Introduction-to-DeepResearch","role":"pseudoSymbol","title":"Introduction to DeepResearch","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Introduction-to-DeepResearch","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Handling-Large-Audio-Files":{"title":"Handling Large Audio Files","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Handling-Large-Audio-Files","url":"\/tutorials\/openaikit\/08-transcribing-audio#Handling-Large-Audio-Files"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Audio-Translation":{"title":"Audio Translation","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Audio-Translation","url":"\/tutorials\/openaikit\/08-transcribing-audio#Audio-Translation"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Implementing-the-Weather-Function":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Implementing-the-Weather-Function","role":"pseudoSymbol","title":"Implementing the Weather Function","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"url":"\/tutorials\/openaikit\/03-working-with-functions#Implementing-the-Weather-Function","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#User-Friendly-Error-Messages":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#User-Friendly-Error-Messages","type":"section","role":"pseudoSymbol","title":"User-Friendly Error Messages","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"url":"\/tutorials\/openaikit\/04-handling-errors#User-Friendly-Error-Messages","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Advanced-Streaming-Features":{"title":"Advanced Streaming Features","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Advanced-Streaming-Features","url":"\/tutorials\/openaikit\/06-streaming-responses#Advanced-Streaming-Features"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Web-Search-Research":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Web-Search-Research","role":"pseudoSymbol","title":"Web Search Research","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Web-Search-Research","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Understanding-Chat-Messages":{"title":"Understanding Chat Messages","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Understanding-Chat-Messages","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Understanding-Chat-Messages"},"chat-05-request.swift":{"fileName":"ChatView.swift","type":"file","syntax":"swift","identifier":"chat-05-request.swift","content":["\/\/ ChatExample.swift","import Foundation","import OpenAIKit","","class ChatExample {","    let openAI = OpenAIManager.shared.client","    ","    func sendMessage(_ message: String) async throws -> String {","        let chatMessage = ChatMessage(role: .user, content: message)","        ","        let request = ChatCompletionRequest(","            messages: [chatMessage],","            model: Models.Chat.gpt4oMini","        )","        ","        \/\/ Send request","        return \"\"","    }","}"],"fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16}]},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio":{"title":"Transcribing Audio","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio","url":"\/tutorials\/openaikit\/08-transcribing-audio","estimatedTime":"12min"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Working-with-MCP-Servers":{"title":"Working with MCP Servers","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Working-with-MCP-Servers","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Working-with-MCP-Servers"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Check-Your-Understanding":{"title":"Check Your Understanding","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Check-Your-Understanding","type":"link","url":"\/tutorials\/openaikit\/06-streaming-responses#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Advanced-Function-Patterns":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Advanced-Function-Patterns","role":"pseudoSymbol","title":"Advanced Function Patterns","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"url":"\/tutorials\/openaikit\/03-working-with-functions#Advanced-Function-Patterns","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Best-Practices-for-Research-Prompting":{"title":"Best Practices for Research Prompting","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Best-Practices-for-Research-Prompting","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Best-Practices-for-Research-Prompting"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Implementing-Conversation-Memory":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Implementing-Conversation-Memory","type":"section","role":"pseudoSymbol","title":"Implementing Conversation Memory","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"url":"\/tutorials\/openaikit\/05-building-conversations#Implementing-Conversation-Memory","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search","type":"topic","role":"project","title":"Building Semantic Search","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"estimatedTime":"20min","url":"\/tutorials\/openaikit\/09-building-semantic-search","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Check-Your-Understanding":{"title":"Check Your Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Check-Your-Understanding","type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Check-Your-Understanding":{"titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Check-Your-Understanding","type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Check-Your-Understanding","title":"Check Your Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Understanding-OpenAIKit-Errors":{"title":"Understanding OpenAIKit Errors","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Understanding-OpenAIKit-Errors","url":"\/tutorials\/openaikit\/04-handling-errors#Understanding-OpenAIKit-Errors"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Advanced-Techniques":{"title":"Advanced Techniques","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Advanced-Techniques","url":"\/tutorials\/openaikit\/09-building-semantic-search#Advanced-Techniques"},"params-01-basic.swift":{"type":"file","content":["\/\/ Basic parameters for chat completion","import OpenAIKit","","let request = ChatCompletionRequest(","    messages: [","        ChatMessage(role: .user, content: \"Tell me a joke\")","    ],","    model: \"gpt-4o-mini\"",")"],"identifier":"params-01-basic.swift","highlights":[],"fileName":"Parameters.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Multimodal-AI":{"title":"Multimodal AI","abstract":[],"role":"article","kind":"article","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Multimodal-AI","url":"\/tutorials\/openaikit-tutorials\/multimodal-ai"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Streaming-Research-Responses":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Streaming-Research-Responses","role":"pseudoSymbol","title":"Streaming Research Responses","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Streaming-Research-Responses","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations":{"title":"Building Conversations","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations","url":"\/tutorials\/openaikit\/05-building-conversations","estimatedTime":"18min"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials":{"title":"Welcome to OpenAIKit","abstract":[{"type":"text","text":"Learn how to integrate OpenAI’s powerful AI models into your Swift applications with OpenAIKit."}],"role":"overview","kind":"overview","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials","url":"\/tutorials\/openaikit-tutorials"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Security-and-Privacy-Considerations":{"title":"Security and Privacy Considerations","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Security-and-Privacy-Considerations","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Security-and-Privacy-Considerations"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors":{"title":"Handling Errors","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors","url":"\/tutorials\/openaikit\/04-handling-errors","estimatedTime":"12min"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Building-a-Chat-Interface":{"title":"Building a Chat Interface","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Building-a-Chat-Interface","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Building-a-Chat-Interface"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion","role":"project","title":"Your First Chat Completion","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"estimatedTime":"15min","url":"\/tutorials\/openaikit\/02-your-first-chat-completion","kind":"project"},"params-03-tokens.swift":{"fileName":"Parameters.swift","type":"file","syntax":"swift","content":["\/\/ Controlling response length with max tokens","import OpenAIKit","","\/\/ Short response","let shortRequest = ChatCompletionRequest(","    messages: [","        ChatMessage(role: .user, content: \"Explain quantum physics\")","    ],","    model: \"gpt-4o-mini\",","    maxTokens: 50  \/\/ Limit to ~40 words",")","","\/\/ Longer response","let detailedRequest = ChatCompletionRequest(","    messages: [","        ChatMessage(role: .user, content: \"Explain quantum physics\")","    ],","    model: \"gpt-4o-mini\",","    maxTokens: 500  \/\/ Allow for detailed explanation",")","","\/\/ With stop sequences","let listRequest = ChatCompletionRequest(","    messages: [","        ChatMessage(role: .user, content: \"List 3 benefits of exercise:\")","    ],","    model: \"gpt-4o-mini\",","    stop: [\"4.\", \"\\n\\n\"],  \/\/ Stop at \"4.\" or double newline","    temperature: 0.3",")"],"identifier":"params-03-tokens.swift","fileType":"swift","highlights":[{"line":1},{"line":4},{"line":5},{"line":7},{"line":10},{"line":13},{"line":14},{"line":16},{"line":19},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}]},"messages-01-user.swift":{"type":"file","content":["\/\/ Creating different types of messages","import OpenAIKit","","\/\/ User message - represents input from the user","let userMessage = ChatMessage(","    role: .user, ","    content: \"What's the weather like today?\"",")"],"identifier":"messages-01-user.swift","highlights":[],"fileName":"MessageExamples.swift","syntax":"swift","fileType":"swift"}}}