{"sections":[{"kind":"hero","chapter":"Chat Completions","estimatedTimeInMinutes":18,"title":"Building Conversations","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}]},{"type":"paragraph","inlineContent":[{"text":"Learn advanced patterns for building chatbots and conversational interfaces.","type":"text"}]}]},{"kind":"tasks","tasks":[{"anchor":"Managing-Conversation-Context","stepsSection":[{"type":"step","caption":[],"content":[{"inlineContent":[{"text":"Create a ConversationManager class to handle message history.","type":"text"}],"type":"paragraph"}],"code":"conversation-01-manager.swift","media":null,"runtimePreview":null},{"type":"step","caption":[],"content":[{"inlineContent":[{"text":"Add methods to append messages and maintain history.","type":"text"}],"type":"paragraph"}],"code":"conversation-02-messages.swift","media":null,"runtimePreview":null},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement token counting to stay within model limits."}]}],"code":"conversation-03-tokens.swift","media":null,"runtimePreview":null},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add context window management with sliding window."}]}],"code":"conversation-04-window.swift","media":null,"runtimePreview":null},{"type":"step","caption":[],"content":[{"inlineContent":[{"text":"Implement message summarization for long conversations.","type":"text"}],"type":"paragraph"}],"code":"conversation-05-summary.swift","media":null,"runtimePreview":null}],"contentSection":[{"content":[{"inlineContent":[{"text":"Effective conversations require careful management of context and message history.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Managing Conversation Context"},{"anchor":"Implementing-Conversation-Memory","stepsSection":[{"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create a memory system for storing key information.","type":"text"}]}],"runtimePreview":null,"code":"memory-01-system.swift","caption":[]},{"type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Add semantic memory with embeddings."}],"type":"paragraph"}],"runtimePreview":null,"code":"memory-02-semantic.swift","caption":[]},{"type":"step","media":null,"content":[{"inlineContent":[{"text":"Implement memory retrieval based on context.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"code":"memory-03-retrieval.swift","caption":[]},{"type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Add memory persistence with Core Data."}],"type":"paragraph"}],"runtimePreview":null,"code":"memory-04-persistence.swift","caption":[]}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Give your AI assistant the ability to remember important information across sessions."}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Implementing Conversation Memory"},{"anchor":"Creating-Dynamic-Personas","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Define a Persona struct with characteristics.","type":"text"}]}],"caption":[],"code":"persona-01-struct.swift","media":null,"runtimePreview":null,"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create system prompts from persona definitions."}]}],"caption":[],"code":"persona-02-prompts.swift","media":null,"runtimePreview":null,"type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Add persona-specific behaviors and responses."}],"type":"paragraph"}],"caption":[],"code":"persona-03-behaviors.swift","media":null,"runtimePreview":null,"type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Implement dynamic persona switching."}],"type":"paragraph"}],"caption":[],"code":"persona-04-switching.swift","media":null,"runtimePreview":null,"type":"step"}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Build AI assistants with consistent personalities and specialized knowledge."}]}]}],"title":"Creating Dynamic Personas"},{"anchor":"Advanced-Conversation-Patterns","stepsSection":[{"code":"state-01-machine.swift","type":"step","caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Create a conversation state machine."}],"type":"paragraph"}],"runtimePreview":null},{"code":"state-02-branching.swift","type":"step","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add conversation branching logic.","type":"text"}]}],"runtimePreview":null},{"code":"state-03-context.swift","type":"step","caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Implement context switching between topics."}],"type":"paragraph"}],"runtimePreview":null},{"code":"state-04-analytics.swift","type":"step","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add conversation analytics and insights.","type":"text"}]}],"runtimePreview":null}],"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"text":"Implement sophisticated conversation patterns like branching dialogues and context switching.","type":"text"}],"type":"paragraph"}]}],"title":"Advanced Conversation Patterns"},{"anchor":"Building-a-Complete-Chatbot","stepsSection":[{"code":"chatbot-01-class.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Create the main Chatbot class.","type":"text"}]}],"caption":[],"media":null,"runtimePreview":null,"type":"step"},{"code":"chatbot-02-integration.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integrate conversation management and memory."}]}],"caption":[],"media":null,"runtimePreview":null,"type":"step"},{"code":"chatbot-03-intents.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Add intent recognition and routing.","type":"text"}]}],"caption":[],"media":null,"runtimePreview":null,"type":"step"},{"code":"chatbot-04-flow.swift","content":[{"inlineContent":[{"text":"Implement conversation flow control.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"runtimePreview":null,"type":"step"},{"code":"chatbot-05-ui.swift","content":[{"inlineContent":[{"type":"text","text":"Create a SwiftUI interface for the chatbot."}],"type":"paragraph"}],"caption":[],"media":null,"runtimePreview":null,"type":"step"},{"code":"chatbot-06-export.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add conversation export and sharing."}]}],"caption":[],"media":null,"runtimePreview":null,"type":"step"}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Combine all patterns to create a sophisticated chatbot with memory, personas, and state management.","type":"text"}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Building a Complete Chatbot"}]},{"kind":"assessments","anchor":"Check-Your-Understanding","assessments":[{"choices":[{"isCorrect":false,"justification":[{"inlineContent":[{"type":"text","text":"While tokens affect cost, the primary concern is staying within model limits."}],"type":"paragraph"}],"content":[{"inlineContent":[{"type":"text","text":"To calculate API costs."}],"type":"paragraph"}]},{"isCorrect":true,"justification":[{"inlineContent":[{"type":"text","text":"Models have token limits, and exceeding them causes errors or truncation."}],"type":"paragraph"}],"content":[{"inlineContent":[{"type":"text","text":"To ensure conversations stay within the model’s context window."}],"type":"paragraph"}]},{"isCorrect":false,"justification":[{"type":"paragraph","inlineContent":[{"text":"Token count doesn’t directly affect response speed.","type":"text"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To improve response speed."}]}]}],"type":"multiple-choice","title":[{"type":"paragraph","inlineContent":[{"text":"Why is token counting important for conversation management?","type":"text"}]}],"content":[]},{"choices":[{"isCorrect":false,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Keep all messages forever."}]}],"justification":[{"type":"paragraph","inlineContent":[{"text":"This will eventually exceed token limits and increase costs.","type":"text"}]}]},{"isCorrect":true,"content":[{"type":"paragraph","inlineContent":[{"text":"Use a sliding window with optional summarization.","type":"text"}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This maintains context while staying within limits."}]}]},{"isCorrect":false,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start a new conversation every few messages."}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This loses important context and continuity."}]}]}],"type":"multiple-choice","title":[{"type":"paragraph","inlineContent":[{"type":"text","text":"What’s the best approach for handling very long conversations?"}]}],"content":[]}]},{"kind":"callToAction","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"action":{"isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses","type":"reference","overridingTitle":"Get started"},"title":"Streaming Responses","featuredEyebrow":"Tutorial"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/openaikit\/05-building-conversations"]}],"kind":"project","identifier":{"url":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations","interfaceLanguage":"swift"},"metadata":{"role":"project","category":"OpenAIKit","categoryPathComponent":"OpenAIKit-Tutorials","title":"Building Conversations"},"hierarchy":{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials","modules":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Getting-Started","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Install-OpenAIKit"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Obtain-an-API-Key"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Configure-OpenAIKit"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Set-Environment-Variables"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Check-Your-Understanding"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit"},{"sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Create-a-Simple-Chat-Request"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Understanding-Chat-Messages"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Customizing-Model-Parameters"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Building-a-Chat-Interface"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Check-Your-Understanding"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion"},{"sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Understanding-OpenAIKit-Errors","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Implementing-Retry-Logic","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#User-Friendly-Error-Messages","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Building-a-Robust-Error-Handler","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Check-Your-Understanding","kind":"assessment"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Chat-Completions","projects":[{"sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Managing-Conversation-Context","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Implementing-Conversation-Memory","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Creating-Dynamic-Personas","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Advanced-Conversation-Patterns","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Building-a-Complete-Chatbot","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Check-Your-Understanding","kind":"assessment"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations"},{"sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Understanding-Streaming","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Building-a-Streaming-UI","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Handling-Stream-Interruptions","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Advanced-Streaming-Features","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Cross-Platform-Streaming","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Check-Your-Understanding","kind":"assessment"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses"},{"sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Understanding-Function-Calling"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Implementing-the-Weather-Function"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Handling-Function-Calls"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Building-the-Complete-Assistant"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Advanced-Function-Patterns"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Check-Your-Understanding"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Multimodal-AI","projects":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images","sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images#Understanding-Image-Models","kind":"task"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio","sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Basic-Audio-Transcription"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Advanced-Transcription-Options"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Audio-Translation"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Building-a-Voice-Notes-App"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Handling-Large-Audio-Files"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Check-Your-Understanding"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search","sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Understanding-Embeddings","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Vector-Similarity-Search","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Vector-Database","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Semantic-Search-Engine","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Knowledge-Base-App","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Advanced-Techniques","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Check-Your-Understanding","kind":"assessment"}]}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Advanced-Research","projects":[{"sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Introduction-to-DeepResearch","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Web-Search-Research","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Code-Interpreter-for-Data-Analysis","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Working-with-MCP-Servers","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Streaming-Research-Responses","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Best-Practices-for-Research-Prompting","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Security-and-Privacy-Considerations","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Check-Your-Understanding","kind":"assessment"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis"}]}],"paths":[["doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials","doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/$volume","doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Chat-Completions"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Multimodal-AI":{"title":"Multimodal AI","abstract":[],"role":"article","kind":"article","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Multimodal-AI","url":"\/tutorials\/openaikit-tutorials\/multimodal-ai"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Advanced-Techniques":{"title":"Advanced Techniques","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Advanced-Techniques","url":"\/tutorials\/openaikit\/09-building-semantic-search#Advanced-Techniques"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Check-Your-Understanding":{"title":"Check Your Understanding","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Check-Your-Understanding","type":"link","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"url":"\/tutorials\/openaikit\/06-streaming-responses#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Building-a-Vector-Database":{"title":"Building a Vector Database","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Vector-Database","url":"\/tutorials\/openaikit\/09-building-semantic-search#Building-a-Vector-Database"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Building-a-Voice-Notes-App":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Building-a-Voice-Notes-App","role":"pseudoSymbol","title":"Building a Voice Notes App","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"url":"\/tutorials\/openaikit\/08-transcribing-audio#Building-a-Voice-Notes-App","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Understanding-Function-Calling":{"title":"Understanding Function Calling","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Understanding-Function-Calling","url":"\/tutorials\/openaikit\/03-working-with-functions#Understanding-Function-Calling"},"doc://OpenAIKit/tutorials/OpenAIKit/07-Generating-Images#Understanding-Image-Models":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images#Understanding-Image-Models","role":"pseudoSymbol","title":"Understanding Image Models","abstract":[{"type":"text","text":"Master image generation using DALL-E 2, DALL-E 3, and the advanced GPT Image 1 model. Learn to select the right model, handle errors professionally, and build production-ready image generation features."}],"url":"\/tutorials\/openaikit\/07-generating-images#Understanding-Image-Models","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Check-Your-Understanding":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Check-Your-Understanding","type":"link","title":"Check Your Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"url":"\/tutorials\/openaikit\/08-transcribing-audio#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Building-a-Robust-Error-Handler":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Building-a-Robust-Error-Handler","type":"section","role":"pseudoSymbol","title":"Building a Robust Error Handler","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"url":"\/tutorials\/openaikit\/04-handling-errors#Building-a-Robust-Error-Handler","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses","type":"topic","role":"project","title":"Streaming Responses","abstract":[{"text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated.","type":"text"}],"estimatedTime":"15min","url":"\/tutorials\/openaikit\/06-streaming-responses","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit","role":"project","title":"Setting Up OpenAIKit","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"estimatedTime":"10min","url":"\/tutorials\/openaikit\/01-setting-up-openaikit","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Check-Your-Understanding":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Check-Your-Understanding","type":"link","title":"Check Your Understanding","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}]},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Building-a-Chat-Interface":{"title":"Building a Chat Interface","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Building-a-Chat-Interface","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Building-a-Chat-Interface"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Best-Practices-for-Research-Prompting":{"title":"Best Practices for Research Prompting","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Best-Practices-for-Research-Prompting","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Best-Practices-for-Research-Prompting"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Handling-Large-Audio-Files":{"title":"Handling Large Audio Files","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Handling-Large-Audio-Files","url":"\/tutorials\/openaikit\/08-transcribing-audio#Handling-Large-Audio-Files"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Implementing-Conversation-Memory":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Implementing-Conversation-Memory","type":"section","role":"pseudoSymbol","title":"Implementing Conversation Memory","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"url":"\/tutorials\/openaikit\/05-building-conversations#Implementing-Conversation-Memory","kind":"section"},"chatbot-06-export.swift":{"type":"file","identifier":"chatbot-06-export.swift","content":["\/\/ ConversationExporter.swift","import Foundation","","class ConversationExporter {","    enum ExportFormat {","        case markdown","        case json","        case csv","    }","    ","    func export(messages: [ChatMessage], format: ExportFormat) -> Data? {","        switch format {","        case .markdown:","            return exportAsMarkdown(messages: messages)","        case .json:","            return exportAsJSON(messages: messages)","        case .csv:","            return exportAsCSV(messages: messages)","        }","    }","    ","    private func exportAsMarkdown(messages: [ChatMessage]) -> Data? {","        var markdown = \"# Conversation Export\\n\\n\"","        ","        for message in messages {","            switch message.role {","            case .user:","                markdown += \"**You**: \\(message.content)\\n\\n\"","            case .assistant:","                markdown += \"**Assistant**: \\(message.content)\\n\\n\"","            default:","                break","            }","        }","        ","        return markdown.data(using: .utf8)","    }","    ","    private func exportAsJSON(messages: [ChatMessage]) -> Data? {","        let encoder = JSONEncoder()","        encoder.outputFormatting = .prettyPrinted","        return try? encoder.encode(messages)","    }","    ","    private func exportAsCSV(messages: [ChatMessage]) -> Data? {","        var csv = \"Role,Content\\n\"","        ","        for message in messages {","            let content = message.content.replacingOccurrences(of: \"\\\"\", with: \"\\\"\\\"\")","            csv += \"\\\"\\(message.role.rawValue)\\\",\\\"\\(content)\\\"\\n\"","        }","        ","        return csv.data(using: .utf8)","    }","}"],"highlights":[{"line":1},{"line":2},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":35},{"line":36},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":52},{"line":53}],"fileName":"Chatbot.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Create-a-Simple-Chat-Request":{"title":"Create a Simple Chat Request","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Create-a-Simple-Chat-Request","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Create-a-Simple-Chat-Request"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Working-with-MCP-Servers":{"title":"Working with MCP Servers","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Working-with-MCP-Servers","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Working-with-MCP-Servers"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Streaming-Research-Responses":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Streaming-Research-Responses","role":"pseudoSymbol","title":"Streaming Research Responses","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Streaming-Research-Responses","kind":"section"},"memory-02-semantic.swift":{"syntax":"swift","highlights":[{"line":1},{"line":3},{"line":5},{"line":6},{"line":7},{"line":8},{"line":10},{"line":11},{"line":12},{"line":13},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":22},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":35},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":64},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100}],"fileName":"MemorySystem.swift","fileType":"swift","identifier":"memory-02-semantic.swift","type":"file","content":["\/\/ SemanticMemory.swift","import Foundation","import OpenAIKit","","class SemanticMemory: MemoryStore {","    private let openAI: OpenAIKit","    private var memories: [MemoryItem] = []","    private var embeddings: [UUID: [Float]] = [:]","    ","    init(openAI: OpenAIKit) {","        self.openAI = openAI","    }","    ","    func store(key: String, value: Any) async {","        let valueString = String(describing: value)","        ","        \/\/ Generate embedding for the value","        let embedding = await generateEmbedding(for: valueString)","        ","        let item = MemoryItem(","            key: key,","            value: valueString,","            timestamp: Date(),","            metadata: [:],","            relevanceScore: nil","        )","        ","        memories.append(item)","        if let embedding = embedding {","            embeddings[item.id] = embedding","        }","    }","    ","    func retrieve(key: String) async -> Any? {","        memories.first { $0.key == key }?.value","    }","    ","    func search(query: String) async -> [MemoryItem] {","        \/\/ Generate embedding for query","        guard let queryEmbedding = await generateEmbedding(for: query) else {","            \/\/ Fallback to text search","            return memories.filter { item in","                item.key.localizedCaseInsensitiveContains(query) ||","                item.value.localizedCaseInsensitiveContains(query)","            }","        }","        ","        \/\/ Calculate similarity scores","        let scoredMemories = memories.compactMap { item -> (MemoryItem, Double)? in","            guard let itemEmbedding = embeddings[item.id] else { return nil }","            let similarity = cosineSimilarity(queryEmbedding, itemEmbedding)","            return (item, similarity)","        }","        ","        \/\/ Return top matches","        return scoredMemories","            .sorted { $0.1 > $1.1 }","            .prefix(10)","            .map { $0.0 }","    }","    ","    func clear() async {","        memories.removeAll()","        embeddings.removeAll()","    }","    ","    private func generateEmbedding(for text: String) async -> [Float]? {","        let request = EmbeddingRequest(","            input: text,","            model: \"text-embedding-3-small\"","        )","        ","        do {","            let response = try await openAI.embeddings.create(request)","            if let embedding = response.data.first?.embedding {","                return embedding.floatValues ?? []","            }","        } catch {","            print(\"Failed to generate embedding: \\(error)\")","        }","        ","        return nil","    }","    ","    private func cosineSimilarity(_ a: [Float], _ b: [Float]) -> Double {","        guard a.count == b.count else { return 0 }","        ","        var dotProduct: Float = 0","        var normA: Float = 0","        var normB: Float = 0","        ","        for i in 0..<a.count {","            dotProduct += a[i] * b[i]","            normA += a[i] * a[i]","            normB += b[i] * b[i]","        }","        ","        guard normA > 0 && normB > 0 else { return 0 }","        return Double(dotProduct \/ (sqrt(normA) * sqrt(normB)))","    }","}"]},"conversation-01-manager.swift":{"type":"file","content":["\/\/ ConversationManager.swift","import Foundation","import OpenAIKit","","class ConversationManager: ObservableObject {","    @Published var messages: [ChatMessage] = []","    @Published var conversationId = UUID()","    ","    init(systemPrompt: String? = nil) {","        if let prompt = systemPrompt {","            messages.append(ChatMessage(role: .system, content: prompt))","        }","    }","}"],"identifier":"conversation-01-manager.swift","highlights":[],"fileName":"ConversationManager.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis","role":"project","title":"Deep Research and Analysis","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"estimatedTime":"25min","url":"\/tutorials\/openaikit\/09-deep-research-analysis","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/07-Generating-Images":{"title":"Generating Images with AI","abstract":[{"type":"text","text":"Master image generation using DALL-E 2, DALL-E 3, and the advanced GPT Image 1 model. Learn to select the right model, handle errors professionally, and build production-ready image generation features."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images","url":"\/tutorials\/openaikit\/07-generating-images","estimatedTime":"25min"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Advanced-Function-Patterns":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Advanced-Function-Patterns","role":"pseudoSymbol","title":"Advanced Function Patterns","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"url":"\/tutorials\/openaikit\/03-working-with-functions#Advanced-Function-Patterns","kind":"section"},"state-02-branching.swift":{"syntax":"swift","highlights":[{"line":1},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":11},{"line":12},{"line":13},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}],"fileName":"ConversationStateMachine.swift","fileType":"swift","identifier":"state-02-branching.swift","type":"file","content":["\/\/ BranchingConversation.swift","import Foundation","","struct ConversationNode: Identifiable {","    let id = UUID()","    let content: String","    let speaker: ChatRole","    var children: [ConversationNode] = []","}","","class BranchingConversationManager: ObservableObject {","    @Published var rootNode: ConversationNode","    @Published var currentPath: [ConversationNode] = []","    ","    init(systemPrompt: String) {","        self.rootNode = ConversationNode(","            content: systemPrompt,","            speaker: .system","        )","        self.currentPath = [rootNode]","    }","    ","    func addMessage(_ content: String, role: ChatRole) {","        let newNode = ConversationNode(content: content, speaker: role)","        if let parent = currentPath.last {","            \/\/ In real implementation, would update tree structure","            currentPath.append(newNode)","        }","    }","    ","    func branch(from node: ConversationNode) {","        \/\/ Create new branch from node","        currentPath = [rootNode, node]","    }","}"]},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions","type":"topic","role":"project","title":"Working with Functions","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"estimatedTime":"20min","url":"\/tutorials\/openaikit\/03-working-with-functions","kind":"project"},"chatbot-01-class.swift":{"type":"file","content":["\/\/ CompleteChatbot.swift","import Foundation","import OpenAIKit","","class CompleteChatbot: ObservableObject {","    @Published var messages: [ChatMessage] = []","    @Published var isTyping = false","    @Published var currentPersona: Persona = .helpful","    @Published var context = ConversationContext()","    ","    private let openAI: OpenAIKit","    private let contextManager = ContextManager()","    private let analytics = ConversationAnalytics()","    ","    init(openAI: OpenAIKit) {","        self.openAI = openAI","    }","    ","    func sendMessage(_ content: String) async throws -> String {","        contextManager.updateContext(from: content, role: .user)","        context = contextManager.currentContext","        ","        messages.append(ChatMessage(role: .user, content: content))","        analytics.trackMessage(role: .user, content: content, context: context)","        ","        isTyping = true","        defer { isTyping = false }","        ","        let request = ChatCompletionRequest(","            messages: messages,","            model: \"gpt-4o-mini\",","            temperature: currentPersona.temperature","        )","        ","        let response = try await openAI.chat.completions(request)","        guard let assistantContent = response.choices.first?.message.content else {","            throw ChatError.noContent","        }","        ","        messages.append(ChatMessage(role: .assistant, content: assistantContent))","        analytics.trackMessage(role: .assistant, content: assistantContent, context: context)","        ","        return assistantContent","    }","}"],"identifier":"chatbot-01-class.swift","highlights":[],"fileName":"Chatbot.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Vector-Similarity-Search":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Vector-Similarity-Search","role":"pseudoSymbol","title":"Vector Similarity Search","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"url":"\/tutorials\/openaikit\/09-building-semantic-search#Vector-Similarity-Search","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Introduction-to-DeepResearch":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Introduction-to-DeepResearch","role":"pseudoSymbol","title":"Introduction to DeepResearch","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Introduction-to-DeepResearch","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials":{"title":"Welcome to OpenAIKit","abstract":[{"type":"text","text":"Learn how to integrate OpenAI’s powerful AI models into your Swift applications with OpenAIKit."}],"role":"overview","kind":"overview","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials","url":"\/tutorials\/openaikit-tutorials"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Check-Your-Understanding":{"title":"Check Your Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Check-Your-Understanding","url":"\/tutorials\/openaikit\/04-handling-errors#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Check-Your-Understanding":{"type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"title":"Check Your Understanding","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Understanding-Streaming":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Understanding-Streaming","type":"section","role":"pseudoSymbol","title":"Understanding Streaming","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"url":"\/tutorials\/openaikit\/06-streaming-responses#Understanding-Streaming","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Building-the-Complete-Assistant":{"title":"Building the Complete Assistant","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Building-the-Complete-Assistant","url":"\/tutorials\/openaikit\/03-working-with-functions#Building-the-Complete-Assistant"},"conversation-04-window.swift":{"syntax":"swift","highlights":[{"line":1},{"line":8},{"line":10},{"line":11},{"line":14},{"line":16},{"line":17},{"line":18},{"line":23},{"line":24},{"line":25},{"line":29},{"line":30},{"line":31},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":41},{"line":42},{"line":43},{"line":44},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61}],"fileName":"ConversationManager.swift","fileType":"swift","identifier":"conversation-04-window.swift","type":"file","content":["\/\/ ConversationManager.swift - Sliding window context","import Foundation","import OpenAIKit","","class ConversationManager: ObservableObject {","    @Published var messages: [ChatMessage] = []","    @Published var conversationId = UUID()","    @Published var contextWindow: [ChatMessage] = []","    ","    private let windowSize = 10 \/\/ Number of messages to keep in context","    private let systemPrompt: String?","    ","    init(systemPrompt: String? = nil) {","        self.systemPrompt = systemPrompt","        if let prompt = systemPrompt {","            let systemMessage = ChatMessage(role: .system, content: prompt)","            messages.append(systemMessage)","            contextWindow.append(systemMessage)","        }","    }","    ","    func addUserMessage(_ content: String) {","        let message = ChatMessage(role: .user, content: content)","        messages.append(message)","        updateContextWindow()","    }","    ","    func addAssistantMessage(_ content: String) {","        let message = ChatMessage(role: .assistant, content: content)","        messages.append(message)","        updateContextWindow()","    }","    ","    private func updateContextWindow() {","        contextWindow = []","        ","        \/\/ Always include system prompt","        if let systemMessage = messages.first(where: { $0.role == .system }) {","            contextWindow.append(systemMessage)","        }","        ","        \/\/ Add recent messages","        let recentMessages = messages.filter { $0.role != .system }.suffix(windowSize)","        contextWindow.append(contentsOf: recentMessages)","    }","    ","    func getContextForRequest() -> [ChatMessage] {","        return contextWindow","    }","    ","    func searchMessages(query: String) -> [ChatMessage] {","        messages.filter { message in","            message.content.localizedCaseInsensitiveContains(query)","        }","    }","    ","    \/\/ Export conversation","    func exportConversation() -> String {","        messages.map { message in","            \"\\(message.role.rawValue.uppercased()): \\(message.content)\"","        }.joined(separator: \"\\n\\n\")","    }","}"]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search","type":"topic","role":"project","title":"Building Semantic Search","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"estimatedTime":"20min","url":"\/tutorials\/openaikit\/09-building-semantic-search","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Handling-Function-Calls":{"title":"Handling Function Calls","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Handling-Function-Calls","url":"\/tutorials\/openaikit\/03-working-with-functions#Handling-Function-Calls"},"chatbot-05-ui.swift":{"type":"file","identifier":"chatbot-05-ui.swift","content":["\/\/ CompleteChatbotView.swift","import SwiftUI","import OpenAIKit","","struct CompleteChatbotView: View {","    @StateObject private var chatbot: CompleteChatbot","    @State private var inputText = \"\"","    ","    init(openAI: OpenAIKit) {","        _chatbot = StateObject(wrappedValue: CompleteChatbot(openAI: openAI))","    }","    ","    var body: some View {","        VStack {","            \/\/ Header","            HStack {","                Text(\"AI Assistant\")","                    .font(.title2)","                    .fontWeight(.semibold)","                Spacer()","                Text(chatbot.currentPersona.name)","                    .font(.caption)","                    .padding(.horizontal, 8)","                    .padding(.vertical, 4)","                    .background(Color.blue.opacity(0.1))","                    .cornerRadius(12)","            }","            .padding()","            ","            \/\/ Messages","            ScrollView {","                VStack(alignment: .leading, spacing: 12) {","                    ForEach(chatbot.messages.filter { $0.role != .system }, id: \\.content) { message in","                        MessageRow(message: message)","                    }","                    ","                    if chatbot.isTyping {","                        TypingIndicator()","                    }","                }","                .padding()","            }","            ","            \/\/ Input","            HStack {","                TextField(\"Type a message...\", text: $inputText)","                    .textFieldStyle(.roundedBorder)","                ","                Button(\"Send\") {","                    Task {","                        _ = try? await chatbot.sendMessage(inputText)","                        inputText = \"\"","                    }","                }","                .disabled(inputText.isEmpty || chatbot.isTyping)","            }","            .padding()","        }","    }","}","","struct MessageRow: View {","    let message: ChatMessage","    ","    var body: some View {","        HStack {","            if message.role == .user {","                Spacer()","            }","            ","            Text(message.content)","                .padding()","                .background(message.role == .user ? Color.blue : Color.gray.opacity(0.2))","                .foregroundColor(message.role == .user ? .white : .primary)","                .cornerRadius(16)","            ","            if message.role == .assistant {","                Spacer()","            }","        }","    }","}","","struct TypingIndicator: View {","    var body: some View {","        HStack {","            ForEach(0..<3) { _ in","                Circle()","                    .fill(Color.gray)","                    .frame(width: 8, height: 8)","            }","        }","        .padding()","    }","}"],"highlights":[{"line":1},{"line":2},{"line":3},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":62},{"line":63},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":93}],"fileName":"Chatbot.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Handling-Stream-Interruptions":{"title":"Handling Stream Interruptions","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Handling-Stream-Interruptions","url":"\/tutorials\/openaikit\/06-streaming-responses#Handling-Stream-Interruptions"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Creating-Dynamic-Personas":{"title":"Creating Dynamic Personas","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Creating-Dynamic-Personas","url":"\/tutorials\/openaikit\/05-building-conversations#Creating-Dynamic-Personas"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Understanding-Chat-Messages":{"title":"Understanding Chat Messages","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Understanding-Chat-Messages","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Understanding-Chat-Messages"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Advanced-Conversation-Patterns":{"title":"Advanced Conversation Patterns","abstract":[{"text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions.","type":"text"}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Advanced-Conversation-Patterns","url":"\/tutorials\/openaikit\/05-building-conversations#Advanced-Conversation-Patterns"},"state-04-analytics.swift":{"syntax":"swift","highlights":[{"line":1},{"line":3},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":20},{"line":21},{"line":23},{"line":24},{"line":25},{"line":26},{"line":28},{"line":31},{"line":32},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":43},{"line":44},{"line":45},{"line":46},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54}],"fileName":"ConversationStateMachine.swift","fileType":"swift","identifier":"state-04-analytics.swift","type":"file","content":["\/\/ ConversationAnalytics.swift","import Foundation","import SwiftUI","","struct ConversationMetrics {","    let messageCount: Int","    let averageResponseTime: TimeInterval","    let topicFrequency: [String: Int]","    let userEngagement: Double","}","","class ConversationAnalytics: ObservableObject {","    @Published var metrics = ConversationMetrics(","        messageCount: 0,","        averageResponseTime: 0,","        topicFrequency: [:],","        userEngagement: 0","    )","    ","    private var messageTimes: [(Date, ChatRole)] = []","    private var topics: [String] = []","    ","    func trackMessage(role: ChatRole, content: String, context: ConversationContext) {","        messageTimes.append((Date(), role))","        if let topic = context.topic {","            topics.append(topic)","        }","        updateMetrics()","    }","    ","    private func updateMetrics() {","        let messageCount = messageTimes.count","        ","        \/\/ Calculate average response time","        var responseTimes: [TimeInterval] = []","        for i in 1..<messageTimes.count {","            if messageTimes[i].1 == .assistant && messageTimes[i-1].1 == .user {","                responseTimes.append(messageTimes[i].0.timeIntervalSince(messageTimes[i-1].0))","            }","        }","        let avgResponseTime = responseTimes.isEmpty ? 0 : responseTimes.reduce(0, +) \/ Double(responseTimes.count)","        ","        \/\/ Topic frequency","        var topicFreq: [String: Int] = [:]","        for topic in topics {","            topicFreq[topic, default: 0] += 1","        }","        ","        metrics = ConversationMetrics(","            messageCount: messageCount,","            averageResponseTime: avgResponseTime,","            topicFrequency: topicFreq,","            userEngagement: Double(messageCount) \/ max(1, messageTimes.first?.0.timeIntervalSinceNow ?? 1)","        )","    }","}"]},"chatbot-03-intents.swift":{"type":"file","content":["\/\/ IntentHandler.swift","import Foundation","import OpenAIKit","","protocol IntentHandler {","    var supportedIntents: [ConversationContext.Intent] { get }","    func canHandle(intent: ConversationContext.Intent) -> Bool","    func handle(message: String, context: ConversationContext) async throws -> String","}","","class QuestionIntentHandler: IntentHandler {","    let supportedIntents: [ConversationContext.Intent] = [.question]","    private let openAI: OpenAIKit","    ","    init(openAI: OpenAIKit) {","        self.openAI = openAI","    }","    ","    func canHandle(intent: ConversationContext.Intent) -> Bool {","        supportedIntents.contains(intent)","    }","    ","    func handle(message: String, context: ConversationContext) async throws -> String {","        let request = ChatCompletionRequest(","            messages: [","                ChatMessage(role: .system, content: \"Answer the user's question clearly and helpfully.\"),","                ChatMessage(role: .user, content: message)","            ],","            model: \"gpt-4o-mini\"","        )","        ","        let response = try await openAI.chat.completions(request)","        return response.choices.first?.message.content ?? \"\"","    }","}"],"identifier":"chatbot-03-intents.swift","highlights":[{"line":1},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":19},{"line":20},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33}],"fileName":"Chatbot.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Check-Your-Understanding":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"title":"Check Your Understanding","type":"link","url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Check-Your-Understanding":{"title":"Check Your Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Check-Your-Understanding","url":"\/tutorials\/openaikit\/09-building-semantic-search#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Getting-Started":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Getting-Started","role":"article","title":"Getting Started","abstract":[],"url":"\/tutorials\/openaikit-tutorials\/getting-started","kind":"article"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Cross-Platform-Streaming":{"title":"Cross-Platform Streaming","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Cross-Platform-Streaming","url":"\/tutorials\/openaikit\/06-streaming-responses#Cross-Platform-Streaming"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Chat-Completions":{"title":"Chat Completions","abstract":[],"role":"article","kind":"article","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Chat-Completions","url":"\/tutorials\/openaikit-tutorials\/chat-completions"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Customizing-Model-Parameters":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Customizing-Model-Parameters","role":"pseudoSymbol","title":"Customizing Model Parameters","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Customizing-Model-Parameters","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Advanced-Research":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Advanced-Research","role":"article","title":"Advanced Research","abstract":[],"url":"\/tutorials\/openaikit-tutorials\/advanced-research","kind":"article"},"state-01-machine.swift":{"syntax":"swift","highlights":[],"fileName":"ConversationStateMachine.swift","fileType":"swift","identifier":"state-01-machine.swift","type":"file","content":["\/\/ ConversationStateMachine.swift","import Foundation","","enum ConversationState {","    case idle","    case greeting","    case questionAnswering","    case taskExecution","    case clarification","    case farewell","}","","class ConversationStateMachine {","    @Published private(set) var currentState: ConversationState = .idle","    ","    func transition(to newState: ConversationState) {","        currentState = newState","    }","    ","    func determineState(from message: String) -> ConversationState {","        let lowercased = message.lowercased()","        ","        if lowercased.contains(\"hello\") || lowercased.contains(\"hi\") {","            return .greeting","        } else if lowercased.contains(\"?\") {","            return .questionAnswering","        } else if lowercased.contains(\"bye\") || lowercased.contains(\"goodbye\") {","            return .farewell","        } else {","            return .taskExecution","        }","    }","}"]},"memory-01-system.swift":{"type":"file","identifier":"memory-01-system.swift","content":["\/\/ MemorySystem.swift","import Foundation","","protocol MemoryStore {","    func store(key: String, value: Any) async","    func retrieve(key: String) async -> Any?","    func search(query: String) async -> [MemoryItem]","    func clear() async","}","","struct MemoryItem: Identifiable {","    let id = UUID()","    let key: String","    let value: String","    let timestamp: Date","    let metadata: [String: Any]","    let relevanceScore: Double?","}","","class SimpleMemoryStore: MemoryStore {","    private var memories: [String: MemoryItem] = [:]","    ","    func store(key: String, value: Any) async {","        let item = MemoryItem(","            key: key,","            value: String(describing: value),","            timestamp: Date(),","            metadata: [:],","            relevanceScore: nil","        )","        memories[key] = item","    }","    ","    func retrieve(key: String) async -> Any? {","        memories[key]?.value","    }","    ","    func search(query: String) async -> [MemoryItem] {","        memories.values.filter { item in","            item.key.localizedCaseInsensitiveContains(query) ||","            item.value.localizedCaseInsensitiveContains(query)","        }.sorted { $0.timestamp > $1.timestamp }","    }","    ","    func clear() async {","        memories.removeAll()","    }","}"],"highlights":[],"fileName":"MemorySystem.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Implementing-the-Weather-Function":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Implementing-the-Weather-Function","role":"pseudoSymbol","title":"Implementing the Weather Function","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"url":"\/tutorials\/openaikit\/03-working-with-functions#Implementing-the-Weather-Function","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Understanding-Embeddings":{"title":"Understanding Embeddings","abstract":[{"text":"Create intelligent search systems using embeddings to find semantically similar content.","type":"text"}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Understanding-Embeddings","url":"\/tutorials\/openaikit\/09-building-semantic-search#Understanding-Embeddings"},"memory-04-persistence.swift":{"syntax":"swift","highlights":[{"line":1},{"line":3},{"line":5},{"line":6},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":21},{"line":22},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":57},{"line":58},{"line":59},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":88},{"line":89},{"line":90},{"line":91},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114}],"fileName":"MemorySystem.swift","fileType":"swift","identifier":"memory-04-persistence.swift","type":"file","content":["\/\/ PersistentMemory.swift","import Foundation","import CoreData","","class PersistentMemoryStore: MemoryStore {","    private let container: NSPersistentContainer","    ","    init() {","        container = NSPersistentContainer(name: \"ConversationMemory\")","        ","        let description = container.persistentStoreDescriptions.first","        description?.setOption(true as NSNumber, forKey: NSPersistentHistoryTrackingKey)","        ","        container.loadPersistentStores { _, error in","            if let error = error {","                print(\"Core Data failed to load: \\(error)\")","            }","        }","    }","    ","    func store(key: String, value: Any) async {","        let context = container.viewContext","        ","        await context.perform {","            let memory = MemoryEntity(context: context)","            memory.id = UUID()","            memory.key = key","            memory.value = String(describing: value)","            memory.timestamp = Date()","            memory.embedding = nil \/\/ Store embedding data if needed","            ","            do {","                try context.save()","            } catch {","                print(\"Failed to save memory: \\(error)\")","            }","        }","    }","    ","    func retrieve(key: String) async -> Any? {","        let context = container.viewContext","        let request = MemoryEntity.fetchRequest()","        request.predicate = NSPredicate(format: \"key == %@\", key)","        request.fetchLimit = 1","        ","        return await context.perform {","            do {","                let memories = try context.fetch(request)","                return memories.first?.value","            } catch {","                print(\"Failed to retrieve memory: \\(error)\")","                return nil","            }","        }","    }","    ","    func search(query: String) async -> [MemoryItem] {","        let context = container.viewContext","        let request = MemoryEntity.fetchRequest()","        ","        \/\/ Search in both key and value","        request.predicate = NSPredicate(","            format: \"key CONTAINS[cd] %@ OR value CONTAINS[cd] %@\",","            query, query","        )","        request.sortDescriptors = [NSSortDescriptor(key: \"timestamp\", ascending: false)]","        request.fetchLimit = 20","        ","        return await context.perform {","            do {","                let entities = try context.fetch(request)","                return entities.map { entity in","                    MemoryItem(","                        key: entity.key ?? \"\",","                        value: entity.value ?? \"\",","                        timestamp: entity.timestamp ?? Date(),","                        metadata: [:],","                        relevanceScore: nil","                    )","                }","            } catch {","                print(\"Failed to search memories: \\(error)\")","                return []","            }","        }","    }","    ","    func clear() async {","        let context = container.viewContext","        let request = NSFetchRequest<NSFetchRequestResult>(entityName: \"MemoryEntity\")","        let deleteRequest = NSBatchDeleteRequest(fetchRequest: request)","        ","        await context.perform {","            do {","                try context.execute(deleteRequest)","                try context.save()","            } catch {","                print(\"Failed to clear memories: \\(error)\")","            }","        }","    }","}","","\/\/ Core Data Model (create in .xcdatamodeld file)","\/*","Entity: MemoryEntity","Attributes:","- id: UUID","- key: String","- value: String","- timestamp: Date","- embedding: Binary (optional)","- metadata: Binary (optional)","*\/"]},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Set-Environment-Variables":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Set-Environment-Variables","type":"section","role":"pseudoSymbol","title":"Set Environment Variables","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Set-Environment-Variables","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio":{"title":"Transcribing Audio","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio","url":"\/tutorials\/openaikit\/08-transcribing-audio","estimatedTime":"12min"},"persona-01-struct.swift":{"type":"file","identifier":"persona-01-struct.swift","content":["\/\/ Persona.swift","import Foundation","","struct Persona: Identifiable, Codable {","    let id = UUID()","    let name: String","    let description: String","    let systemPrompt: String","    let temperature: Double","    let traits: [String]","    let knowledge: [String]","    let examples: [ConversationExample]","    ","    static let helpful = Persona(","        name: \"Helpful Assistant\",","        description: \"A friendly and helpful AI assistant\",","        systemPrompt: \"You are a helpful, friendly, and professional AI assistant. Provide clear and accurate information while being approachable.\",","        temperature: 0.7,","        traits: [\"friendly\", \"professional\", \"clear\", \"patient\"],","        knowledge: [],","        examples: []","    )","    ","    static let creative = Persona(","        name: \"Creative Writer\",","        description: \"A creative and imaginative storyteller\",","        systemPrompt: \"You are a creative writer with a vivid imagination. Help users with creative writing, storytelling, and brainstorming ideas.\",","        temperature: 0.9,","        traits: [\"imaginative\", \"descriptive\", \"engaging\", \"original\"],","        knowledge: [\"literature\", \"storytelling techniques\", \"creative writing\"],","        examples: []","    )","    ","    static let technical = Persona(","        name: \"Technical Expert\",","        description: \"A precise technical advisor\",","        systemPrompt: \"You are a technical expert who provides accurate, detailed technical information. Focus on precision and clarity.\",","        temperature: 0.3,","        traits: [\"precise\", \"analytical\", \"thorough\", \"logical\"],","        knowledge: [\"programming\", \"technology\", \"engineering\", \"mathematics\"],","        examples: []","    )","}","","struct ConversationExample: Codable {","    let userInput: String","    let assistantResponse: String","}"],"highlights":[],"fileName":"Personas.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Building-a-Complete-Chatbot":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Building-a-Complete-Chatbot","role":"pseudoSymbol","title":"Building a Complete Chatbot","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"url":"\/tutorials\/openaikit\/05-building-conversations#Building-a-Complete-Chatbot","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Configure-OpenAIKit":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Configure-OpenAIKit","role":"pseudoSymbol","title":"Configure OpenAIKit","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Configure-OpenAIKit","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Check-Your-Understanding":{"title":"Check Your Understanding","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Check-Your-Understanding","type":"link","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"url":"\/tutorials\/openaikit\/03-working-with-functions#Check-Your-Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Code-Interpreter-for-Data-Analysis":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Code-Interpreter-for-Data-Analysis","role":"pseudoSymbol","title":"Code Interpreter for Data Analysis","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Code-Interpreter-for-Data-Analysis","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Semantic-Search-Engine":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Semantic-Search-Engine","role":"pseudoSymbol","title":"Semantic Search Engine","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"url":"\/tutorials\/openaikit\/09-building-semantic-search#Semantic-Search-Engine","kind":"section"},"chatbot-04-flow.swift":{"syntax":"swift","highlights":[{"line":1},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":21},{"line":22},{"line":25},{"line":26},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53}],"fileName":"Chatbot.swift","fileType":"swift","identifier":"chatbot-04-flow.swift","type":"file","content":["\/\/ ConversationFlow.swift","import Foundation","","protocol ConversationFlow {","    var name: String { get }","    var currentStep: Int { get }","    var isComplete: Bool { get }","    func process(message: String) -> FlowResponse","}","","struct FlowResponse {","    let message: String","    let options: [String]","    let requiresInput: Bool","}","","class OnboardingFlow: ConversationFlow {","    let name = \"onboarding\"","    private(set) var currentStep = 0","    ","    var isComplete: Bool {","        currentStep >= 3","    }","    ","    func process(message: String) -> FlowResponse {","        defer { currentStep += 1 }","        ","        switch currentStep {","        case 0:","            return FlowResponse(","                message: \"Welcome! What's your name?\",","                options: [],","                requiresInput: true","            )","        case 1:","            return FlowResponse(","                message: \"Nice to meet you, \\(message)! What brings you here today?\",","                options: [\"Just exploring\", \"I have a question\", \"Need help with something\"],","                requiresInput: true","            )","        case 2:","            return FlowResponse(","                message: \"Great! I'm here to help. How can I assist you?\",","                options: [],","                requiresInput: true","            )","        default:","            return FlowResponse(","                message: \"How can I help you?\",","                options: [],","                requiresInput: true","            )","        }","    }","}"]},"conversation-02-messages.swift":{"type":"file","identifier":"conversation-02-messages.swift","content":["\/\/ ConversationManager.swift - Message management","import Foundation","import OpenAIKit","","class ConversationManager: ObservableObject {","    @Published var messages: [ChatMessage] = []","    @Published var conversationId = UUID()","    private let maxMessages = 50","    ","    init(systemPrompt: String? = nil) {","        if let prompt = systemPrompt {","            messages.append(ChatMessage(role: .system, content: prompt))","        }","    }","    ","    func addUserMessage(_ content: String) {","        messages.append(ChatMessage(role: .user, content: content))","        trimMessages()","    }","    ","    func addAssistantMessage(_ content: String) {","        messages.append(ChatMessage(role: .assistant, content: content))","        trimMessages()","    }","    ","    private func trimMessages() {","        \/\/ Keep system message + last N messages","        if messages.count > maxMessages {","            let systemMessage = messages.first { $0.role == .system }","            let recentMessages = messages.suffix(maxMessages - 1)","            ","            messages = []","            if let system = systemMessage {","                messages.append(system)","            }","            messages.append(contentsOf: recentMessages)","        }","    }","    ","    func clear() {","        let systemMessage = messages.first { $0.role == .system }","        messages = systemMessage != nil ? [systemMessage!] : []","        conversationId = UUID()","    }","}"],"highlights":[{"line":1},{"line":8},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44}],"fileName":"ConversationManager.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Audio-Translation":{"title":"Audio Translation","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Audio-Translation","url":"\/tutorials\/openaikit\/08-transcribing-audio#Audio-Translation"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Basic-Audio-Transcription":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Basic-Audio-Transcription","role":"pseudoSymbol","title":"Basic Audio Transcription","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"url":"\/tutorials\/openaikit\/08-transcribing-audio#Basic-Audio-Transcription","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Install-OpenAIKit":{"title":"Install OpenAIKit","abstract":[{"text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API.","type":"text"}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Install-OpenAIKit","url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Install-OpenAIKit"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Implementing-Retry-Logic":{"title":"Implementing Retry Logic","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Implementing-Retry-Logic","url":"\/tutorials\/openaikit\/04-handling-errors#Implementing-Retry-Logic"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Obtain-an-API-Key":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Obtain-an-API-Key","type":"section","role":"pseudoSymbol","title":"Obtain an API Key","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Obtain-an-API-Key","kind":"section"},"conversation-03-tokens.swift":{"syntax":"swift","highlights":[{"line":1},{"line":8},{"line":10},{"line":11},{"line":12},{"line":16},{"line":22},{"line":23},{"line":28},{"line":29},{"line":32},{"line":33},{"line":34},{"line":38},{"line":39},{"line":40},{"line":41},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74}],"fileName":"ConversationManager.swift","fileType":"swift","identifier":"conversation-03-tokens.swift","type":"file","content":["\/\/ ConversationManager.swift - Token counting","import Foundation","import OpenAIKit","","class ConversationManager: ObservableObject {","    @Published var messages: [ChatMessage] = []","    @Published var conversationId = UUID()","    @Published var estimatedTokens = 0","    ","    private let maxTokens = 4000 \/\/ Leave room for response","    private let tokenEstimator = TokenEstimator()","    ","    init(systemPrompt: String? = nil) {","        if let prompt = systemPrompt {","            messages.append(ChatMessage(role: .system, content: prompt))","            updateTokenCount()","        }","    }","    ","    func addUserMessage(_ content: String) {","        messages.append(ChatMessage(role: .user, content: content))","        updateTokenCount()","        trimToTokenLimit()","    }","    ","    func addAssistantMessage(_ content: String) {","        messages.append(ChatMessage(role: .assistant, content: content))","        updateTokenCount()","        trimToTokenLimit()","    }","    ","    private func updateTokenCount() {","        estimatedTokens = messages.reduce(0) { total, message in","            total + tokenEstimator.estimate(message.content) + 4 \/\/ Role tokens","        }","    }","    ","    private func trimToTokenLimit() {","        guard estimatedTokens > maxTokens else { return }","        ","        \/\/ Keep system message and trim from the middle","        let systemMessage = messages.first { $0.role == .system }","        var trimmedMessages: [ChatMessage] = []","        ","        if let system = systemMessage {","            trimmedMessages.append(system)","        }","        ","        \/\/ Keep most recent messages that fit","        var currentTokens = systemMessage != nil ? tokenEstimator.estimate(systemMessage!.content) : 0","        ","        for message in messages.reversed() {","            let messageTokens = tokenEstimator.estimate(message.content) + 4","            if currentTokens + messageTokens < maxTokens {","                trimmedMessages.insert(message, at: trimmedMessages.count)","                currentTokens += messageTokens","            } else {","                break","            }","        }","        ","        messages = trimmedMessages","        updateTokenCount()","    }","}","","\/\/ Simple token estimator (rough approximation)","struct TokenEstimator {","    func estimate(_ text: String) -> Int {","        \/\/ Rough estimate: ~4 characters per token","        let words = text.split(separator: \" \").count","        return max(1, words * 4 \/ 3)","    }","}"]},"conversation-05-summary.swift":{"type":"file","identifier":"conversation-05-summary.swift","content":["\/\/ ConversationManager.swift - With summarization","import Foundation","import OpenAIKit","","class ConversationManager: ObservableObject {","    @Published var messages: [ChatMessage] = []","    @Published var conversationId = UUID()","    @Published var summary: String?","    @Published var isSummarizing = false","    ","    private let openAI: OpenAIKit","    private let summarizationThreshold = 20 \/\/ Summarize after N messages","    ","    init(openAI: OpenAIKit, systemPrompt: String? = nil) {","        self.openAI = openAI","        if let prompt = systemPrompt {","            messages.append(ChatMessage(role: .system, content: prompt))","        }","    }","    ","    func addExchange(userMessage: String, assistantResponse: String) async {","        addUserMessage(userMessage)","        addAssistantMessage(assistantResponse)","        ","        \/\/ Check if we need to summarize","        if shouldSummarize() {","            await summarizeConversation()","        }","    }","    ","    private func addUserMessage(_ content: String) {","        messages.append(ChatMessage(role: .user, content: content))","    }","    ","    private func addAssistantMessage(_ content: String) {","        messages.append(ChatMessage(role: .assistant, content: content))","    }","    ","    private func shouldSummarize() -> Bool {","        let nonSystemMessages = messages.filter { $0.role != .system }","        return nonSystemMessages.count >= summarizationThreshold && summary == nil","    }","    ","    @MainActor","    private func summarizeConversation() async {","        isSummarizing = true","        defer { isSummarizing = false }","        ","        \/\/ Get messages to summarize (exclude system and very recent)","        let messagesToSummarize = messages","            .filter { $0.role != .system }","            .dropLast(4) \/\/ Keep last 2 exchanges verbatim","        ","        guard !messagesToSummarize.isEmpty else { return }","        ","        \/\/ Create summarization request","        let summaryPrompt = ChatMessage(","            role: .system,","            content: \"Summarize the following conversation concisely, capturing key points and context:\"","        )","        ","        let conversationText = messagesToSummarize.map { message in","            \"\\(message.role.rawValue): \\(message.content)\"","        }.joined(separator: \"\\n\")","        ","        let summaryRequest = ChatCompletionRequest(","            messages: [","                summaryPrompt,","                ChatMessage(role: .user, content: conversationText)","            ],","            model: \"gpt-4o-mini\",","            maxTokens: 150,","            temperature: 0.5","        )","        ","        do {","            let response = try await openAI.chat.completions(summaryRequest)","            if let summaryContent = response.choices.first?.message.content {","                summary = summaryContent","                compactMessages()","            }","        } catch {","            print(\"Failed to summarize: \\(error)\")","        }","    }","    ","    private func compactMessages() {","        guard let summary = summary else { return }","        ","        \/\/ Keep system message, summary, and recent messages","        var compactedMessages: [ChatMessage] = []","        ","        if let systemMessage = messages.first(where: { $0.role == .system }) {","            compactedMessages.append(systemMessage)","        }","        ","        \/\/ Add summary as a system message","        compactedMessages.append(ChatMessage(","            role: .system,","            content: \"Previous conversation summary: \\(summary)\"","        ))","        ","        \/\/ Keep recent messages","        let recentMessages = messages.suffix(4)","        compactedMessages.append(contentsOf: recentMessages)","        ","        messages = compactedMessages","    }","    ","    func getContextForRequest() -> [ChatMessage] {","        return messages","    }","}"],"highlights":[{"line":1},{"line":8},{"line":9},{"line":11},{"line":12},{"line":14},{"line":15},{"line":17},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":31},{"line":32},{"line":35},{"line":36},{"line":39},{"line":40},{"line":41},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":109},{"line":110},{"line":111},{"line":112}],"fileName":"ConversationManager.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Building-a-Streaming-UI":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Building-a-Streaming-UI","type":"section","role":"pseudoSymbol","title":"Building a Streaming UI","abstract":[{"text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated.","type":"text"}],"url":"\/tutorials\/openaikit\/06-streaming-responses#Building-a-Streaming-UI","kind":"section"},"persona-04-switching.swift":{"syntax":"swift","highlights":[{"line":1},{"line":2},{"line":5},{"line":6},{"line":7},{"line":8},{"line":10},{"line":13},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85}],"fileName":"Personas.swift","fileType":"swift","identifier":"persona-04-switching.swift","type":"file","content":["\/\/ PersonaSwitching.swift","import SwiftUI","import OpenAIKit","","struct PersonaChatView: View {","    @StateObject private var chat: PersonaChat","    @State private var inputText = \"\"","    @State private var showPersonaPicker = false","    ","    let availablePersonas: [Persona] = [.helpful, .creative, .technical]","    ","    init(openAI: OpenAIKit) {","        _chat = StateObject(wrappedValue: PersonaChat(openAI: openAI))","    }","    ","    var body: some View {","        VStack {","            \/\/ Header with persona selector","            HStack {","                Button(action: { showPersonaPicker.toggle() }) {","                    HStack {","                        Image(systemName: \"person.circle\")","                        Text(chat.currentPersona.name)","                    }","                }","                Spacer()","            }","            .padding()","            ","            \/\/ Messages","            ScrollView {","                ForEach(chat.messages.filter { $0.role != .system }, id: \\.content) { message in","                    MessageBubble(message: message)","                }","            }","            ","            \/\/ Input","            HStack {","                TextField(\"Type a message...\", text: $inputText)","                Button(\"Send\") {","                    Task {","                        _ = try await chat.sendMessage(inputText)","                        inputText = \"\"","                    }","                }","            }","            .padding()","        }","        .sheet(isPresented: $showPersonaPicker) {","            PersonaPicker(","                personas: availablePersonas,","                selected: chat.currentPersona","            ) { persona in","                chat.switchPersona(to: persona)","                showPersonaPicker = false","            }","        }","    }","}","","struct PersonaPicker: View {","    let personas: [Persona]","    let selected: Persona","    let onSelect: (Persona) -> Void","    ","    var body: some View {","        NavigationView {","            List(personas) { persona in","                Button(action: { onSelect(persona) }) {","                    HStack {","                        VStack(alignment: .leading) {","                            Text(persona.name)","                                .font(.headline)","                            Text(persona.description)","                                .font(.caption)","                                .foregroundColor(.secondary)","                        }","                        Spacer()","                        if persona.id == selected.id {","                            Image(systemName: \"checkmark\")","                        }","                    }","                }","            }","            .navigationTitle(\"Choose Persona\")","        }","    }","}"]},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors":{"title":"Handling Errors","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors","url":"\/tutorials\/openaikit\/04-handling-errors","estimatedTime":"12min"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Web-Search-Research":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Web-Search-Research","role":"pseudoSymbol","title":"Web Search Research","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Web-Search-Research","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Understanding-OpenAIKit-Errors":{"title":"Understanding OpenAIKit Errors","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Understanding-OpenAIKit-Errors","url":"\/tutorials\/openaikit\/04-handling-errors#Understanding-OpenAIKit-Errors"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Building-a-Knowledge-Base-App":{"title":"Building a Knowledge Base App","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Knowledge-Base-App","url":"\/tutorials\/openaikit\/09-building-semantic-search#Building-a-Knowledge-Base-App"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Security-and-Privacy-Considerations":{"title":"Security and Privacy Considerations","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Security-and-Privacy-Considerations","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Security-and-Privacy-Considerations"},"state-03-context.swift":{"type":"file","identifier":"state-03-context.swift","content":["\/\/ ContextManager.swift","import Foundation","","struct ConversationContext {","    var topic: String?","    var entities: [String: String] = [:]","    var sentiment: Sentiment = .neutral","    var intent: Intent = .unknown","    ","    enum Sentiment {","        case positive, neutral, negative, mixed","    }","    ","    enum Intent {","        case question, request, statement, greeting, farewell, unknown","    }","}","","class ContextManager: ObservableObject {","    @Published private(set) var currentContext = ConversationContext()","    ","    func updateContext(from message: String, role: ChatRole) {","        if role == .user {","            currentContext.topic = extractTopic(from: message)","            currentContext.intent = classifyIntent(message)","            currentContext.sentiment = analyzeSentiment(message)","        }","    }","    ","    private func extractTopic(from text: String) -> String? {","        \/\/ Simple implementation","        let words = text.components(separatedBy: .whitespacesAndNewlines)","        return words.first { $0.count > 3 }","    }","    ","    private func classifyIntent(_ text: String) -> ConversationContext.Intent {","        if text.contains(\"?\") {","            return .question","        } else if text.lowercased().contains(\"hello\") {","            return .greeting","        } else {","            return .statement","        }","    }","    ","    private func analyzeSentiment(_ text: String) -> ConversationContext.Sentiment {","        \/\/ Simple sentiment analysis","        let positive = [\"good\", \"great\", \"excellent\", \"happy\"]","        let negative = [\"bad\", \"terrible\", \"awful\", \"sad\"]","        ","        let words = text.lowercased().components(separatedBy: .whitespacesAndNewlines)","        let hasPositive = words.contains { positive.contains($0) }","        let hasNegative = words.contains { negative.contains($0) }","        ","        if hasPositive && !hasNegative {","            return .positive","        } else if hasNegative && !hasPositive {","            return .negative","        } else if hasPositive && hasNegative {","            return .mixed","        } else {","            return .neutral","        }","    }","}"],"highlights":[{"line":1},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":19},{"line":20},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63}],"fileName":"ConversationStateMachine.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations":{"title":"Building Conversations","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations","url":"\/tutorials\/openaikit\/05-building-conversations","estimatedTime":"18min"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Advanced-Streaming-Features":{"title":"Advanced Streaming Features","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Advanced-Streaming-Features","url":"\/tutorials\/openaikit\/06-streaming-responses#Advanced-Streaming-Features"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Advanced-Transcription-Options":{"title":"Advanced Transcription Options","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Advanced-Transcription-Options","url":"\/tutorials\/openaikit\/08-transcribing-audio#Advanced-Transcription-Options"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#User-Friendly-Error-Messages":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#User-Friendly-Error-Messages","type":"section","role":"pseudoSymbol","title":"User-Friendly Error Messages","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"url":"\/tutorials\/openaikit\/04-handling-errors#User-Friendly-Error-Messages","kind":"section"},"persona-03-behaviors.swift":{"syntax":"swift","highlights":[{"line":1},{"line":3},{"line":5},{"line":6},{"line":9},{"line":10},{"line":12},{"line":13},{"line":14},{"line":17},{"line":18},{"line":19},{"line":20},{"line":23},{"line":24},{"line":25},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":41},{"line":42},{"line":43}],"fileName":"Personas.swift","fileType":"swift","identifier":"persona-03-behaviors.swift","type":"file","content":["\/\/ PersonaBehavior.swift","import Foundation","import OpenAIKit","","class PersonaChat: ObservableObject {","    @Published var messages: [ChatMessage] = []","    @Published var currentPersona: Persona = .helpful","    ","    private let openAI: OpenAIKit","    private let personaManager = PersonaManager()","    ","    init(openAI: OpenAIKit) {","        self.openAI = openAI","        updateSystemPrompt()","    }","    ","    func switchPersona(to persona: Persona) {","        currentPersona = persona","        messages.removeAll()","        updateSystemPrompt()","    }","    ","    private func updateSystemPrompt() {","        let systemPrompt = personaManager.buildSystemPrompt(for: currentPersona)","        messages = [ChatMessage(role: .system, content: systemPrompt)]","    }","    ","    func sendMessage(_ content: String) async throws -> String {","        messages.append(ChatMessage(role: .user, content: content))","        ","        let request = ChatCompletionRequest(","            messages: messages,","            model: \"gpt-4o-mini\",","            temperature: currentPersona.temperature","        )","        ","        let response = try await openAI.chat.completions(request)","        guard let assistantContent = response.choices.first?.message.content else {","            throw ChatError.noContent","        }","        ","        messages.append(ChatMessage(role: .assistant, content: assistantContent))","        return assistantContent","    }","}"]},"chatbot-02-integration.swift":{"type":"file","identifier":"chatbot-02-integration.swift","content":["\/\/ CompleteChatbot.swift - Integration","import Foundation","import OpenAIKit","","extension CompleteChatbot {","    func sendMessage(_ content: String) async throws -> String {","        \/\/ Update context","        contextManager.updateContext(from: content, role: .user)","        context = contextManager.currentContext","        ","        \/\/ Add user message","        messages.append(ChatMessage(role: .user, content: content))","        ","        \/\/ Track analytics","        analytics.trackMessage(role: .user, content: content, context: context)","        ","        \/\/ Build enhanced request","        let request = buildEnhancedRequest(userMessage: content)","        ","        \/\/ Get response","        isTyping = true","        defer { isTyping = false }","        ","        let response = try await openAI.chat.completions(request)","        guard let assistantContent = response.choices.first?.message.content else {","            throw ChatError.noContent","        }","        ","        \/\/ Process response","        await processResponse(assistantContent, for: content)","        ","        return assistantContent","    }","    ","    private func buildEnhancedRequest(userMessage: String) -> ChatCompletionRequest {","        var contextMessages = messages","        ","        \/\/ Add context-aware system messages based on state","        if context.intent == .greeting {","            contextMessages.insert(","                ChatMessage(role: .system, content: \"The user is greeting you. Be friendly and welcoming.\"),","                at: 1","            )","        }","        ","        return ChatCompletionRequest(","            messages: contextMessages,","            model: \"gpt-4o-mini\",","            temperature: currentPersona.temperature","        )","    }","    ","    private func processResponse(_ response: String, for userMessage: String) async {","        messages.append(ChatMessage(role: .assistant, content: response))","        contextManager.updateContext(from: response, role: .assistant)","        analytics.trackMessage(role: .assistant, content: response, context: context)","    }","}"],"highlights":[{"line":1},{"line":5},{"line":7},{"line":11},{"line":13},{"line":14},{"line":17},{"line":18},{"line":19},{"line":20},{"line":29},{"line":30},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57}],"fileName":"Chatbot.swift","syntax":"swift","fileType":"swift"},"persona-02-prompts.swift":{"syntax":"swift","highlights":[{"line":1},{"line":4},{"line":5},{"line":6},{"line":8},{"line":9},{"line":11},{"line":12},{"line":13},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72}],"fileName":"Personas.swift","fileType":"swift","identifier":"persona-02-prompts.swift","type":"file","content":["\/\/ PersonaManager.swift","import Foundation","","class PersonaManager: ObservableObject {","    @Published var currentPersona: Persona = .helpful","    @Published var customPersonas: [Persona] = []","    ","    private let userDefaults = UserDefaults.standard","    private let customPersonasKey = \"customPersonas\"","    ","    init() {","        loadCustomPersonas()","    }","    ","    func buildSystemPrompt(for persona: Persona) -> String {","        var prompt = persona.systemPrompt","        ","        \/\/ Add traits","        if !persona.traits.isEmpty {","            prompt += \"\\n\\nYour personality traits: \\(persona.traits.joined(separator: \", \"))\"","        }","        ","        \/\/ Add knowledge domains","        if !persona.knowledge.isEmpty {","            prompt += \"\\n\\nYou have expertise in: \\(persona.knowledge.joined(separator: \", \"))\"","        }","        ","        \/\/ Add examples","        if !persona.examples.isEmpty {","            prompt += \"\\n\\nExample interactions:\"","            for example in persona.examples.prefix(3) {","                prompt += \"\\nUser: \\(example.userInput)\"","                prompt += \"\\nAssistant: \\(example.assistantResponse)\"","            }","        }","        ","        return prompt","    }","    ","    func createCustomPersona(","        name: String,","        description: String,","        basePrompt: String,","        traits: [String],","        temperature: Double = 0.7","    ) {","        let persona = Persona(","            name: name,","            description: description,","            systemPrompt: basePrompt,","            temperature: temperature,","            traits: traits,","            knowledge: [],","            examples: []","        )","        ","        customPersonas.append(persona)","        saveCustomPersonas()","    }","    ","    private func loadCustomPersonas() {","        guard let data = userDefaults.data(forKey: customPersonasKey),","              let personas = try? JSONDecoder().decode([Persona].self, from: data) else {","            return","        }","        customPersonas = personas","    }","    ","    private func saveCustomPersonas() {","        guard let data = try? JSONEncoder().encode(customPersonas) else { return }","        userDefaults.set(data, forKey: customPersonasKey)","    }","}"]},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Managing-Conversation-Context":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Managing-Conversation-Context","role":"pseudoSymbol","title":"Managing Conversation Context","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"url":"\/tutorials\/openaikit\/05-building-conversations#Managing-Conversation-Context","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion","role":"project","title":"Your First Chat Completion","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"estimatedTime":"15min","url":"\/tutorials\/openaikit\/02-your-first-chat-completion","kind":"project"},"memory-03-retrieval.swift":{"type":"file","identifier":"memory-03-retrieval.swift","content":["\/\/ MemoryRetrieval.swift","import Foundation","import OpenAIKit","","class ConversationWithMemory: ObservableObject {","    @Published var messages: [ChatMessage] = []","    @Published var relevantMemories: [MemoryItem] = []","    ","    private let openAI: OpenAIKit","    private let memory: SemanticMemory","    private let maxMemoriesToInclude = 3","    ","    init(openAI: OpenAIKit) {","        self.openAI = openAI","        self.memory = SemanticMemory(openAI: openAI)","    }","    ","    func sendMessage(_ content: String) async throws -> String {","        \/\/ Search for relevant memories","        relevantMemories = await memory.search(query: content)","        ","        \/\/ Build context with memories","        var contextMessages: [ChatMessage] = []","        ","        \/\/ Add system prompt with memories","        if !relevantMemories.isEmpty {","            let memoryContext = relevantMemories","                .prefix(maxMemoriesToInclude)","                .map { \"- \\($0.value)\" }","                .joined(separator: \"\\n\")","            ","            contextMessages.append(ChatMessage(","                role: .system,","                content: \"Relevant context from previous conversations:\\n\\(memoryContext)\"","            ))","        }","        ","        \/\/ Add conversation history","        contextMessages.append(contentsOf: messages.suffix(10))","        ","        \/\/ Add user message","        let userMessage = ChatMessage(role: .user, content: content)","        contextMessages.append(userMessage)","        messages.append(userMessage)","        ","        \/\/ Get response","        let request = ChatCompletionRequest(","            messages: contextMessages,","            model: \"gpt-4o-mini\"","        )","        ","        let response = try await openAI.chat.completions(request)","        guard let assistantContent = response.choices.first?.message.content else {","            throw ChatError.noContent","        }","        ","        \/\/ Store exchange in memory","        await storeExchangeInMemory(userContent: content, assistantContent: assistantContent)","        ","        \/\/ Add assistant message","        let assistantMessage = ChatMessage(role: .assistant, content: assistantContent)","        messages.append(assistantMessage)","        ","        return assistantContent","    }","    ","    private func storeExchangeInMemory(userContent: String, assistantContent: String) async {","        \/\/ Extract key information from the exchange","        let exchangeSummary = \"User asked about: \\(userContent). Assistant responded: \\(assistantContent)\"","        ","        \/\/ Generate a key based on the main topic","        let key = extractKey(from: userContent)","        ","        await memory.store(key: key, value: exchangeSummary)","    }","    ","    private func extractKey(from text: String) -> String {","        \/\/ Simple key extraction - in practice, use NLP","        let words = text","            .components(separatedBy: .whitespacesAndNewlines)","            .filter { $0.count > 3 }","        ","        return words.prefix(3).joined(separator: \"_\").lowercased()","    }","}"],"highlights":[{"line":1},{"line":5},{"line":6},{"line":7},{"line":8},{"line":10},{"line":11},{"line":15},{"line":18},{"line":19},{"line":20},{"line":22},{"line":23},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":52},{"line":53},{"line":54},{"line":57},{"line":58},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":67},{"line":68},{"line":69},{"line":71},{"line":72},{"line":74},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":83}],"fileName":"MemorySystem.swift","syntax":"swift","fileType":"swift"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Check-Your-Understanding":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Check-Your-Understanding","type":"link","title":"Check Your Understanding","url":"\/tutorials\/openaikit\/05-building-conversations#Check-Your-Understanding","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}]}}}