{"metadata":{"categoryPathComponent":"OpenAIKit-Tutorials","category":"OpenAIKit","role":"project","title":"Handling Errors"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/openaikit\/04-handling-errors"]}],"kind":"project","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors"},"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"modules":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Getting-Started","projects":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit","sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Install-OpenAIKit","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Obtain-an-API-Key","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Configure-OpenAIKit","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Set-Environment-Variables","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Check-Your-Understanding","kind":"assessment"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion","sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Create-a-Simple-Chat-Request"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Understanding-Chat-Messages"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Customizing-Model-Parameters"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Building-a-Chat-Interface"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Check-Your-Understanding"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors","sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Understanding-OpenAIKit-Errors","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Implementing-Retry-Logic","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#User-Friendly-Error-Messages","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Building-a-Robust-Error-Handler","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Check-Your-Understanding","kind":"assessment"}]}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Chat-Completions","projects":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations","sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Managing-Conversation-Context"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Implementing-Conversation-Memory"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Creating-Dynamic-Personas"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Advanced-Conversation-Patterns"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Building-a-Complete-Chatbot"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Check-Your-Understanding"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses","sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Understanding-Streaming"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Building-a-Streaming-UI"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Handling-Stream-Interruptions"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Advanced-Streaming-Features"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Cross-Platform-Streaming"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Check-Your-Understanding"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions","sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Understanding-Function-Calling"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Implementing-the-Weather-Function"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Handling-Function-Calls"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Building-the-Complete-Assistant"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Advanced-Function-Patterns"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Check-Your-Understanding"}]}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Multimodal-AI","projects":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images","sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images#Understanding-Image-Models"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio","sections":[{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Basic-Audio-Transcription"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Advanced-Transcription-Options"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Audio-Translation"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Building-a-Voice-Notes-App"},{"kind":"task","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Handling-Large-Audio-Files"},{"kind":"assessment","reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Check-Your-Understanding"}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search","sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Understanding-Embeddings","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Vector-Similarity-Search","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Vector-Database","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Semantic-Search-Engine","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Knowledge-Base-App","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Advanced-Techniques","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Check-Your-Understanding","kind":"assessment"}]}]},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Advanced-Research","projects":[{"sections":[{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Introduction-to-DeepResearch","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Web-Search-Research","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Code-Interpreter-for-Data-Analysis","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Working-with-MCP-Servers","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Streaming-Research-Responses","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Best-Practices-for-Research-Prompting","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Security-and-Privacy-Considerations","kind":"task"},{"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Check-Your-Understanding","kind":"assessment"}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis"}]}],"reference":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials","paths":[["doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials","doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/$volume","doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Getting-Started"]]},"sections":[{"chapter":"Getting Started","content":[{"inlineContent":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You’ll implement comprehensive error handling, retry logic, and user-friendly error messages."}],"type":"paragraph"}],"estimatedTimeInMinutes":12,"title":"Handling Errors","kind":"hero"},{"tasks":[{"anchor":"Understanding-OpenAIKit-Errors","title":"Understanding OpenAIKit Errors","contentSection":[{"content":[{"inlineContent":[{"text":"OpenAIKit provides a comprehensive error system to help you handle various failure scenarios.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file to explore error handling patterns."}]}],"type":"step","code":"errors-01-empty.swift","caption":[],"media":null,"runtimePreview":null},{"media":null,"code":"errors-02-function.swift","type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Import OpenAIKit and create a function that might fail.","type":"text"}]}],"runtimePreview":null},{"media":null,"code":"errors-03-catch.swift","type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a do-catch block to handle OpenAIError cases."}]}],"runtimePreview":null},{"media":null,"code":"errors-04-specific.swift","type":"step","caption":[],"content":[{"inlineContent":[{"text":"Handle specific error cases like invalid API key.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"media":null,"code":"errors-05-details.swift","type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extract error details for better debugging."}]}],"runtimePreview":null}]},{"anchor":"Implementing-Retry-Logic","title":"Implementing Retry Logic","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Network requests can fail temporarily. Let’s implement smart retry logic for transient errors."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"code":"retry-01-wrapper.swift","runtimePreview":null,"type":"step","caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Create a retry wrapper for API calls."}],"type":"paragraph"}]},{"code":"retry-02-backoff.swift","runtimePreview":null,"type":"step","caption":[],"media":null,"content":[{"inlineContent":[{"text":"Add exponential backoff for rate limit errors.","type":"text"}],"type":"paragraph"}]},{"code":"retry-03-implementation.swift","runtimePreview":null,"type":"step","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Implement the retry logic with delay calculation.","type":"text"}]}]},{"code":"retry-04-circuit.swift","runtimePreview":null,"type":"step","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add circuit breaker pattern for repeated failures."}]}]}]},{"anchor":"User-Friendly-Error-Messages","title":"User-Friendly Error Messages","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Convert technical errors into messages your users can understand.","type":"text"}]}]}],"stepsSection":[{"type":"step","media":null,"runtimePreview":null,"code":"messages-01-mapper.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Create an error message mapper.","type":"text"}]}]},{"type":"step","media":null,"runtimePreview":null,"code":"messages-02-mapping.swift","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Map common API errors to user messages."}],"type":"paragraph"}]},{"type":"step","media":null,"runtimePreview":null,"code":"messages-03-localized.swift","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Add localization support for error messages."}],"type":"paragraph"}]},{"type":"step","media":null,"runtimePreview":null,"code":"messages-04-actionable.swift","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Create actionable error messages with recovery suggestions."}],"type":"paragraph"}]}]},{"anchor":"Building-a-Robust-Error-Handler","title":"Building a Robust Error Handler","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Combine all error handling patterns into a reusable error handler."}]}]}],"stepsSection":[{"runtimePreview":null,"caption":[],"media":null,"code":"handler-01-class.swift","content":[{"inlineContent":[{"text":"Create an ErrorHandler class.","type":"text"}],"type":"paragraph"}],"type":"step"},{"runtimePreview":null,"caption":[],"media":null,"code":"handler-02-tracking.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Add error tracking and analytics.","type":"text"}]}],"type":"step"},{"runtimePreview":null,"caption":[],"media":null,"code":"handler-03-recovery.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Implement error recovery strategies.","type":"text"}]}],"type":"step"},{"runtimePreview":null,"caption":[],"media":null,"code":"handler-04-ui.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create SwiftUI error presentation."}]}],"type":"step"},{"runtimePreview":null,"caption":[],"media":null,"code":"handler-05-state.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add error state management."}]}],"type":"step"}]}],"kind":"tasks"},{"assessments":[{"title":[{"type":"paragraph","inlineContent":[{"text":"Which error indicates you’ve exceeded your API rate limit?","type":"text"}]}],"type":"multiple-choice","content":[],"choices":[{"content":[{"inlineContent":[{"type":"codeVoice","code":".invalidAPIKey"}],"type":"paragraph"}],"justification":[{"inlineContent":[{"type":"text","text":"This error indicates your API key is invalid or missing."}],"type":"paragraph"}],"isCorrect":false},{"content":[{"inlineContent":[{"type":"codeVoice","code":".rateLimitExceeded"}],"type":"paragraph"}],"justification":[{"inlineContent":[{"type":"text","text":"Rate limit errors occur when you make too many requests in a short time."}],"type":"paragraph"}],"isCorrect":true},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".networkError"}]}],"justification":[{"type":"paragraph","inlineContent":[{"text":"Network errors indicate connection or timeout issues.","type":"text"}]}],"isCorrect":false}]},{"title":[{"inlineContent":[{"text":"What’s the best practice for handling transient network errors?","type":"text"}],"type":"paragraph"}],"type":"multiple-choice","content":[],"choices":[{"content":[{"inlineContent":[{"text":"Implement retry logic with exponential backoff.","type":"text"}],"type":"paragraph"}],"isCorrect":true,"justification":[{"inlineContent":[{"type":"text","text":"Exponential backoff prevents overwhelming the server while giving transient issues time to resolve."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Immediately show an error to the user."}]}],"isCorrect":false,"justification":[{"type":"paragraph","inlineContent":[{"text":"Many network errors are temporary and can be resolved with a retry.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Retry indefinitely until it succeeds.","type":"text"}],"type":"paragraph"}],"isCorrect":false,"justification":[{"inlineContent":[{"type":"text","text":"Infinite retries can drain battery and frustrate users. Always have a retry limit."}],"type":"paragraph"}]}]}],"anchor":"Check-Your-Understanding","kind":"assessments"},{"abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"featuredEyebrow":"Tutorial","title":"Building Conversations","action":{"isActive":true,"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations","type":"reference","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"overridingTitle":"Get started"},"kind":"callToAction"}],"references":{"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Advanced-Transcription-Options":{"title":"Advanced Transcription Options","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Advanced-Transcription-Options","url":"\/tutorials\/openaikit\/08-transcribing-audio#Advanced-Transcription-Options"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Basic-Audio-Transcription":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Basic-Audio-Transcription","role":"pseudoSymbol","title":"Basic Audio Transcription","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"url":"\/tutorials\/openaikit\/08-transcribing-audio#Basic-Audio-Transcription","kind":"section"},"retry-02-backoff.swift":{"fileName":"RetryLogic.swift","type":"file","syntax":"swift","identifier":"retry-02-backoff.swift","content":["\/\/ Exponential backoff retry","import Foundation","","class ExponentialBackoffRetry {","    static func retry<T>(","        maxAttempts: Int = 3,","        initialDelay: TimeInterval = 1.0,","        maxDelay: TimeInterval = 60.0,","        multiplier: Double = 2.0,","        shouldRetry: @escaping (Error) -> Bool = { _ in true },","        operation: @escaping () async throws -> T","    ) async throws -> T {","        var currentDelay = initialDelay","        var lastError: Error?","        ","        for attempt in 1...maxAttempts {","            do {","                return try await operation()","            } catch {","                lastError = error","                ","                \/\/ Check if we should retry this error","                guard shouldRetry(error) else {","                    throw error","                }","                ","                if attempt < maxAttempts {","                    \/\/ Add jitter to prevent thundering herd","                    let jitter = Double.random(in: 0.8...1.2)","                    let delay = min(currentDelay * jitter, maxDelay)","                    ","                    print(\"Attempt \\(attempt) failed. Retrying in \\(String(format: \"%.1f\", delay)) seconds...\")","                    ","                    try await Task.sleep(nanoseconds: UInt64(delay * 1_000_000_000))","                    ","                    \/\/ Increase delay for next attempt","                    currentDelay = min(currentDelay * multiplier, maxDelay)","                }","            }","        }","        ","        throw RetryError.maxAttemptsExceeded","    }","}","","\/\/ Usage with OpenAI","func sendMessageWithRetry(_ message: String) async throws -> String {","    try await ExponentialBackoffRetry.retry(","        maxAttempts: 3,","        initialDelay: 1.0,","        shouldRetry: { error in","            \/\/ Only retry certain errors","            if let apiError = error as? APIError {","                return ErrorAnalyzer.analyze(apiError).isRetryable","            }","            return error is URLError","        }","    ) {","        try await sendChatMessage(message)","    }","}"],"fileType":"swift","highlights":[{"line":1},{"line":4},{"line":7},{"line":8},{"line":9},{"line":10},{"line":13},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":35},{"line":36},{"line":37},{"line":42},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":58},{"line":59}]},"errors-02-function.swift":{"syntax":"swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15}],"fileName":"ErrorHandling.swift","fileType":"swift","type":"file","identifier":"errors-02-function.swift","content":["\/\/ ErrorHandling.swift","import Foundation","import OpenAIKit","","func sendChatMessage(_ message: String) async throws -> String {","    let openAI = OpenAIManager.shared.client!","    ","    let request = ChatCompletionRequest(","        messages: [ChatMessage(role: .user, content: message)],","        model: \"gpt-4o-mini\"","    )","    ","    let response = try await openAI.chat.completions(request)","    return response.choices.first?.message.content ?? \"\"","}"]},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Check-Your-Understanding":{"type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Check-Your-Understanding","url":"\/tutorials\/openaikit\/05-building-conversations#Check-Your-Understanding","title":"Check Your Understanding","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}]},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Check-Your-Understanding":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Check-Your-Understanding","title":"Check Your Understanding","url":"\/tutorials\/openaikit\/03-working-with-functions#Check-Your-Understanding","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"type":"link"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Understanding-Streaming":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Understanding-Streaming","type":"section","role":"pseudoSymbol","title":"Understanding Streaming","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"url":"\/tutorials\/openaikit\/06-streaming-responses#Understanding-Streaming","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion","role":"project","title":"Your First Chat Completion","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"estimatedTime":"15min","url":"\/tutorials\/openaikit\/02-your-first-chat-completion","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Streaming-Research-Responses":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Streaming-Research-Responses","role":"pseudoSymbol","title":"Streaming Research Responses","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Streaming-Research-Responses","kind":"section"},"handler-02-tracking.swift":{"fileName":"ErrorHandler.swift","type":"file","syntax":"swift","content":["\/\/ Error tracking and analytics","import Foundation","","class ErrorTracker {","    static let shared = ErrorTracker()","    ","    private var errorCounts: [String: Int] = [:]","    private var errorTimestamps: [String: [Date]] = [:]","    private let windowSize: TimeInterval = 3600 \/\/ 1 hour","    ","    func track(_ error: Error, operation: String) {","        let errorKey = key(for: error)","        ","        \/\/ Update count","        errorCounts[errorKey, default: 0] += 1","        ","        \/\/ Track timestamp","        var timestamps = errorTimestamps[errorKey, default: []]","        timestamps.append(Date())","        ","        \/\/ Remove old timestamps","        let cutoff = Date().addingTimeInterval(-windowSize)","        timestamps.removeAll { $0 < cutoff }","        ","        errorTimestamps[errorKey] = timestamps","        ","        \/\/ Check for error patterns","        checkErrorPatterns(errorKey: errorKey, timestamps: timestamps)","    }","    ","    private func key(for error: Error) -> String {","        let details = ErrorAnalyzer.analyze(error)","        return \"\\(details.type)_\\(details.code)\"","    }","    ","    private func checkErrorPatterns(errorKey: String, timestamps: [Date]) {","        \/\/ Alert if too many errors in time window","        if timestamps.count > 10 {","            notifyHighErrorRate(errorKey: errorKey, count: timestamps.count)","        }","    }","    ","    private func notifyHighErrorRate(errorKey: String, count: Int) {","        print(\"⚠️ High error rate detected: \\(errorKey) occurred \\(count) times in the last hour\")","        ","        \/\/ Could send to analytics service","        \/\/ Analytics.track(\"high_error_rate\", properties: [\"error\": errorKey, \"count\": count])","    }","    ","    func errorRate(for errorKey: String) -> Double {","        let timestamps = errorTimestamps[errorKey, default: []]","        let recentTimestamps = timestamps.filter { ","            $0 > Date().addingTimeInterval(-windowSize) ","        }","        ","        return Double(recentTimestamps.count) \/ (windowSize \/ 60) \/\/ errors per minute","    }","    ","    func mostCommonErrors(limit: Int = 5) -> [(error: String, count: Int)] {","        errorCounts","            .sorted { $0.value > $1.value }","            .prefix(limit)","            .map { ($0.key, $0.value) }","    }","}","","\/\/ Error Dashboard View","struct ErrorDashboard: View {","    @State private var commonErrors: [(error: String, count: Int)] = []","    ","    var body: some View {","        VStack(alignment: .leading) {","            Text(\"Error Analytics\")","                .font(.title)","            ","            ForEach(commonErrors, id: \\.error) { item in","                HStack {","                    Text(item.error)","                        .font(.caption)","                    Spacer()","                    Text(\"\\(item.count)\")","                        .fontWeight(.semibold)","                }","                .padding(.vertical, 4)","            }","        }","        .onAppear {","            commonErrors = ErrorTracker.shared.mostCommonErrors()","        }","    }","}"],"identifier":"handler-02-tracking.swift","fileType":"swift","highlights":[{"line":1},{"line":4},{"line":5},{"line":7},{"line":8},{"line":9},{"line":11},{"line":12},{"line":14},{"line":15},{"line":17},{"line":18},{"line":19},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":55},{"line":56},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90}]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Security-and-Privacy-Considerations":{"title":"Security and Privacy Considerations","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Security-and-Privacy-Considerations","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Security-and-Privacy-Considerations"},"messages-02-mapping.swift":{"syntax":"swift","highlights":[{"line":1},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":23},{"line":25},{"line":27},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":53},{"line":54},{"line":55},{"line":57},{"line":59},{"line":61},{"line":62},{"line":63},{"line":64},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107}],"fileName":"ErrorMessages.swift","fileType":"swift","type":"file","identifier":"messages-02-mapping.swift","content":["\/\/ Error context and recovery suggestions","import Foundation","","struct ErrorContext {","    let error: Error","    let operation: String","    let context: [String: Any]","    ","    func userMessage() -> UserErrorMessage {","        let details = ErrorAnalyzer.analyze(error)","        ","        return UserErrorMessage(","            title: title(for: details),","            message: message(for: details),","            actions: suggestedActions(for: details),","            icon: icon(for: details)","        )","    }","    ","    private func title(for details: ErrorDetails) -> String {","        switch details.type {","        case .api:","            return \"Service Error\"","        case .network:","            return \"Connection Error\"","        case .unknown:","            return \"Unexpected Error\"","        }","    }","    ","    private func message(for details: ErrorDetails) -> String {","        switch operation {","        case \"chat\":","            return \"Unable to send your message. \\(details.suggestedAction)\"","        case \"image_generation\":","            return \"Unable to generate image. \\(details.suggestedAction)\"","        case \"transcription\":","            return \"Unable to transcribe audio. \\(details.suggestedAction)\"","        default:","            return ErrorMessageMapper.userFriendlyMessage(for: error)","        }","    }","    ","    private func suggestedActions(for details: ErrorDetails) -> [ErrorAction] {","        var actions: [ErrorAction] = []","        ","        if details.isRetryable {","            actions.append(.retry)","        }","        ","        switch details.code {","        case \"invalid_api_key\":","            actions.append(.configure)","        case \"rate_limit_exceeded\":","            actions.append(.wait(seconds: 60))","        case \"context_length_exceeded\":","            actions.append(.reduce)","        default:","            break","        }","        ","        actions.append(.dismiss)","        ","        return actions","    }","    ","    private func icon(for details: ErrorDetails) -> String {","        switch details.type {","        case .api:","            return \"exclamationmark.triangle\"","        case .network:","            return \"wifi.exclamationmark\"","        case .unknown:","            return \"questionmark.circle\"","        }","    }","}","","struct UserErrorMessage {","    let title: String","    let message: String","    let actions: [ErrorAction]","    let icon: String","}","","enum ErrorAction {","    case retry","    case dismiss","    case configure","    case wait(seconds: Int)","    case reduce","    case contactSupport","    ","    var title: String {","        switch self {","        case .retry:","            return \"Try Again\"","        case .dismiss:","            return \"OK\"","        case .configure:","            return \"Settings\"","        case .wait(let seconds):","            return \"Wait \\(seconds)s\"","        case .reduce:","            return \"Shorten Message\"","        case .contactSupport:","            return \"Get Help\"","        }","    }","}"]},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#User-Friendly-Error-Messages":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#User-Friendly-Error-Messages","type":"section","role":"pseudoSymbol","title":"User-Friendly Error Messages","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"url":"\/tutorials\/openaikit\/04-handling-errors#User-Friendly-Error-Messages","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Understanding-Chat-Messages":{"title":"Understanding Chat Messages","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Understanding-Chat-Messages","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Understanding-Chat-Messages"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Understanding-Embeddings":{"title":"Understanding Embeddings","abstract":[{"text":"Create intelligent search systems using embeddings to find semantically similar content.","type":"text"}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Understanding-Embeddings","url":"\/tutorials\/openaikit\/09-building-semantic-search#Understanding-Embeddings"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit","role":"project","title":"Setting Up OpenAIKit","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"estimatedTime":"10min","url":"\/tutorials\/openaikit\/01-setting-up-openaikit","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis","role":"project","title":"Deep Research and Analysis","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"estimatedTime":"25min","url":"\/tutorials\/openaikit\/09-deep-research-analysis","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses","type":"topic","role":"project","title":"Streaming Responses","abstract":[{"text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated.","type":"text"}],"estimatedTime":"15min","url":"\/tutorials\/openaikit\/06-streaming-responses","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Multimodal-AI":{"title":"Multimodal AI","abstract":[],"role":"article","kind":"article","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Multimodal-AI","url":"\/tutorials\/openaikit-tutorials\/multimodal-ai"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Advanced-Conversation-Patterns":{"title":"Advanced Conversation Patterns","abstract":[{"text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions.","type":"text"}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Advanced-Conversation-Patterns","url":"\/tutorials\/openaikit\/05-building-conversations#Advanced-Conversation-Patterns"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Create-a-Simple-Chat-Request":{"title":"Create a Simple Chat Request","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Create-a-Simple-Chat-Request","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Create-a-Simple-Chat-Request"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Code-Interpreter-for-Data-Analysis":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Code-Interpreter-for-Data-Analysis","role":"pseudoSymbol","title":"Code Interpreter for Data Analysis","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Code-Interpreter-for-Data-Analysis","kind":"section"},"retry-01-wrapper.swift":{"fileName":"RetryLogic.swift","type":"file","syntax":"swift","content":["\/\/ RetryWrapper.swift","import Foundation","","class RetryWrapper {","    static func retry<T>(","        maxAttempts: Int = 3,","        delay: TimeInterval = 1.0,","        operation: @escaping () async throws -> T","    ) async throws -> T {","        var lastError: Error?","        ","        for attempt in 1...maxAttempts {","            do {","                return try await operation()","            } catch {","                lastError = error","                ","                if attempt < maxAttempts {","                    \/\/ Wait before retrying","                    try await Task.sleep(nanoseconds: UInt64(delay * 1_000_000_000))","                }","            }","        }","        ","        throw lastError ?? RetryError.unknownError","    }","}","","enum RetryError: LocalizedError {","    case unknownError","    case maxAttemptsExceeded","    ","    var errorDescription: String? {","        switch self {","        case .unknownError:","            return \"An unknown error occurred\"","        case .maxAttemptsExceeded:","            return \"Maximum retry attempts exceeded\"","        }","    }","}"],"identifier":"retry-01-wrapper.swift","fileType":"swift","highlights":[]},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Managing-Conversation-Context":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Managing-Conversation-Context","role":"pseudoSymbol","title":"Managing Conversation Context","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"url":"\/tutorials\/openaikit\/05-building-conversations#Managing-Conversation-Context","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Check-Your-Understanding":{"type":"link","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Check-Your-Understanding","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Check-Your-Understanding","title":"Check Your Understanding","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}]},"doc://OpenAIKit/tutorials/OpenAIKit/07-Generating-Images#Understanding-Image-Models":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images#Understanding-Image-Models","role":"pseudoSymbol","title":"Understanding Image Models","abstract":[{"type":"text","text":"Master image generation using DALL-E 2, DALL-E 3, and the advanced GPT Image 1 model. Learn to select the right model, handle errors professionally, and build production-ready image generation features."}],"url":"\/tutorials\/openaikit\/07-generating-images#Understanding-Image-Models","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Building-a-Streaming-UI":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Building-a-Streaming-UI","type":"section","role":"pseudoSymbol","title":"Building a Streaming UI","abstract":[{"text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated.","type":"text"}],"url":"\/tutorials\/openaikit\/06-streaming-responses#Building-a-Streaming-UI","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Semantic-Search-Engine":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Semantic-Search-Engine","role":"pseudoSymbol","title":"Semantic Search Engine","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"url":"\/tutorials\/openaikit\/09-building-semantic-search#Semantic-Search-Engine","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Web-Search-Research":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Web-Search-Research","role":"pseudoSymbol","title":"Web Search Research","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Web-Search-Research","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Obtain-an-API-Key":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Obtain-an-API-Key","type":"section","role":"pseudoSymbol","title":"Obtain an API Key","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Obtain-an-API-Key","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Audio-Translation":{"title":"Audio Translation","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Audio-Translation","url":"\/tutorials\/openaikit\/08-transcribing-audio#Audio-Translation"},"retry-03-implementation.swift":{"syntax":"swift","highlights":[{"line":1},{"line":3},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":31},{"line":33},{"line":34},{"line":35},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":56},{"line":57},{"line":58},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91}],"fileName":"RetryLogic.swift","fileType":"swift","type":"file","identifier":"retry-03-implementation.swift","content":["\/\/ Complete retry implementation","import Foundation","import OpenAIKit","","class RetryableOpenAIClient {","    let client: OpenAIKit","    let retryConfig: RetryConfiguration","    ","    struct RetryConfiguration {","        let maxAttempts: Int","        let initialDelay: TimeInterval","        let maxDelay: TimeInterval","        let multiplier: Double","        ","        static let `default` = RetryConfiguration(","            maxAttempts: 3,","            initialDelay: 1.0,","            maxDelay: 30.0,","            multiplier: 2.0","        )","    }","    ","    init(client: OpenAIKit, retryConfig: RetryConfiguration = .default) {","        self.client = client","        self.retryConfig = retryConfig","    }","    ","    func completions(_ request: ChatCompletionRequest) async throws -> ChatCompletionResponse {","        var currentDelay = retryConfig.initialDelay","        var lastError: Error?","        var attemptCount = 0","        ","        for attempt in 1...retryConfig.maxAttempts {","            attemptCount = attempt","            ","            do {","                let response = try await client.chat.completions(request)","                ","                \/\/ Log success after retry","                if attempt > 1 {","                    print(\"Request succeeded after \\(attempt) attempts\")","                }","                ","                return response","            } catch {","                lastError = error","                ","                \/\/ Analyze error","                let errorDetails = ErrorAnalyzer.analyze(error)","                ","                \/\/ Don't retry non-retryable errors","                guard errorDetails.isRetryable else {","                    throw error","                }","                ","                \/\/ Don't retry on last attempt","                guard attempt < retryConfig.maxAttempts else {","                    break","                }","                ","                \/\/ Calculate delay with jitter","                let jitter = Double.random(in: 0.8...1.2)","                let delay = min(currentDelay * jitter, retryConfig.maxDelay)","                ","                print(\"Attempt \\(attempt) failed: \\(errorDetails.message)\")","                print(\"Retrying in \\(String(format: \"%.1f\", delay)) seconds...\")","                ","                \/\/ Wait before retry","                try await Task.sleep(nanoseconds: UInt64(delay * 1_000_000_000))","                ","                \/\/ Increase delay for next attempt","                currentDelay = min(currentDelay * retryConfig.multiplier, retryConfig.maxDelay)","            }","        }","        ","        \/\/ All attempts failed","        throw RetryError.allAttemptsFailed(","            attempts: attemptCount,","            lastError: lastError","        )","    }","}","","enum RetryError: LocalizedError {","    case allAttemptsFailed(attempts: Int, lastError: Error?)","    ","    var errorDescription: String? {","        switch self {","        case .allAttemptsFailed(let attempts, let error):","            let errorMessage = error?.localizedDescription ?? \"Unknown error\"","            return \"All \\(attempts) attempts failed. Last error: \\(errorMessage)\"","        }","    }","}"]},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Implementing-the-Weather-Function":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Implementing-the-Weather-Function","role":"pseudoSymbol","title":"Implementing the Weather Function","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"url":"\/tutorials\/openaikit\/03-working-with-functions#Implementing-the-Weather-Function","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors":{"title":"Handling Errors","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors","url":"\/tutorials\/openaikit\/04-handling-errors","estimatedTime":"12min"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Building-a-Robust-Error-Handler":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Building-a-Robust-Error-Handler","type":"section","role":"pseudoSymbol","title":"Building a Robust Error Handler","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"url":"\/tutorials\/openaikit\/04-handling-errors#Building-a-Robust-Error-Handler","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Cross-Platform-Streaming":{"title":"Cross-Platform Streaming","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Cross-Platform-Streaming","url":"\/tutorials\/openaikit\/06-streaming-responses#Cross-Platform-Streaming"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Understanding-OpenAIKit-Errors":{"title":"Understanding OpenAIKit Errors","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Understanding-OpenAIKit-Errors","url":"\/tutorials\/openaikit\/04-handling-errors#Understanding-OpenAIKit-Errors"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Building-a-Chat-Interface":{"title":"Building a Chat Interface","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Building-a-Chat-Interface","url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Building-a-Chat-Interface"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Building-a-Voice-Notes-App":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Building-a-Voice-Notes-App","role":"pseudoSymbol","title":"Building a Voice Notes App","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"url":"\/tutorials\/openaikit\/08-transcribing-audio#Building-a-Voice-Notes-App","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Check-Your-Understanding":{"type":"link","url":"\/tutorials\/openaikit\/04-handling-errors#Check-Your-Understanding","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Check-Your-Understanding","title":"Check Your Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Introduction-to-DeepResearch":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Introduction-to-DeepResearch","role":"pseudoSymbol","title":"Introduction to DeepResearch","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"url":"\/tutorials\/openaikit\/09-deep-research-analysis#Introduction-to-DeepResearch","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Install-OpenAIKit":{"title":"Install OpenAIKit","abstract":[{"text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API.","type":"text"}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Install-OpenAIKit","url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Install-OpenAIKit"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search","type":"topic","role":"project","title":"Building Semantic Search","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"estimatedTime":"20min","url":"\/tutorials\/openaikit\/09-building-semantic-search","kind":"project"},"messages-04-actionable.swift":{"fileName":"ErrorMessages.swift","type":"file","syntax":"swift","identifier":"messages-04-actionable.swift","content":["\/\/ Actionable error messages with recovery","import SwiftUI","","struct ActionableError: Identifiable {","    let id = UUID()","    let error: Error","    let context: ErrorContext","    let recovery: ErrorRecovery?","    ","    var userMessage: UserErrorMessage {","        context.userMessage()","    }","}","","protocol ErrorRecovery {","    func attemptRecovery() async -> Bool","}","","struct RetryRecovery: ErrorRecovery {","    let action: () async throws -> Void","    ","    func attemptRecovery() async -> Bool {","        do {","            try await action()","            return true","        } catch {","            return false","        }","    }","}","","struct ConfigurationRecovery: ErrorRecovery {","    let openSettings: () -> Void","    ","    func attemptRecovery() async -> Bool {","        openSettings()","        return true","    }","}","","\/\/ SwiftUI Error Presentation","struct ActionableErrorView: View {","    let error: ActionableError","    @Environment(\\.dismiss) var dismiss","    @State private var isRecovering = false","    ","    var body: some View {","        VStack(spacing: 20) {","            Image(systemName: error.userMessage.icon)","                .font(.system(size: 50))","                .foregroundColor(.red)","            ","            Text(error.userMessage.title)","                .font(.title2)","                .fontWeight(.semibold)","            ","            Text(error.userMessage.message)","                .multilineTextAlignment(.center)","                .foregroundColor(.secondary)","            ","            VStack(spacing: 12) {","                ForEach(error.userMessage.actions, id: \\.title) { action in","                    Button(action: {","                        handleAction(action)","                    }) {","                        Text(action.title)","                            .frame(maxWidth: .infinity)","                            .padding()","                            .background(backgroundForAction(action))","                            .foregroundColor(foregroundForAction(action))","                            .cornerRadius(10)","                    }","                    .disabled(isRecovering)","                }","            }","            .padding(.top)","            ","            if isRecovering {","                ProgressView(\"Recovering...\")","                    .padding()","            }","        }","        .padding()","        .frame(maxWidth: 400)","    }","    ","    private func handleAction(_ action: ErrorAction) {","        switch action {","        case .retry:","            if let recovery = error.recovery {","                Task {","                    isRecovering = true","                    let success = await recovery.attemptRecovery()","                    isRecovering = false","                    if success {","                        dismiss()","                    }","                }","            }","        case .dismiss:","            dismiss()","        case .configure:","            if let recovery = error.recovery as? ConfigurationRecovery {","                Task {","                    _ = await recovery.attemptRecovery()","                    dismiss()","                }","            }","        case .wait:","            dismiss()","        default:","            dismiss()","        }","    }","    ","    private func backgroundForAction(_ action: ErrorAction) -> Color {","        switch action {","        case .retry:","            return .blue","        case .dismiss:","            return Color(.systemGray5)","        default:","            return Color(.systemGray6)","        }","    }","    ","    private func foregroundForAction(_ action: ErrorAction) -> Color {","        switch action {","        case .retry:","            return .white","        default:","            return .primary","        }","    }","}"],"fileType":"swift","highlights":[{"line":1},{"line":2},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134}]},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Handling-Large-Audio-Files":{"title":"Handling Large Audio Files","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Handling-Large-Audio-Files","url":"\/tutorials\/openaikit\/08-transcribing-audio#Handling-Large-Audio-Files"},"errors-04-specific.swift":{"syntax":"swift","highlights":[{"line":1},{"line":5},{"line":6},{"line":7},{"line":8},{"line":17},{"line":18},{"line":19},{"line":21},{"line":22},{"line":23},{"line":25},{"line":26},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52}],"fileName":"ErrorHandling.swift","fileType":"swift","type":"file","identifier":"errors-04-specific.swift","content":["\/\/ ErrorHandling.swift - Handling specific errors","import Foundation","import OpenAIKit","","func sendChatMessage(_ message: String) async -> Result<String, ChatError> {","    guard let openAI = OpenAIManager.shared.client else {","        return .failure(.clientNotInitialized)","    }","    ","    let request = ChatCompletionRequest(","        messages: [ChatMessage(role: .user, content: message)],","        model: \"gpt-4o-mini\"","    )","    ","    do {","        let response = try await openAI.chat.completions(request)","        guard let content = response.choices.first?.message.content else {","            return .failure(.noContent)","        }","        return .success(content)","    } catch let error as APIError {","        \/\/ Handle API errors","        return .failure(.apiError(error))","    } catch {","        \/\/ Handle other errors","        return .failure(.networkError(error))","    }","}","","enum ChatError: LocalizedError {","    case clientNotInitialized","    case noContent","    case apiError(APIError)","    case networkError(Error)","    case rateLimitExceeded","    case invalidRequest(String)","    ","    var errorDescription: String? {","        switch self {","        case .clientNotInitialized:","            return \"OpenAI client is not initialized\"","        case .noContent:","            return \"No content in response\"","        case .apiError(let error):","            return \"API Error: \\(error.error.message)\"","        case .networkError(let error):","            return \"Network Error: \\(error.localizedDescription)\"","        case .rateLimitExceeded:","            return \"Rate limit exceeded. Please try again later.\"","        case .invalidRequest(let reason):","            return \"Invalid request: \\(reason)\"","        }","    }","}"]},"handler-04-ui.swift":{"fileName":"ErrorHandler.swift","type":"file","syntax":"swift","identifier":"handler-04-ui.swift","content":["\/\/ Error UI components","import SwiftUI","","struct ErrorBanner: View {","    let error: Error","    let onDismiss: () -> Void","    let onRetry: (() -> Void)?","    ","    @State private var isExpanded = false","    ","    var body: some View {","        VStack(alignment: .leading, spacing: 8) {","            HStack {","                Image(systemName: \"exclamationmark.triangle.fill\")","                    .foregroundColor(.yellow)","                ","                Text(ErrorMessageMapper.userFriendlyMessage(for: error))","                    .font(.subheadline)","                    .lineLimit(isExpanded ? nil : 1)","                ","                Spacer()","                ","                if !isExpanded {","                    Button(action: { isExpanded = true }) {","                        Image(systemName: \"chevron.down\")","                            .font(.caption)","                    }","                }","                ","                Button(action: onDismiss) {","                    Image(systemName: \"xmark\")","                        .font(.caption)","                }","            }","            ","            if isExpanded {","                VStack(alignment: .leading, spacing: 8) {","                    Text(\"Details:\")","                        .font(.caption)","                        .fontWeight(.semibold)","                    ","                    Text(error.localizedDescription)","                        .font(.caption)","                        .foregroundColor(.secondary)","                    ","                    if let retry = onRetry {","                        Button(\"Try Again\", action: retry)","                            .font(.caption)","                            .padding(.top, 4)","                    }","                }","                .padding(.top, 4)","            }","        }","        .padding()","        .background(Color(.systemYellow).opacity(0.1))","        .cornerRadius(8)","        .overlay(","            RoundedRectangle(cornerRadius: 8)","                .stroke(Color(.systemYellow).opacity(0.3), lineWidth: 1)","        )","        .animation(.easeInOut(duration: 0.2), value: isExpanded)","    }","}","","\/\/ Error toast notification","struct ErrorToast: View {","    let message: String","    ","    var body: some View {","        HStack(spacing: 12) {","            Image(systemName: \"exclamationmark.circle.fill\")","                .foregroundColor(.white)","            ","            Text(message)","                .font(.subheadline)","                .foregroundColor(.white)","        }","        .padding()","        .background(Color.red)","        .cornerRadius(8)","        .shadow(radius: 4)","        .transition(.move(edge: .top).combined(with: .opacity))","    }","}","","\/\/ Error handling view modifier","struct ErrorHandling: ViewModifier {","    @StateObject private var errorHandler = CentralizedErrorHandler.shared","    ","    func body(content: Content) -> some View {","        content","            .sheet(item: $errorHandler.currentError) { error in","                ActionableErrorView(error: error)","            }","            .overlay(alignment: .top) {","                if let error = errorHandler.currentError,","                   !errorHandler.isShowingError {","                    ErrorToast(message: error.userMessage.message)","                        .padding(.top)","                        .onTapGesture {","                            errorHandler.isShowingError = true","                        }","                        .onAppear {","                            DispatchQueue.main.asyncAfter(deadline: .now() + 3) {","                                if !errorHandler.isShowingError {","                                    errorHandler.currentError = nil","                                }","                            }","                        }","                }","            }","    }","}","","extension View {","    func handlesErrors() -> some View {","        modifier(ErrorHandling())","    }","}"],"fileType":"swift","highlights":[{"line":1},{"line":2},{"line":4},{"line":5},{"line":6},{"line":7},{"line":9},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":52},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":66},{"line":67},{"line":68},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":87},{"line":88},{"line":89},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":116},{"line":117},{"line":118}]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Vector-Similarity-Search":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Vector-Similarity-Search","role":"pseudoSymbol","title":"Vector Similarity Search","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"url":"\/tutorials\/openaikit\/09-building-semantic-search#Vector-Similarity-Search","kind":"section"},"handler-01-class.swift":{"syntax":"swift","highlights":[],"fileName":"ErrorHandler.swift","fileType":"swift","type":"file","identifier":"handler-01-class.swift","content":["\/\/ CentralizedErrorHandler.swift","import Foundation","import Combine","","@MainActor","class CentralizedErrorHandler: ObservableObject {","    static let shared = CentralizedErrorHandler()","    ","    @Published var currentError: ActionableError?","    @Published var errorHistory: [ErrorRecord] = []","    @Published var isShowingError = false","    ","    private init() {}","    ","    func handle(","        _ error: Error,","        operation: String,","        context: [String: Any] = [:],","        recovery: ErrorRecovery? = nil","    ) {","        let errorContext = ErrorContext(","            error: error,","            operation: operation,","            context: context","        )","        ","        let actionableError = ActionableError(","            error: error,","            context: errorContext,","            recovery: recovery","        )","        ","        currentError = actionableError","        isShowingError = true","        ","        \/\/ Record error","        recordError(error, operation: operation)","    }","    ","    private func recordError(_ error: Error, operation: String) {","        let record = ErrorRecord(","            timestamp: Date(),","            error: error,","            operation: operation,","            resolved: false","        )","        ","        errorHistory.append(record)","        ","        \/\/ Keep only last 50 errors","        if errorHistory.count > 50 {","            errorHistory.removeFirst()","        }","    }","}","","struct ErrorRecord: Identifiable {","    let id = UUID()","    let timestamp: Date","    let error: Error","    let operation: String","    var resolved: Bool","}"]},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Advanced-Function-Patterns":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Advanced-Function-Patterns","role":"pseudoSymbol","title":"Advanced Function Patterns","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"url":"\/tutorials\/openaikit\/03-working-with-functions#Advanced-Function-Patterns","kind":"section"},"handler-05-state.swift":{"fileName":"ErrorHandler.swift","type":"file","syntax":"swift","content":["\/\/ Error state management","import SwiftUI","import Combine","","@MainActor","class ErrorStateManager: ObservableObject {","    @Published var errors: [UUID: Error] = [:]","    @Published var isRetrying: [UUID: Bool] = [:]","    @Published var errorStates: [UUID: ErrorState] = [:]","    ","    enum ErrorState {","        case active","        case recovering","        case resolved","        case dismissed","    }","    ","    func setError(_ error: Error, for id: UUID) {","        errors[id] = error","        errorStates[id] = .active","    }","    ","    func clearError(for id: UUID) {","        errors.removeValue(forKey: id)","        errorStates.removeValue(forKey: id)","        isRetrying.removeValue(forKey: id)","    }","    ","    func startRetry(for id: UUID) {","        isRetrying[id] = true","        errorStates[id] = .recovering","    }","    ","    func endRetry(for id: UUID, success: Bool) {","        isRetrying[id] = false","        if success {","            errorStates[id] = .resolved","            \/\/ Clear after animation","            DispatchQueue.main.asyncAfter(deadline: .now() + 1) {","                self.clearError(for: id)","            }","        } else {","            errorStates[id] = .active","        }","    }","}","","\/\/ Usage in a view","struct ContentViewWithErrors: View {","    @StateObject private var errorManager = ErrorStateManager()","    @State private var taskId = UUID()","    ","    var body: some View {","        VStack {","            \/\/ Main content","            Button(\"Perform Task\") {","                Task {","                    await performTask()","                }","            }","            ","            \/\/ Error display","            if let error = errorManager.errors[taskId] {","                ErrorRow(","                    error: error,","                    state: errorManager.errorStates[taskId] ?? .active,","                    isRetrying: errorManager.isRetrying[taskId] ?? false,","                    onRetry: {","                        Task {","                            await retryTask()","                        }","                    },","                    onDismiss: {","                        errorManager.clearError(for: taskId)","                    }","                )","                .transition(.asymmetric(","                    insertion: .move(edge: .top).combined(with: .opacity),","                    removal: .scale.combined(with: .opacity)","                ))","            }","        }","        .animation(.spring(), value: errorManager.errors.count)","    }","    ","    private func performTask() async {","        do {","            \/\/ Perform operation","            _ = try await sendChatMessage(\"Hello\")","        } catch {","            errorManager.setError(error, for: taskId)","        }","    }","    ","    private func retryTask() async {","        errorManager.startRetry(for: taskId)","        ","        do {","            \/\/ Retry operation","            _ = try await sendChatMessage(\"Hello\")","            errorManager.endRetry(for: taskId, success: true)","        } catch {","            errorManager.setError(error, for: taskId)","            errorManager.endRetry(for: taskId, success: false)","        }","    }","}","","struct ErrorRow: View {","    let error: Error","    let state: ErrorStateManager.ErrorState","    let isRetrying: Bool","    let onRetry: () -> Void","    let onDismiss: () -> Void","    ","    var body: some View {","        HStack {","            Image(systemName: iconName)","                .foregroundColor(iconColor)","                .animation(.easeInOut, value: state)","            ","            VStack(alignment: .leading) {","                Text(ErrorMessageMapper.userFriendlyMessage(for: error))","                    .font(.subheadline)","                ","                if state == .resolved {","                    Text(\"Resolved\")","                        .font(.caption)","                        .foregroundColor(.green)","                }","            }","            ","            Spacer()","            ","            if isRetrying {","                ProgressView()","                    .scaleEffect(0.8)","            } else if state == .active {","                Button(\"Retry\", action: onRetry)","                    .font(.caption)","            }","            ","            Button(action: onDismiss) {","                Image(systemName: \"xmark\")","                    .font(.caption)","            }","        }","        .padding()","        .background(backgroundColor)","        .cornerRadius(8)","    }","    ","    private var iconName: String {","        switch state {","        case .active:","            return \"exclamationmark.triangle.fill\"","        case .recovering:","            return \"arrow.clockwise\"","        case .resolved:","            return \"checkmark.circle.fill\"","        case .dismissed:","            return \"xmark.circle\"","        }","    }","    ","    private var iconColor: Color {","        switch state {","        case .active:","            return .red","        case .recovering:","            return .orange","        case .resolved:","            return .green","        case .dismissed:","            return .gray","        }","    }","    ","    private var backgroundColor: Color {","        switch state {","        case .active:","            return Color(.systemRed).opacity(0.1)","        case .recovering:","            return Color(.systemOrange).opacity(0.1)","        case .resolved:","            return Color(.systemGreen).opacity(0.1)","        case .dismissed:","            return Color(.systemGray).opacity(0.1)","        }","    }","}"],"identifier":"handler-05-state.swift","fileType":"swift","highlights":[{"line":1},{"line":3},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":83},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":117},{"line":118},{"line":119},{"line":120},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":149},{"line":153},{"line":154},{"line":155},{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162},{"line":163},{"line":165},{"line":166},{"line":167},{"line":168},{"line":169},{"line":170},{"line":171},{"line":172},{"line":173},{"line":174},{"line":175},{"line":176},{"line":178},{"line":179},{"line":180},{"line":181},{"line":182},{"line":183},{"line":184},{"line":185},{"line":186},{"line":187},{"line":188},{"line":189},{"line":190}]},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Building-a-Complete-Chatbot":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Building-a-Complete-Chatbot","role":"pseudoSymbol","title":"Building a Complete Chatbot","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"url":"\/tutorials\/openaikit\/05-building-conversations#Building-a-Complete-Chatbot","kind":"section"},"messages-01-mapper.swift":{"syntax":"swift","highlights":[],"fileName":"ErrorMessages.swift","fileType":"swift","type":"file","identifier":"messages-01-mapper.swift","content":["\/\/ ErrorMessageMapper.swift","import Foundation","","struct ErrorMessageMapper {","    static func userFriendlyMessage(for error: Error) -> String {","        if let chatError = error as? ChatError {","            return chatError.userMessage","        }","        ","        let details = ErrorAnalyzer.analyze(error)","        ","        switch details.type {","        case .api:","            return mapAPIError(code: details.code)","        case .network:","            return mapNetworkError(details)","        case .unknown:","            return \"Something went wrong. Please try again.\"","        }","    }","    ","    private static func mapAPIError(code: String) -> String {","        switch code {","        case \"rate_limit_exceeded\":","            return \"You're sending messages too quickly. Please wait a moment.\"","        case \"invalid_api_key\":","            return \"Authentication failed. Please check your settings.\"","        case \"context_length_exceeded\":","            return \"Your message is too long. Please try a shorter message.\"","        case \"model_not_found\":","            return \"The AI model is not available. Please try again.\"","        case \"server_error\":","            return \"The service is temporarily unavailable. Please try again.\"","        default:","            return \"Unable to process your request. Please try again.\"","        }","    }","    ","    private static func mapNetworkError(_ details: ErrorDetails) -> String {","        if details.message.contains(\"offline\") || details.message.contains(\"connection\") {","            return \"No internet connection. Please check your network.\"","        } else if details.message.contains(\"timeout\") {","            return \"The request took too long. Please try again.\"","        } else {","            return \"Connection error. Please check your internet and try again.\"","        }","    }","}","","extension ChatError {","    var userMessage: String {","        switch self {","        case .clientNotInitialized:","            return \"The app isn't ready yet. Please wait a moment.\"","        case .noContent:","            return \"No response received. Please try again.\"","        case .rateLimitExceeded:","            return \"Too many requests. Please wait a moment.\"","        case .invalidRequest(let reason):","            return \"Invalid request: \\(reason)\"","        default:","            return errorDescription ?? \"An error occurred\"","        }","    }","}"]},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio#Check-Your-Understanding":{"type":"link","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio#Check-Your-Understanding","url":"\/tutorials\/openaikit\/08-transcribing-audio#Check-Your-Understanding","title":"Check Your Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Check-Your-Understanding":{"title":"Check Your Understanding","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Check-Your-Understanding","type":"link","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}]},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Check-Your-Understanding":{"type":"link","url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Check-Your-Understanding","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Check-Your-Understanding","title":"Check Your Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Best-Practices-for-Research-Prompting":{"title":"Best Practices for Research Prompting","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Best-Practices-for-Research-Prompting","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Best-Practices-for-Research-Prompting"},"doc://OpenAIKit/tutorials/OpenAIKit/07-Generating-Images":{"title":"Generating Images with AI","abstract":[{"type":"text","text":"Master image generation using DALL-E 2, DALL-E 3, and the advanced GPT Image 1 model. Learn to select the right model, handle errors professionally, and build production-ready image generation features."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/07-Generating-Images","url":"\/tutorials\/openaikit\/07-generating-images","estimatedTime":"25min"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions","type":"topic","role":"project","title":"Working with Functions","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"estimatedTime":"20min","url":"\/tutorials\/openaikit\/03-working-with-functions","kind":"project"},"doc://OpenAIKit/tutorials/OpenAIKit/04-Handling-Errors#Implementing-Retry-Logic":{"title":"Implementing Retry Logic","abstract":[{"type":"text","text":"Learn how to gracefully handle errors and edge cases when working with the OpenAI API."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/04-Handling-Errors#Implementing-Retry-Logic","url":"\/tutorials\/openaikit\/04-handling-errors#Implementing-Retry-Logic"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Chat-Completions":{"title":"Chat Completions","abstract":[],"role":"article","kind":"article","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Chat-Completions","url":"\/tutorials\/openaikit-tutorials\/chat-completions"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Advanced-Research":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Advanced-Research","role":"article","title":"Advanced Research","abstract":[],"url":"\/tutorials\/openaikit-tutorials\/advanced-research","kind":"article"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Building-the-Complete-Assistant":{"title":"Building the Complete Assistant","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Building-the-Complete-Assistant","url":"\/tutorials\/openaikit\/03-working-with-functions#Building-the-Complete-Assistant"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations":{"title":"Building Conversations","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations","url":"\/tutorials\/openaikit\/05-building-conversations","estimatedTime":"18min"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Advanced-Streaming-Features":{"title":"Advanced Streaming Features","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Advanced-Streaming-Features","url":"\/tutorials\/openaikit\/06-streaming-responses#Advanced-Streaming-Features"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials/Getting-Started":{"type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials\/Getting-Started","role":"article","title":"Getting Started","abstract":[],"url":"\/tutorials\/openaikit-tutorials\/getting-started","kind":"article"},"doc://OpenAIKit/tutorials/OpenAIKit-Tutorials":{"title":"Welcome to OpenAIKit","abstract":[{"type":"text","text":"Learn how to integrate OpenAI’s powerful AI models into your Swift applications with OpenAIKit."}],"role":"overview","kind":"overview","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit-Tutorials","url":"\/tutorials\/openaikit-tutorials"},"doc://OpenAIKit/tutorials/OpenAIKit/02-Your-First-Chat-Completion#Customizing-Model-Parameters":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/02-Your-First-Chat-Completion#Customizing-Model-Parameters","role":"pseudoSymbol","title":"Customizing Model Parameters","abstract":[{"type":"text","text":"Make your first API call to generate text using OpenAI’s chat completion models."}],"url":"\/tutorials\/openaikit\/02-your-first-chat-completion#Customizing-Model-Parameters","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Building-a-Vector-Database":{"title":"Building a Vector Database","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Vector-Database","url":"\/tutorials\/openaikit\/09-building-semantic-search#Building-a-Vector-Database"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Advanced-Techniques":{"title":"Advanced Techniques","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Advanced-Techniques","url":"\/tutorials\/openaikit\/09-building-semantic-search#Advanced-Techniques"},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Check-Your-Understanding":{"type":"link","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Check-Your-Understanding","url":"\/tutorials\/openaikit\/06-streaming-responses#Check-Your-Understanding","title":"Check Your Understanding"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Set-Environment-Variables":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Set-Environment-Variables","type":"section","role":"pseudoSymbol","title":"Set Environment Variables","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Set-Environment-Variables","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Building-a-Knowledge-Base-App":{"title":"Building a Knowledge Base App","abstract":[{"type":"text","text":"Create intelligent search systems using embeddings to find semantically similar content."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Building-a-Knowledge-Base-App","url":"\/tutorials\/openaikit\/09-building-semantic-search#Building-a-Knowledge-Base-App"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Implementing-Conversation-Memory":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Implementing-Conversation-Memory","type":"section","role":"pseudoSymbol","title":"Implementing Conversation Memory","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"url":"\/tutorials\/openaikit\/05-building-conversations#Implementing-Conversation-Memory","kind":"section"},"doc://OpenAIKit/tutorials/OpenAIKit/09-Deep-Research-Analysis#Working-with-MCP-Servers":{"title":"Working with MCP Servers","abstract":[{"type":"text","text":"Leverage DeepResearch to perform comprehensive research with web search, code interpretation, and custom data sources."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Deep-Research-Analysis#Working-with-MCP-Servers","url":"\/tutorials\/openaikit\/09-deep-research-analysis#Working-with-MCP-Servers"},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Understanding-Function-Calling":{"title":"Understanding Function Calling","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Understanding-Function-Calling","url":"\/tutorials\/openaikit\/03-working-with-functions#Understanding-Function-Calling"},"errors-01-empty.swift":{"fileName":"ErrorHandling.swift","type":"file","syntax":"swift","identifier":"errors-01-empty.swift","content":["\/\/ ErrorHandling.swift"],"fileType":"swift","highlights":[]},"messages-03-localized.swift":{"syntax":"swift","highlights":[{"line":1},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":10},{"line":15},{"line":17},{"line":19},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":35},{"line":36},{"line":37},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59}],"fileName":"ErrorMessages.swift","fileType":"swift","type":"file","identifier":"messages-03-localized.swift","content":["\/\/ Localized error messages","import Foundation","","class LocalizedErrorHandler {","    static func localizedMessage(for error: Error) -> String {","        let key = errorKey(for: error)","        return NSLocalizedString(key, comment: \"\")","    }","    ","    private static func errorKey(for error: Error) -> String {","        let details = ErrorAnalyzer.analyze(error)","        ","        switch details.type {","        case .api:","            return \"error.api.\\(details.code)\"","        case .network:","            return \"error.network.\\(details.code)\"","        case .unknown:","            return \"error.unknown\"","        }","    }","}","","\/\/ Localizable.strings","\/*","\"error.api.rate_limit_exceeded\" = \"You're sending messages too quickly. Please wait a moment before trying again.\";","\"error.api.invalid_api_key\" = \"Unable to authenticate. Please check your API key in settings.\";","\"error.api.context_length_exceeded\" = \"Your message is too long. Please try sending a shorter message.\";","\"error.api.server_error\" = \"The service is temporarily unavailable. Please try again later.\";","\"error.network.-1009\" = \"No internet connection. Please check your network settings.\";","\"error.network.-1001\" = \"The request timed out. Please check your connection and try again.\";","\"error.unknown\" = \"An unexpected error occurred. Please try again.\";","*\/","","\/\/ Usage in SwiftUI","struct ErrorAlert: ViewModifier {","    @Binding var error: Error?","    ","    func body(content: Content) -> some View {","        content","            .alert(","                \"Error\",","                isPresented: .constant(error != nil),","                presenting: error","            ) { _ in","                Button(\"OK\") {","                    error = nil","                }","            } message: { error in","                Text(LocalizedErrorHandler.localizedMessage(for: error))","            }","    }","}","","extension View {","    func errorAlert(error: Binding<Error?>) -> some View {","        modifier(ErrorAlert(error: error))","    }","}"]},"handler-03-recovery.swift":{"fileName":"ErrorHandler.swift","type":"file","syntax":"swift","identifier":"handler-03-recovery.swift","content":["\/\/ Automatic error recovery strategies","import Foundation","","class ErrorRecoveryManager {","    static let shared = ErrorRecoveryManager()","    ","    func recoveryStrategy(for error: Error, context: ErrorContext) -> ErrorRecovery? {","        let details = ErrorAnalyzer.analyze(error)","        ","        switch details.type {","        case .api:","            return apiRecoveryStrategy(details: details, context: context)","        case .network:","            return networkRecoveryStrategy(details: details, context: context)","        case .unknown:","            return nil","        }","    }","    ","    private func apiRecoveryStrategy(details: ErrorDetails, context: ErrorContext) -> ErrorRecovery? {","        switch details.code {","        case \"rate_limit_exceeded\":","            return DelayedRetryRecovery(delay: 60) {","                \/\/ Retry the operation after delay","                try await retryOperation(context)","            }","            ","        case \"invalid_api_key\":","            return ConfigurationRecovery {","                \/\/ Open settings","                if let url = URL(string: UIApplication.openSettingsURLString) {","                    UIApplication.shared.open(url)","                }","            }","            ","        case \"context_length_exceeded\":","            return MessageTruncationRecovery(context: context)","            ","        default:","            if details.isRetryable {","                return RetryRecovery {","                    try await retryOperation(context)","                }","            }","            return nil","        }","    }","    ","    private func networkRecoveryStrategy(details: ErrorDetails, context: ErrorContext) -> ErrorRecovery? {","        return NetworkRecovery {","            \/\/ Wait for network","            await waitForNetwork()","            try await retryOperation(context)","        }","    }","    ","    private func retryOperation(_ context: ErrorContext) async throws {","        \/\/ Re-execute the original operation based on context","        switch context.operation {","        case \"chat\":","            if let message = context.context[\"message\"] as? String {","                _ = try await sendChatMessage(message)","            }","        default:","            break","        }","    }","    ","    private func waitForNetwork() async {","        \/\/ Implement network monitoring","        \/\/ For now, just wait","        try? await Task.sleep(nanoseconds: 2_000_000_000)","    }","}","","struct DelayedRetryRecovery: ErrorRecovery {","    let delay: TimeInterval","    let action: () async throws -> Void","    ","    func attemptRecovery() async -> Bool {","        do {","            try await Task.sleep(nanoseconds: UInt64(delay * 1_000_000_000))","            try await action()","            return true","        } catch {","            return false","        }","    }","}","","struct MessageTruncationRecovery: ErrorRecovery {","    let context: ErrorContext","    ","    func attemptRecovery() async -> Bool {","        guard let message = context.context[\"message\"] as? String else {","            return false","        }","        ","        \/\/ Truncate message to fit context limit","        let truncated = String(message.prefix(2000)) + \"...\"","        ","        do {","            _ = try await sendChatMessage(truncated)","            return true","        } catch {","            return false","        }","    }","}","","struct NetworkRecovery: ErrorRecovery {","    let action: () async throws -> Void","    ","    func attemptRecovery() async -> Bool {","        \/\/ Check network availability first","        \/\/ This is simplified - in real app use NWPathMonitor","        do {","            try await action()","            return true","        } catch {","            return false","        }","    }","}"],"fileType":"swift","highlights":[{"line":1},{"line":4},{"line":5},{"line":7},{"line":8},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":69},{"line":70},{"line":71},{"line":72},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":91},{"line":92},{"line":94},{"line":95},{"line":96},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124}]},"doc://OpenAIKit/tutorials/OpenAIKit/03-Working-With-Functions#Handling-Function-Calls":{"title":"Handling Function Calls","abstract":[{"type":"text","text":"Extend GPT’s capabilities by defining custom functions that the model can call to perform actions or retrieve information."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/03-Working-With-Functions#Handling-Function-Calls","url":"\/tutorials\/openaikit\/03-working-with-functions#Handling-Function-Calls"},"doc://OpenAIKit/tutorials/OpenAIKit/08-Transcribing-Audio":{"title":"Transcribing Audio","abstract":[{"type":"text","text":"Use Whisper to transcribe audio files into text with high accuracy across multiple languages."}],"role":"project","kind":"project","type":"topic","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/08-Transcribing-Audio","url":"\/tutorials\/openaikit\/08-transcribing-audio","estimatedTime":"12min"},"errors-03-catch.swift":{"syntax":"swift","highlights":[{"line":5},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32}],"fileName":"ErrorHandling.swift","fileType":"swift","type":"file","identifier":"errors-03-catch.swift","content":["\/\/ ErrorHandling.swift","import Foundation","import OpenAIKit","","func sendChatMessage(_ message: String) async -> Result<String, Error> {","    let openAI = OpenAIManager.shared.client!","    ","    let request = ChatCompletionRequest(","        messages: [ChatMessage(role: .user, content: message)],","        model: \"gpt-4o-mini\"","    )","    ","    do {","        let response = try await openAI.chat.completions(request)","        let content = response.choices.first?.message.content ?? \"\"","        return .success(content)","    } catch {","        return .failure(error)","    }","}","","\/\/ Usage","Task {","    let result = await sendChatMessage(\"Hello!\")","    ","    switch result {","    case .success(let response):","        print(\"Response: \\(response)\")","    case .failure(let error):","        print(\"Error: \\(error)\")","    }","}"]},"errors-05-details.swift":{"fileName":"ErrorHandling.swift","type":"file","syntax":"swift","content":["\/\/ ErrorHandling.swift - Extracting error details","import Foundation","import OpenAIKit","","class ErrorAnalyzer {","    static func analyze(_ error: Error) -> ErrorDetails {","        if let apiError = error as? APIError {","            return ErrorDetails(","                type: .api,","                code: apiError.error.code ?? \"unknown\",","                message: apiError.error.message,","                isRetryable: isRetryable(apiError),","                suggestedAction: suggestAction(for: apiError)","            )","        } else if let urlError = error as? URLError {","            return ErrorDetails(","                type: .network,","                code: String(urlError.code.rawValue),","                message: urlError.localizedDescription,","                isRetryable: urlError.code != .cancelled,","                suggestedAction: \"Check your internet connection\"","            )","        } else {","            return ErrorDetails(","                type: .unknown,","                code: \"unknown\",","                message: error.localizedDescription,","                isRetryable: false,","                suggestedAction: \"Please try again or contact support\"","            )","        }","    }","    ","    private static func isRetryable(_ error: APIError) -> Bool {","        guard let code = error.error.code else { return false }","        ","        switch code {","        case \"rate_limit_exceeded\", \"server_error\", \"service_unavailable\":","            return true","        case \"invalid_api_key\", \"invalid_request\", \"invalid_model\":","            return false","        default:","            return false","        }","    }","    ","    private static func suggestAction(for error: APIError) -> String {","        guard let code = error.error.code else {","            return \"Please try again\"","        }","        ","        switch code {","        case \"rate_limit_exceeded\":","            return \"Wait a moment before trying again\"","        case \"invalid_api_key\":","            return \"Check your API key configuration\"","        case \"invalid_model\":","            return \"Use a valid model name like 'gpt-4o-mini'\"","        case \"context_length_exceeded\":","            return \"Reduce the length of your messages\"","        case \"server_error\":","            return \"OpenAI is experiencing issues. Try again later\"","        default:","            return \"Review your request and try again\"","        }","    }","}","","struct ErrorDetails {","    enum ErrorType {","        case api, network, unknown","    }","    ","    let type: ErrorType","    let code: String","    let message: String","    let isRetryable: Bool","    let suggestedAction: String","}"],"identifier":"errors-05-details.swift","fileType":"swift","highlights":[{"line":1},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":47},{"line":48},{"line":49},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":69},{"line":70},{"line":71},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78}]},"doc://OpenAIKit/tutorials/OpenAIKit/06-Streaming-Responses#Handling-Stream-Interruptions":{"title":"Handling Stream Interruptions","abstract":[{"type":"text","text":"Implement real-time streaming to create responsive chat experiences that display responses as they’re generated."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/06-Streaming-Responses#Handling-Stream-Interruptions","url":"\/tutorials\/openaikit\/06-streaming-responses#Handling-Stream-Interruptions"},"doc://OpenAIKit/tutorials/OpenAIKit/05-Building-Conversations#Creating-Dynamic-Personas":{"title":"Creating Dynamic Personas","abstract":[{"type":"text","text":"Create sophisticated conversational AI experiences by managing context, memory, and multi-turn interactions."}],"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/05-Building-Conversations#Creating-Dynamic-Personas","url":"\/tutorials\/openaikit\/05-building-conversations#Creating-Dynamic-Personas"},"retry-04-circuit.swift":{"syntax":"swift","highlights":[{"line":1},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":45},{"line":46},{"line":47},{"line":48},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":57},{"line":58},{"line":59},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":113},{"line":114},{"line":117}],"fileName":"RetryLogic.swift","fileType":"swift","type":"file","identifier":"retry-04-circuit.swift","content":["\/\/ Circuit breaker pattern","import Foundation","","actor CircuitBreaker {","    enum State {","        case closed","        case open(until: Date)","        case halfOpen","    }","    ","    private var state: State = .closed","    private var failureCount = 0","    private let failureThreshold: Int","    private let timeout: TimeInterval","    private let successThreshold: Int","    private var successCount = 0","    ","    init(","        failureThreshold: Int = 5,","        timeout: TimeInterval = 60,","        successThreshold: Int = 2","    ) {","        self.failureThreshold = failureThreshold","        self.timeout = timeout","        self.successThreshold = successThreshold","    }","    ","    func canExecute() async -> Bool {","        switch state {","        case .closed:","            return true","            ","        case .open(let until):","            if Date() > until {","                state = .halfOpen","                return true","            }","            return false","            ","        case .halfOpen:","            return true","        }","    }","    ","    func recordSuccess() async {","        switch state {","        case .closed:","            failureCount = 0","            ","        case .halfOpen:","            successCount += 1","            if successCount >= successThreshold {","                state = .closed","                failureCount = 0","                successCount = 0","            }","            ","        case .open:","            break","        }","    }","    ","    func recordFailure() async {","        switch state {","        case .closed:","            failureCount += 1","            if failureCount >= failureThreshold {","                state = .open(until: Date().addingTimeInterval(timeout))","            }","            ","        case .halfOpen:","            state = .open(until: Date().addingTimeInterval(timeout))","            successCount = 0","            ","        case .open:","            break","        }","    }","    ","    func reset() async {","        state = .closed","        failureCount = 0","        successCount = 0","    }","}","","\/\/ Usage with OpenAI","class ResilientOpenAIClient {","    private let client: OpenAIKit","    private let circuitBreaker = CircuitBreaker()","    ","    init(client: OpenAIKit) {","        self.client = client","    }","    ","    func completions(_ request: ChatCompletionRequest) async throws -> ChatCompletionResponse {","        \/\/ Check circuit breaker","        guard await circuitBreaker.canExecute() else {","            throw CircuitBreakerError.circuitOpen","        }","        ","        do {","            let response = try await client.chat.completions(request)","            await circuitBreaker.recordSuccess()","            return response","        } catch {","            await circuitBreaker.recordFailure()","            throw error","        }","    }","}","","enum CircuitBreakerError: LocalizedError {","    case circuitOpen","    ","    var errorDescription: String? {","        \"Service temporarily unavailable. Please try again later.\"","    }","}"]},"doc://OpenAIKit/tutorials/OpenAIKit/09-Building-Semantic-Search#Check-Your-Understanding":{"identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/09-Building-Semantic-Search#Check-Your-Understanding","title":"Check Your Understanding","url":"\/tutorials\/openaikit\/09-building-semantic-search#Check-Your-Understanding","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"type":"link"},"doc://OpenAIKit/tutorials/OpenAIKit/01-Setting-Up-OpenAIKit#Configure-OpenAIKit":{"type":"section","identifier":"doc:\/\/OpenAIKit\/tutorials\/OpenAIKit\/01-Setting-Up-OpenAIKit#Configure-OpenAIKit","role":"pseudoSymbol","title":"Configure OpenAIKit","abstract":[{"type":"text","text":"Configure OpenAIKit in your Swift project and authenticate with the OpenAI API."}],"url":"\/tutorials\/openaikit\/01-setting-up-openaikit#Configure-OpenAIKit","kind":"section"}}}