@Tutorial(time: 10) {
    @Intro(title: "Setting Up OpenAIKit") {
        Configure OpenAIKit in your Swift project and authenticate with the OpenAI API.
        
        This tutorial covers installation, API key management, and basic configuration options.
        
        @Image(source: setup-intro.png, alt: "OpenAIKit setup")
    }
    
    @Section(title: "Install OpenAIKit") {
        @ContentAndMedia {
            First, you'll add OpenAIKit as a dependency to your Swift project using Swift Package Manager.
            
            @Image(source: spm-install.png, alt: "Swift Package Manager")
        }
        
        @Steps {
            @Step {
                Open your project in Xcode and navigate to **File â†’ Add Package Dependencies**.
                
                @Code(name: "Package.swift", file: setup-01-package.swift)
            }
            
            @Step {
                Enter the OpenAIKit repository URL and select your version requirements.
                
                @Code(name: "Package.swift", file: setup-02-package.swift) {
                    @Image(source: setup-step2.png, alt: "Add package dialog")
                }
            }
            
            @Step {
                Add OpenAIKit to your target's dependencies.
                
                @Code(name: "Package.swift", file: setup-03-package.swift)
            }
        }
    }
    
    @Section(title: "Obtain an API Key") {
        @ContentAndMedia {
            To use OpenAI's API, you need an API key from your OpenAI account.
            
            @Image(source: api-key-section.png, alt: "API Keys page")
        }
        
        @Steps {
            @Step {
                Visit [platform.openai.com](https://platform.openai.com) and sign in to your account.
                
                @Image(source: openai-platform.png, alt: "OpenAI Platform")
            }
            
            @Step {
                Navigate to the API Keys section in your account settings.
                
                @Image(source: api-keys-nav.png, alt: "API Keys navigation")
            }
            
            @Step {
                Click "Create new secret key" and give it a descriptive name.
                
                @Image(source: create-key.png, alt: "Create API key")
            }
            
            @Step {
                Copy your API key immediately - you won't be able to see it again!
                
                @Image(source: copy-key.png, alt: "Copy API key")
            }
        }
    }
    
    @Section(title: "Configure OpenAIKit") {
        @ContentAndMedia {
            Now let's initialize OpenAIKit with your API key. We'll use environment variables for security.
            
            @Image(source: configure-intro.png, alt: "Configuration")
        }
        
        @Steps {
            @Step {
                Create a new Swift file for your OpenAI client setup.
                
                @Code(name: "OpenAIClient.swift", file: setup-04-empty.swift)
            }
            
            @Step {
                Import OpenAIKit and create a shared instance.
                
                @Code(name: "OpenAIClient.swift", file: setup-05-import.swift)
            }
            
            @Step {
                Add a computed property to safely retrieve your API key from environment variables.
                
                @Code(name: "OpenAIClient.swift", file: setup-06-apikey.swift)
            }
            
            @Step {
                Initialize the OpenAIKit client with your API key.
                
                @Code(name: "OpenAIClient.swift", file: setup-07-init.swift)
            }
            
            @Step {
                Add error handling for missing API keys.
                
                @Code(name: "OpenAIClient.swift", file: setup-08-complete.swift)
            }
        }
    }
    
    @Section(title: "Set Environment Variables") {
        @ContentAndMedia {
            Configure your development environment to securely provide the API key.
            
            @Image(source: env-vars.png, alt: "Environment variables")
        }
        
        @Steps {
            @Step {
                In Xcode, edit your scheme by clicking the scheme selector and choosing "Edit Scheme".
                
                @Image(source: edit-scheme.png, alt: "Edit scheme")
            }
            
            @Step {
                Navigate to the Run section and select the Arguments tab.
                
                @Image(source: scheme-arguments.png, alt: "Scheme arguments")
            }
            
            @Step {
                Add your API key as an environment variable named `OPENAI_API_KEY`.
                
                @Image(source: add-env-var.png, alt: "Add environment variable")
            }
        }
    }
    
    @Assessments {
        @MultipleChoice {
            What is the recommended way to store your OpenAI API key?
            
            @Choice(isCorrect: false) {
                Hardcode it directly in your source code.
                
                @Justification(reaction: "Incorrect") {
                    Never hardcode API keys in your source code! They could be exposed in version control.
                }
            }
            
            @Choice(isCorrect: true) {
                Use environment variables or secure storage like Keychain.
                
                @Justification(reaction: "Correct!") {
                    Environment variables and Keychain keep your API keys secure and out of your source code.
                }
            }
            
            @Choice(isCorrect: false) {
                Store it in UserDefaults.
                
                @Justification(reaction: "Incorrect") {
                    UserDefaults is not secure for sensitive data like API keys.
                }
            }
        }
        
        @MultipleChoice {
            Which Swift Package Manager command adds OpenAIKit to your project?
            
            @Choice(isCorrect: false) {
                `.package(url: "openaikit", from: "1.0.0")`
                
                @Justification(reaction: "Incorrect") {
                    This is missing the full repository URL.
                }
            }
            
            @Choice(isCorrect: true) {
                `.package(url: "https://github.com/marcusziade/OpenAIKit.git", from: "1.0.0")`
                
                @Justification(reaction: "Correct!") {
                    This is the proper format with the full repository URL.
                }
            }
        }
    }
}